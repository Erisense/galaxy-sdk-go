// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package common

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

//List of ErrorCode.
type ErrorCode int64

const (
	ErrorCode_INVALID_ACTION          ErrorCode = 1
	ErrorCode_INVALID_ATTRIBUTE       ErrorCode = 2
	ErrorCode_QUEUE_DELETED_RECENTLY  ErrorCode = 3
	ErrorCode_QUEUE_EXIST             ErrorCode = 4
	ErrorCode_QUEUE_NAME_MISSING      ErrorCode = 5
	ErrorCode_QUEUE_NOT_EXIST         ErrorCode = 6
	ErrorCode_QUEUE_INUSE             ErrorCode = 7
	ErrorCode_QUEUE_URI_CONFLICT      ErrorCode = 8
	ErrorCode_INVALID_INDEX_ID        ErrorCode = 9
	ErrorCode_MESSAGE_BODY_MISSING    ErrorCode = 10
	ErrorCode_INVALID_RECEIPT_HANDLE  ErrorCode = 11
	ErrorCode_INDEX_NOT_UNIQUE        ErrorCode = 12
	ErrorCode_PERMISSION_DENIED       ErrorCode = 13
	ErrorCode_REQUEST_LENGTH_EXCEEDED ErrorCode = 34
	ErrorCode_BAD_REQUEST             ErrorCode = 35
	ErrorCode_INTERNAL_ERROR          ErrorCode = 14
	ErrorCode_PARTITION_NOT_EXIST     ErrorCode = 15
	ErrorCode_PARTITION_NOT_RUNNING   ErrorCode = 16
	ErrorCode_QUEUE_NOT_CACHED        ErrorCode = 17
	ErrorCode_PARTITION_NOT_SERVING   ErrorCode = 18
	ErrorCode_TTRANSPORT_ERROR        ErrorCode = 19
	ErrorCode_QUOTA_EXCEEDED          ErrorCode = 20
	ErrorCode_QUOTA_NOT_EXIST         ErrorCode = 21
	ErrorCode_QUOTA_LOCK_FAILED       ErrorCode = 22
	ErrorCode_UNKNOWN                 ErrorCode = 30
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_INVALID_ACTION:
		return "ErrorCode_INVALID_ACTION"
	case ErrorCode_INVALID_ATTRIBUTE:
		return "ErrorCode_INVALID_ATTRIBUTE"
	case ErrorCode_QUEUE_DELETED_RECENTLY:
		return "ErrorCode_QUEUE_DELETED_RECENTLY"
	case ErrorCode_QUEUE_EXIST:
		return "ErrorCode_QUEUE_EXIST"
	case ErrorCode_QUEUE_NAME_MISSING:
		return "ErrorCode_QUEUE_NAME_MISSING"
	case ErrorCode_QUEUE_NOT_EXIST:
		return "ErrorCode_QUEUE_NOT_EXIST"
	case ErrorCode_QUEUE_INUSE:
		return "ErrorCode_QUEUE_INUSE"
	case ErrorCode_QUEUE_URI_CONFLICT:
		return "ErrorCode_QUEUE_URI_CONFLICT"
	case ErrorCode_INVALID_INDEX_ID:
		return "ErrorCode_INVALID_INDEX_ID"
	case ErrorCode_MESSAGE_BODY_MISSING:
		return "ErrorCode_MESSAGE_BODY_MISSING"
	case ErrorCode_INVALID_RECEIPT_HANDLE:
		return "ErrorCode_INVALID_RECEIPT_HANDLE"
	case ErrorCode_INDEX_NOT_UNIQUE:
		return "ErrorCode_INDEX_NOT_UNIQUE"
	case ErrorCode_PERMISSION_DENIED:
		return "ErrorCode_PERMISSION_DENIED"
	case ErrorCode_REQUEST_LENGTH_EXCEEDED:
		return "ErrorCode_REQUEST_LENGTH_EXCEEDED"
	case ErrorCode_BAD_REQUEST:
		return "ErrorCode_BAD_REQUEST"
	case ErrorCode_INTERNAL_ERROR:
		return "ErrorCode_INTERNAL_ERROR"
	case ErrorCode_PARTITION_NOT_EXIST:
		return "ErrorCode_PARTITION_NOT_EXIST"
	case ErrorCode_PARTITION_NOT_RUNNING:
		return "ErrorCode_PARTITION_NOT_RUNNING"
	case ErrorCode_QUEUE_NOT_CACHED:
		return "ErrorCode_QUEUE_NOT_CACHED"
	case ErrorCode_PARTITION_NOT_SERVING:
		return "ErrorCode_PARTITION_NOT_SERVING"
	case ErrorCode_TTRANSPORT_ERROR:
		return "ErrorCode_TTRANSPORT_ERROR"
	case ErrorCode_QUOTA_EXCEEDED:
		return "ErrorCode_QUOTA_EXCEEDED"
	case ErrorCode_QUOTA_NOT_EXIST:
		return "ErrorCode_QUOTA_NOT_EXIST"
	case ErrorCode_QUOTA_LOCK_FAILED:
		return "ErrorCode_QUOTA_LOCK_FAILED"
	case ErrorCode_UNKNOWN:
		return "ErrorCode_UNKNOWN"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "ErrorCode_INVALID_ACTION":
		return ErrorCode_INVALID_ACTION, nil
	case "ErrorCode_INVALID_ATTRIBUTE":
		return ErrorCode_INVALID_ATTRIBUTE, nil
	case "ErrorCode_QUEUE_DELETED_RECENTLY":
		return ErrorCode_QUEUE_DELETED_RECENTLY, nil
	case "ErrorCode_QUEUE_EXIST":
		return ErrorCode_QUEUE_EXIST, nil
	case "ErrorCode_QUEUE_NAME_MISSING":
		return ErrorCode_QUEUE_NAME_MISSING, nil
	case "ErrorCode_QUEUE_NOT_EXIST":
		return ErrorCode_QUEUE_NOT_EXIST, nil
	case "ErrorCode_QUEUE_INUSE":
		return ErrorCode_QUEUE_INUSE, nil
	case "ErrorCode_QUEUE_URI_CONFLICT":
		return ErrorCode_QUEUE_URI_CONFLICT, nil
	case "ErrorCode_INVALID_INDEX_ID":
		return ErrorCode_INVALID_INDEX_ID, nil
	case "ErrorCode_MESSAGE_BODY_MISSING":
		return ErrorCode_MESSAGE_BODY_MISSING, nil
	case "ErrorCode_INVALID_RECEIPT_HANDLE":
		return ErrorCode_INVALID_RECEIPT_HANDLE, nil
	case "ErrorCode_INDEX_NOT_UNIQUE":
		return ErrorCode_INDEX_NOT_UNIQUE, nil
	case "ErrorCode_PERMISSION_DENIED":
		return ErrorCode_PERMISSION_DENIED, nil
	case "ErrorCode_REQUEST_LENGTH_EXCEEDED":
		return ErrorCode_REQUEST_LENGTH_EXCEEDED, nil
	case "ErrorCode_BAD_REQUEST":
		return ErrorCode_BAD_REQUEST, nil
	case "ErrorCode_INTERNAL_ERROR":
		return ErrorCode_INTERNAL_ERROR, nil
	case "ErrorCode_PARTITION_NOT_EXIST":
		return ErrorCode_PARTITION_NOT_EXIST, nil
	case "ErrorCode_PARTITION_NOT_RUNNING":
		return ErrorCode_PARTITION_NOT_RUNNING, nil
	case "ErrorCode_QUEUE_NOT_CACHED":
		return ErrorCode_QUEUE_NOT_CACHED, nil
	case "ErrorCode_PARTITION_NOT_SERVING":
		return ErrorCode_PARTITION_NOT_SERVING, nil
	case "ErrorCode_TTRANSPORT_ERROR":
		return ErrorCode_TTRANSPORT_ERROR, nil
	case "ErrorCode_QUOTA_EXCEEDED":
		return ErrorCode_QUOTA_EXCEEDED, nil
	case "ErrorCode_QUOTA_NOT_EXIST":
		return ErrorCode_QUOTA_NOT_EXIST, nil
	case "ErrorCode_QUOTA_LOCK_FAILED":
		return ErrorCode_QUOTA_LOCK_FAILED, nil
	case "ErrorCode_UNKNOWN":
		return ErrorCode_UNKNOWN, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

type RetryType int64

const (
	RetryType_SAFE   RetryType = 0
	RetryType_UNSAFE RetryType = 1
	RetryType_UNSURE RetryType = 2
)

func (p RetryType) String() string {
	switch p {
	case RetryType_SAFE:
		return "RetryType_SAFE"
	case RetryType_UNSAFE:
		return "RetryType_UNSAFE"
	case RetryType_UNSURE:
		return "RetryType_UNSURE"
	}
	return "<UNSET>"
}

func RetryTypeFromString(s string) (RetryType, error) {
	switch s {
	case "RetryType_SAFE":
		return RetryType_SAFE, nil
	case "RetryType_UNSAFE":
		return RetryType_UNSAFE, nil
	case "RetryType_UNSURE":
		return RetryType_UNSURE, nil
	}
	return RetryType(0), fmt.Errorf("not a valid RetryType string")
}

func RetryTypePtr(v RetryType) *RetryType { return &v }

type GalaxyEmqServiceException struct {
	ErrorCode *int32  `thrift:"errorCode,1" json:"errorCode"`
	ErrMsg    *string `thrift:"errMsg,2" json:"errMsg"`
	Details   *string `thrift:"details,3" json:"details"`
	RequestId *string `thrift:"requestId,4" json:"requestId"`
	QueueName *string `thrift:"queueName,5" json:"queueName"`
}

func NewGalaxyEmqServiceException() *GalaxyEmqServiceException {
	return &GalaxyEmqServiceException{}
}

var GalaxyEmqServiceException_ErrorCode_DEFAULT int32

func (p *GalaxyEmqServiceException) GetErrorCode() int32 {
	if !p.IsSetErrorCode() {
		return GalaxyEmqServiceException_ErrorCode_DEFAULT
	}
	return *p.ErrorCode
}

var GalaxyEmqServiceException_ErrMsg_DEFAULT string

func (p *GalaxyEmqServiceException) GetErrMsg() string {
	if !p.IsSetErrMsg() {
		return GalaxyEmqServiceException_ErrMsg_DEFAULT
	}
	return *p.ErrMsg
}

var GalaxyEmqServiceException_Details_DEFAULT string

func (p *GalaxyEmqServiceException) GetDetails() string {
	if !p.IsSetDetails() {
		return GalaxyEmqServiceException_Details_DEFAULT
	}
	return *p.Details
}

var GalaxyEmqServiceException_RequestId_DEFAULT string

func (p *GalaxyEmqServiceException) GetRequestId() string {
	if !p.IsSetRequestId() {
		return GalaxyEmqServiceException_RequestId_DEFAULT
	}
	return *p.RequestId
}

var GalaxyEmqServiceException_QueueName_DEFAULT string

func (p *GalaxyEmqServiceException) GetQueueName() string {
	if !p.IsSetQueueName() {
		return GalaxyEmqServiceException_QueueName_DEFAULT
	}
	return *p.QueueName
}
func (p *GalaxyEmqServiceException) IsSetErrorCode() bool {
	return p.ErrorCode != nil
}

func (p *GalaxyEmqServiceException) IsSetErrMsg() bool {
	return p.ErrMsg != nil
}

func (p *GalaxyEmqServiceException) IsSetDetails() bool {
	return p.Details != nil
}

func (p *GalaxyEmqServiceException) IsSetRequestId() bool {
	return p.RequestId != nil
}

func (p *GalaxyEmqServiceException) IsSetQueueName() bool {
	return p.QueueName != nil
}

func (p *GalaxyEmqServiceException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GalaxyEmqServiceException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ErrorCode = &v
	}
	return nil
}

func (p *GalaxyEmqServiceException) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ErrMsg = &v
	}
	return nil
}

func (p *GalaxyEmqServiceException) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Details = &v
	}
	return nil
}

func (p *GalaxyEmqServiceException) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.RequestId = &v
	}
	return nil
}

func (p *GalaxyEmqServiceException) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.QueueName = &v
	}
	return nil
}

func (p *GalaxyEmqServiceException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GalaxyEmqServiceException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GalaxyEmqServiceException) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ErrorCode)); err != nil {
			return fmt.Errorf("%T.errorCode (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
		}
	}
	return err
}

func (p *GalaxyEmqServiceException) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrMsg() {
		if err := oprot.WriteFieldBegin("errMsg", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:errMsg: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ErrMsg)); err != nil {
			return fmt.Errorf("%T.errMsg (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:errMsg: %s", p, err)
		}
	}
	return err
}

func (p *GalaxyEmqServiceException) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetails() {
		if err := oprot.WriteFieldBegin("details", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:details: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Details)); err != nil {
			return fmt.Errorf("%T.details (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:details: %s", p, err)
		}
	}
	return err
}

func (p *GalaxyEmqServiceException) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestId() {
		if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:requestId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.RequestId)); err != nil {
			return fmt.Errorf("%T.requestId (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:requestId: %s", p, err)
		}
	}
	return err
}

func (p *GalaxyEmqServiceException) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueName() {
		if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:queueName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.QueueName)); err != nil {
			return fmt.Errorf("%T.queueName (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:queueName: %s", p, err)
		}
	}
	return err
}

func (p *GalaxyEmqServiceException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GalaxyEmqServiceException(%+v)", *p)
}

func (p *GalaxyEmqServiceException) Error() string {
	return p.String()
}

type Version struct {
	Major    int32  `thrift:"major,1,required" json:"major"`
	Minor    int32  `thrift:"minor,2,required" json:"minor"`
	Revision int32  `thrift:"revision,3,required" json:"revision"`
	Date     string `thrift:"date,4,required" json:"date"`
	Details  string `thrift:"details,5" json:"details"`
}

func NewVersion() *Version {
	return &Version{
		Major: 1,

		Date: "19700101",
	}
}

func (p *Version) GetMajor() int32 {
	return p.Major
}

func (p *Version) GetMinor() int32 {
	return p.Minor
}

func (p *Version) GetRevision() int32 {
	return p.Revision
}

func (p *Version) GetDate() string {
	return p.Date
}

var Version_Details_DEFAULT string = ""

func (p *Version) GetDetails() string {
	return p.Details
}
func (p *Version) IsSetDetails() bool {
	return p.Details != Version_Details_DEFAULT
}

func (p *Version) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Version) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Major = v
	}
	return nil
}

func (p *Version) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Minor = v
	}
	return nil
}

func (p *Version) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *Version) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Date = v
	}
	return nil
}

func (p *Version) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Details = v
	}
	return nil
}

func (p *Version) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Version"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Version) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("major", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:major: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Major)); err != nil {
		return fmt.Errorf("%T.major (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:major: %s", p, err)
	}
	return err
}

func (p *Version) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("minor", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:minor: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Minor)); err != nil {
		return fmt.Errorf("%T.minor (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:minor: %s", p, err)
	}
	return err
}

func (p *Version) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:revision: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Revision)); err != nil {
		return fmt.Errorf("%T.revision (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:revision: %s", p, err)
	}
	return err
}

func (p *Version) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("date", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:date: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Date)); err != nil {
		return fmt.Errorf("%T.date (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:date: %s", p, err)
	}
	return err
}

func (p *Version) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetails() {
		if err := oprot.WriteFieldBegin("details", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:details: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Details)); err != nil {
			return fmt.Errorf("%T.details (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:details: %s", p, err)
		}
	}
	return err
}

func (p *Version) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Version(%+v)", *p)
}
