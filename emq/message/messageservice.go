// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package message

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/emq/common"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__

type MessageService interface {
	common.EMQBaseService

	// Send message;
	//
	//
	// Parameters:
	//  - SendMessageRequest
	SendMessage(sendMessageRequest *SendMessageRequest) (r *SendMessageResponse, err error)
	// Send message batch;
	//
	//
	// Parameters:
	//  - SendMessageBatchRequest
	SendMessageBatch(sendMessageBatchRequest *SendMessageBatchRequest) (r *SendMessageBatchResponse, err error)
	// Receive message;
	//
	//
	// Parameters:
	//  - ReceiveMessageRequest
	ReceiveMessage(receiveMessageRequest *ReceiveMessageRequest) (r []*ReceiveMessageResponse, err error)
	// Change message invisibility seconds;
	//
	//
	// Parameters:
	//  - ChangeMessageVisibilityRequest
	ChangeMessageVisibilitySeconds(changeMessageVisibilityRequest *ChangeMessageVisibilityRequest) (err error)
	// Change message invisibility seconds batch;
	//
	//
	// Parameters:
	//  - ChangeMessageVisibilityBatchRequest
	ChangeMessageVisibilitySecondsBatch(changeMessageVisibilityBatchRequest *ChangeMessageVisibilityBatchRequest) (r *ChangeMessageVisibilityBatchResponse, err error)
	// Delete message;
	//
	//
	// Parameters:
	//  - DeleteMessageRequest
	DeleteMessage(deleteMessageRequest *DeleteMessageRequest) (err error)
	// Delete message batch;
	//
	//
	// Parameters:
	//  - DeleteMessageBatchRequest
	DeleteMessageBatch(deleteMessageBatchRequest *DeleteMessageBatchRequest) (r *DeleteMessageBatchResponse, err error)
	// Dead message;
	//
	//
	// Parameters:
	//  - DeadMessageRequest
	DeadMessage(deadMessageRequest *DeadMessageRequest) (err error)
	// Dead message batch;
	//
	//
	// Parameters:
	//  - DeadMessageBatchRequest
	DeadMessageBatch(deadMessageBatchRequest *DeadMessageBatchRequest) (r *DeadMessageBatchResponse, err error)
	// Peek message;
	//
	//
	// Parameters:
	//  - PeekMessageRequest
	PeekMessage(peekMessageRequest *PeekMessageRequest) (r []*PeekMessageResponse, err error)
	// Delete peek message;
	//
	//
	// Parameters:
	//  - DeletePeekMessageRequest
	DeletePeekMessage(deletePeekMessageRequest *DeletePeekMessageRequest) (err error)
	// Delete peek message batch;
	//
	//
	// Parameters:
	//  - DeletePeekMessageBatchRequest
	DeletePeekMessageBatch(deletePeekMessageBatchRequest *DeletePeekMessageBatchRequest) (r *DeletePeekMessageBatchResponse, err error)
}

type MessageServiceClient struct {
	*common.EMQBaseServiceClient
}

func NewMessageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MessageServiceClient {
	return &MessageServiceClient{EMQBaseServiceClient: common.NewEMQBaseServiceClientFactory(t, f)}
}

func NewMessageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MessageServiceClient {
	return &MessageServiceClient{EMQBaseServiceClient: common.NewEMQBaseServiceClientProtocol(t, iprot, oprot)}
}

// Send message;
//
//
// Parameters:
//  - SendMessageRequest
func (p *MessageServiceClient) SendMessage(sendMessageRequest *SendMessageRequest) (r *SendMessageResponse, err error) {
	if err = p.sendSendMessage(sendMessageRequest); err != nil {
		return
	}
	return p.recvSendMessage()
}

func (p *MessageServiceClient) sendSendMessage(sendMessageRequest *SendMessageRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendMessageArgs{
		SendMessageRequest: sendMessageRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvSendMessage() (value *SendMessageResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendMessage failed: out of sequence response")
		return
	}
	result := SendMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Send message batch;
//
//
// Parameters:
//  - SendMessageBatchRequest
func (p *MessageServiceClient) SendMessageBatch(sendMessageBatchRequest *SendMessageBatchRequest) (r *SendMessageBatchResponse, err error) {
	if err = p.sendSendMessageBatch(sendMessageBatchRequest); err != nil {
		return
	}
	return p.recvSendMessageBatch()
}

func (p *MessageServiceClient) sendSendMessageBatch(sendMessageBatchRequest *SendMessageBatchRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendMessageBatch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendMessageBatchArgs{
		SendMessageBatchRequest: sendMessageBatchRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvSendMessageBatch() (value *SendMessageBatchResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendMessageBatch failed: out of sequence response")
		return
	}
	result := SendMessageBatchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Receive message;
//
//
// Parameters:
//  - ReceiveMessageRequest
func (p *MessageServiceClient) ReceiveMessage(receiveMessageRequest *ReceiveMessageRequest) (r []*ReceiveMessageResponse, err error) {
	if err = p.sendReceiveMessage(receiveMessageRequest); err != nil {
		return
	}
	return p.recvReceiveMessage()
}

func (p *MessageServiceClient) sendReceiveMessage(receiveMessageRequest *ReceiveMessageRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("receiveMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReceiveMessageArgs{
		ReceiveMessageRequest: receiveMessageRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvReceiveMessage() (value []*ReceiveMessageResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "receiveMessage failed: out of sequence response")
		return
	}
	result := ReceiveMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Change message invisibility seconds;
//
//
// Parameters:
//  - ChangeMessageVisibilityRequest
func (p *MessageServiceClient) ChangeMessageVisibilitySeconds(changeMessageVisibilityRequest *ChangeMessageVisibilityRequest) (err error) {
	if err = p.sendChangeMessageVisibilitySeconds(changeMessageVisibilityRequest); err != nil {
		return
	}
	return p.recvChangeMessageVisibilitySeconds()
}

func (p *MessageServiceClient) sendChangeMessageVisibilitySeconds(changeMessageVisibilityRequest *ChangeMessageVisibilityRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("changeMessageVisibilitySeconds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChangeMessageVisibilitySecondsArgs{
		ChangeMessageVisibilityRequest: changeMessageVisibilityRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvChangeMessageVisibilitySeconds() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeMessageVisibilitySeconds failed: out of sequence response")
		return
	}
	result := ChangeMessageVisibilitySecondsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Change message invisibility seconds batch;
//
//
// Parameters:
//  - ChangeMessageVisibilityBatchRequest
func (p *MessageServiceClient) ChangeMessageVisibilitySecondsBatch(changeMessageVisibilityBatchRequest *ChangeMessageVisibilityBatchRequest) (r *ChangeMessageVisibilityBatchResponse, err error) {
	if err = p.sendChangeMessageVisibilitySecondsBatch(changeMessageVisibilityBatchRequest); err != nil {
		return
	}
	return p.recvChangeMessageVisibilitySecondsBatch()
}

func (p *MessageServiceClient) sendChangeMessageVisibilitySecondsBatch(changeMessageVisibilityBatchRequest *ChangeMessageVisibilityBatchRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("changeMessageVisibilitySecondsBatch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChangeMessageVisibilitySecondsBatchArgs{
		ChangeMessageVisibilityBatchRequest: changeMessageVisibilityBatchRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvChangeMessageVisibilitySecondsBatch() (value *ChangeMessageVisibilityBatchResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeMessageVisibilitySecondsBatch failed: out of sequence response")
		return
	}
	result := ChangeMessageVisibilitySecondsBatchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Delete message;
//
//
// Parameters:
//  - DeleteMessageRequest
func (p *MessageServiceClient) DeleteMessage(deleteMessageRequest *DeleteMessageRequest) (err error) {
	if err = p.sendDeleteMessage(deleteMessageRequest); err != nil {
		return
	}
	return p.recvDeleteMessage()
}

func (p *MessageServiceClient) sendDeleteMessage(deleteMessageRequest *DeleteMessageRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteMessageArgs{
		DeleteMessageRequest: deleteMessageRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvDeleteMessage() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteMessage failed: out of sequence response")
		return
	}
	result := DeleteMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Delete message batch;
//
//
// Parameters:
//  - DeleteMessageBatchRequest
func (p *MessageServiceClient) DeleteMessageBatch(deleteMessageBatchRequest *DeleteMessageBatchRequest) (r *DeleteMessageBatchResponse, err error) {
	if err = p.sendDeleteMessageBatch(deleteMessageBatchRequest); err != nil {
		return
	}
	return p.recvDeleteMessageBatch()
}

func (p *MessageServiceClient) sendDeleteMessageBatch(deleteMessageBatchRequest *DeleteMessageBatchRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteMessageBatch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteMessageBatchArgs{
		DeleteMessageBatchRequest: deleteMessageBatchRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvDeleteMessageBatch() (value *DeleteMessageBatchResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteMessageBatch failed: out of sequence response")
		return
	}
	result := DeleteMessageBatchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Dead message;
//
//
// Parameters:
//  - DeadMessageRequest
func (p *MessageServiceClient) DeadMessage(deadMessageRequest *DeadMessageRequest) (err error) {
	if err = p.sendDeadMessage(deadMessageRequest); err != nil {
		return
	}
	return p.recvDeadMessage()
}

func (p *MessageServiceClient) sendDeadMessage(deadMessageRequest *DeadMessageRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deadMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeadMessageArgs{
		DeadMessageRequest: deadMessageRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvDeadMessage() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deadMessage failed: out of sequence response")
		return
	}
	result := DeadMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Dead message batch;
//
//
// Parameters:
//  - DeadMessageBatchRequest
func (p *MessageServiceClient) DeadMessageBatch(deadMessageBatchRequest *DeadMessageBatchRequest) (r *DeadMessageBatchResponse, err error) {
	if err = p.sendDeadMessageBatch(deadMessageBatchRequest); err != nil {
		return
	}
	return p.recvDeadMessageBatch()
}

func (p *MessageServiceClient) sendDeadMessageBatch(deadMessageBatchRequest *DeadMessageBatchRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deadMessageBatch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeadMessageBatchArgs{
		DeadMessageBatchRequest: deadMessageBatchRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvDeadMessageBatch() (value *DeadMessageBatchResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deadMessageBatch failed: out of sequence response")
		return
	}
	result := DeadMessageBatchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Peek message;
//
//
// Parameters:
//  - PeekMessageRequest
func (p *MessageServiceClient) PeekMessage(peekMessageRequest *PeekMessageRequest) (r []*PeekMessageResponse, err error) {
	if err = p.sendPeekMessage(peekMessageRequest); err != nil {
		return
	}
	return p.recvPeekMessage()
}

func (p *MessageServiceClient) sendPeekMessage(peekMessageRequest *PeekMessageRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("peekMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PeekMessageArgs{
		PeekMessageRequest: peekMessageRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvPeekMessage() (value []*PeekMessageResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "peekMessage failed: out of sequence response")
		return
	}
	result := PeekMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Delete peek message;
//
//
// Parameters:
//  - DeletePeekMessageRequest
func (p *MessageServiceClient) DeletePeekMessage(deletePeekMessageRequest *DeletePeekMessageRequest) (err error) {
	if err = p.sendDeletePeekMessage(deletePeekMessageRequest); err != nil {
		return
	}
	return p.recvDeletePeekMessage()
}

func (p *MessageServiceClient) sendDeletePeekMessage(deletePeekMessageRequest *DeletePeekMessageRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deletePeekMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeletePeekMessageArgs{
		DeletePeekMessageRequest: deletePeekMessageRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvDeletePeekMessage() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error49 error
		error49, err = error48.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error49
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deletePeekMessage failed: out of sequence response")
		return
	}
	result := DeletePeekMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Delete peek message batch;
//
//
// Parameters:
//  - DeletePeekMessageBatchRequest
func (p *MessageServiceClient) DeletePeekMessageBatch(deletePeekMessageBatchRequest *DeletePeekMessageBatchRequest) (r *DeletePeekMessageBatchResponse, err error) {
	if err = p.sendDeletePeekMessageBatch(deletePeekMessageBatchRequest); err != nil {
		return
	}
	return p.recvDeletePeekMessageBatch()
}

func (p *MessageServiceClient) sendDeletePeekMessageBatch(deletePeekMessageBatchRequest *DeletePeekMessageBatchRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deletePeekMessageBatch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeletePeekMessageBatchArgs{
		DeletePeekMessageBatchRequest: deletePeekMessageBatchRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvDeletePeekMessageBatch() (value *DeletePeekMessageBatchResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deletePeekMessageBatch failed: out of sequence response")
		return
	}
	result := DeletePeekMessageBatchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type MessageServiceProcessor struct {
	*common.EMQBaseServiceProcessor
}

func NewMessageServiceProcessor(handler MessageService) *MessageServiceProcessor {
	self52 := &MessageServiceProcessor{common.NewEMQBaseServiceProcessor(handler)}
	self52.AddToProcessorMap("sendMessage", &messageServiceProcessorSendMessage{handler: handler})
	self52.AddToProcessorMap("sendMessageBatch", &messageServiceProcessorSendMessageBatch{handler: handler})
	self52.AddToProcessorMap("receiveMessage", &messageServiceProcessorReceiveMessage{handler: handler})
	self52.AddToProcessorMap("changeMessageVisibilitySeconds", &messageServiceProcessorChangeMessageVisibilitySeconds{handler: handler})
	self52.AddToProcessorMap("changeMessageVisibilitySecondsBatch", &messageServiceProcessorChangeMessageVisibilitySecondsBatch{handler: handler})
	self52.AddToProcessorMap("deleteMessage", &messageServiceProcessorDeleteMessage{handler: handler})
	self52.AddToProcessorMap("deleteMessageBatch", &messageServiceProcessorDeleteMessageBatch{handler: handler})
	self52.AddToProcessorMap("deadMessage", &messageServiceProcessorDeadMessage{handler: handler})
	self52.AddToProcessorMap("deadMessageBatch", &messageServiceProcessorDeadMessageBatch{handler: handler})
	self52.AddToProcessorMap("peekMessage", &messageServiceProcessorPeekMessage{handler: handler})
	self52.AddToProcessorMap("deletePeekMessage", &messageServiceProcessorDeletePeekMessage{handler: handler})
	self52.AddToProcessorMap("deletePeekMessageBatch", &messageServiceProcessorDeletePeekMessageBatch{handler: handler})
	return self52
}

type messageServiceProcessorSendMessage struct {
	handler MessageService
}

func (p *messageServiceProcessorSendMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendMessageResult{}
	var retval *SendMessageResponse
	var err2 error
	if retval, err2 = p.handler.SendMessage(args.SendMessageRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessage: "+err2.Error())
			oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sendMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorSendMessageBatch struct {
	handler MessageService
}

func (p *messageServiceProcessorSendMessageBatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendMessageBatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendMessageBatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendMessageBatchResult{}
	var retval *SendMessageBatchResponse
	var err2 error
	if retval, err2 = p.handler.SendMessageBatch(args.SendMessageBatchRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessageBatch: "+err2.Error())
			oprot.WriteMessageBegin("sendMessageBatch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sendMessageBatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorReceiveMessage struct {
	handler MessageService
}

func (p *messageServiceProcessorReceiveMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReceiveMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("receiveMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReceiveMessageResult{}
	var retval []*ReceiveMessageResponse
	var err2 error
	if retval, err2 = p.handler.ReceiveMessage(args.ReceiveMessageRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing receiveMessage: "+err2.Error())
			oprot.WriteMessageBegin("receiveMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("receiveMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorChangeMessageVisibilitySeconds struct {
	handler MessageService
}

func (p *messageServiceProcessorChangeMessageVisibilitySeconds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChangeMessageVisibilitySecondsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("changeMessageVisibilitySeconds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChangeMessageVisibilitySecondsResult{}
	var err2 error
	if err2 = p.handler.ChangeMessageVisibilitySeconds(args.ChangeMessageVisibilityRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeMessageVisibilitySeconds: "+err2.Error())
			oprot.WriteMessageBegin("changeMessageVisibilitySeconds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("changeMessageVisibilitySeconds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorChangeMessageVisibilitySecondsBatch struct {
	handler MessageService
}

func (p *messageServiceProcessorChangeMessageVisibilitySecondsBatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChangeMessageVisibilitySecondsBatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("changeMessageVisibilitySecondsBatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChangeMessageVisibilitySecondsBatchResult{}
	var retval *ChangeMessageVisibilityBatchResponse
	var err2 error
	if retval, err2 = p.handler.ChangeMessageVisibilitySecondsBatch(args.ChangeMessageVisibilityBatchRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeMessageVisibilitySecondsBatch: "+err2.Error())
			oprot.WriteMessageBegin("changeMessageVisibilitySecondsBatch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("changeMessageVisibilitySecondsBatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorDeleteMessage struct {
	handler MessageService
}

func (p *messageServiceProcessorDeleteMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteMessageResult{}
	var err2 error
	if err2 = p.handler.DeleteMessage(args.DeleteMessageRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteMessage: "+err2.Error())
			oprot.WriteMessageBegin("deleteMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorDeleteMessageBatch struct {
	handler MessageService
}

func (p *messageServiceProcessorDeleteMessageBatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteMessageBatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteMessageBatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteMessageBatchResult{}
	var retval *DeleteMessageBatchResponse
	var err2 error
	if retval, err2 = p.handler.DeleteMessageBatch(args.DeleteMessageBatchRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteMessageBatch: "+err2.Error())
			oprot.WriteMessageBegin("deleteMessageBatch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("deleteMessageBatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorDeadMessage struct {
	handler MessageService
}

func (p *messageServiceProcessorDeadMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeadMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deadMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeadMessageResult{}
	var err2 error
	if err2 = p.handler.DeadMessage(args.DeadMessageRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deadMessage: "+err2.Error())
			oprot.WriteMessageBegin("deadMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deadMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorDeadMessageBatch struct {
	handler MessageService
}

func (p *messageServiceProcessorDeadMessageBatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeadMessageBatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deadMessageBatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeadMessageBatchResult{}
	var retval *DeadMessageBatchResponse
	var err2 error
	if retval, err2 = p.handler.DeadMessageBatch(args.DeadMessageBatchRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deadMessageBatch: "+err2.Error())
			oprot.WriteMessageBegin("deadMessageBatch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("deadMessageBatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorPeekMessage struct {
	handler MessageService
}

func (p *messageServiceProcessorPeekMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PeekMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("peekMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PeekMessageResult{}
	var retval []*PeekMessageResponse
	var err2 error
	if retval, err2 = p.handler.PeekMessage(args.PeekMessageRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing peekMessage: "+err2.Error())
			oprot.WriteMessageBegin("peekMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("peekMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorDeletePeekMessage struct {
	handler MessageService
}

func (p *messageServiceProcessorDeletePeekMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeletePeekMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deletePeekMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeletePeekMessageResult{}
	var err2 error
	if err2 = p.handler.DeletePeekMessage(args.DeletePeekMessageRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deletePeekMessage: "+err2.Error())
			oprot.WriteMessageBegin("deletePeekMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deletePeekMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorDeletePeekMessageBatch struct {
	handler MessageService
}

func (p *messageServiceProcessorDeletePeekMessageBatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeletePeekMessageBatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deletePeekMessageBatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeletePeekMessageBatchResult{}
	var retval *DeletePeekMessageBatchResponse
	var err2 error
	if retval, err2 = p.handler.DeletePeekMessageBatch(args.DeletePeekMessageBatchRequest); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deletePeekMessageBatch: "+err2.Error())
			oprot.WriteMessageBegin("deletePeekMessageBatch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("deletePeekMessageBatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type SendMessageArgs struct {
	SendMessageRequest *SendMessageRequest `thrift:"sendMessageRequest,1" json:"sendMessageRequest"`
}

func NewSendMessageArgs() *SendMessageArgs {
	return &SendMessageArgs{}
}

var SendMessageArgs_SendMessageRequest_DEFAULT *SendMessageRequest

func (p *SendMessageArgs) GetSendMessageRequest() *SendMessageRequest {
	if !p.IsSetSendMessageRequest() {
		return SendMessageArgs_SendMessageRequest_DEFAULT
	}
	return p.SendMessageRequest
}
func (p *SendMessageArgs) IsSetSendMessageRequest() bool {
	return p.SendMessageRequest != nil
}

func (p *SendMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.SendMessageRequest = &SendMessageRequest{}
	if err := p.SendMessageRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SendMessageRequest, err)
	}
	return nil
}

func (p *SendMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sendMessageRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sendMessageRequest: %s", p, err)
	}
	if err := p.SendMessageRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.SendMessageRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sendMessageRequest: %s", p, err)
	}
	return err
}

func (p *SendMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageArgs(%+v)", *p)
}

type SendMessageResult struct {
	Success *SendMessageResponse              `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewSendMessageResult() *SendMessageResult {
	return &SendMessageResult{}
}

var SendMessageResult_Success_DEFAULT *SendMessageResponse

func (p *SendMessageResult) GetSuccess() *SendMessageResponse {
	if !p.IsSetSuccess() {
		return SendMessageResult_Success_DEFAULT
	}
	return p.Success
}

var SendMessageResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *SendMessageResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return SendMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *SendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SendMessageResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *SendMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageResult(%+v)", *p)
}

type SendMessageBatchArgs struct {
	SendMessageBatchRequest *SendMessageBatchRequest `thrift:"sendMessageBatchRequest,1" json:"sendMessageBatchRequest"`
}

func NewSendMessageBatchArgs() *SendMessageBatchArgs {
	return &SendMessageBatchArgs{}
}

var SendMessageBatchArgs_SendMessageBatchRequest_DEFAULT *SendMessageBatchRequest

func (p *SendMessageBatchArgs) GetSendMessageBatchRequest() *SendMessageBatchRequest {
	if !p.IsSetSendMessageBatchRequest() {
		return SendMessageBatchArgs_SendMessageBatchRequest_DEFAULT
	}
	return p.SendMessageBatchRequest
}
func (p *SendMessageBatchArgs) IsSetSendMessageBatchRequest() bool {
	return p.SendMessageBatchRequest != nil
}

func (p *SendMessageBatchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageBatchArgs) ReadField1(iprot thrift.TProtocol) error {
	p.SendMessageBatchRequest = &SendMessageBatchRequest{}
	if err := p.SendMessageBatchRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SendMessageBatchRequest, err)
	}
	return nil
}

func (p *SendMessageBatchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageBatch_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageBatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sendMessageBatchRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sendMessageBatchRequest: %s", p, err)
	}
	if err := p.SendMessageBatchRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.SendMessageBatchRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sendMessageBatchRequest: %s", p, err)
	}
	return err
}

func (p *SendMessageBatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageBatchArgs(%+v)", *p)
}

type SendMessageBatchResult struct {
	Success *SendMessageBatchResponse         `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewSendMessageBatchResult() *SendMessageBatchResult {
	return &SendMessageBatchResult{}
}

var SendMessageBatchResult_Success_DEFAULT *SendMessageBatchResponse

func (p *SendMessageBatchResult) GetSuccess() *SendMessageBatchResponse {
	if !p.IsSetSuccess() {
		return SendMessageBatchResult_Success_DEFAULT
	}
	return p.Success
}

var SendMessageBatchResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *SendMessageBatchResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return SendMessageBatchResult_E_DEFAULT
	}
	return p.E
}
func (p *SendMessageBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendMessageBatchResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendMessageBatchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageBatchResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SendMessageBatchResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *SendMessageBatchResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendMessageBatchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageBatch_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageBatchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageBatchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageBatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageBatchResult(%+v)", *p)
}

type ReceiveMessageArgs struct {
	ReceiveMessageRequest *ReceiveMessageRequest `thrift:"receiveMessageRequest,1" json:"receiveMessageRequest"`
}

func NewReceiveMessageArgs() *ReceiveMessageArgs {
	return &ReceiveMessageArgs{}
}

var ReceiveMessageArgs_ReceiveMessageRequest_DEFAULT *ReceiveMessageRequest

func (p *ReceiveMessageArgs) GetReceiveMessageRequest() *ReceiveMessageRequest {
	if !p.IsSetReceiveMessageRequest() {
		return ReceiveMessageArgs_ReceiveMessageRequest_DEFAULT
	}
	return p.ReceiveMessageRequest
}
func (p *ReceiveMessageArgs) IsSetReceiveMessageRequest() bool {
	return p.ReceiveMessageRequest != nil
}

func (p *ReceiveMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReceiveMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.ReceiveMessageRequest = &ReceiveMessageRequest{
		MaxReceiveMessageNumber: 100,
	}
	if err := p.ReceiveMessageRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ReceiveMessageRequest, err)
	}
	return nil
}

func (p *ReceiveMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("receiveMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReceiveMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiveMessageRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:receiveMessageRequest: %s", p, err)
	}
	if err := p.ReceiveMessageRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ReceiveMessageRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:receiveMessageRequest: %s", p, err)
	}
	return err
}

func (p *ReceiveMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReceiveMessageArgs(%+v)", *p)
}

type ReceiveMessageResult struct {
	Success []*ReceiveMessageResponse         `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewReceiveMessageResult() *ReceiveMessageResult {
	return &ReceiveMessageResult{}
}

var ReceiveMessageResult_Success_DEFAULT []*ReceiveMessageResponse

func (p *ReceiveMessageResult) GetSuccess() []*ReceiveMessageResponse {
	return p.Success
}

var ReceiveMessageResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *ReceiveMessageResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return ReceiveMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *ReceiveMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReceiveMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReceiveMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReceiveMessageResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ReceiveMessageResponse, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem53 := &ReceiveMessageResponse{}
		if err := _elem53.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem53, err)
		}
		p.Success = append(p.Success, _elem53)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ReceiveMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReceiveMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("receiveMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReceiveMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ReceiveMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReceiveMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReceiveMessageResult(%+v)", *p)
}

type ChangeMessageVisibilitySecondsArgs struct {
	ChangeMessageVisibilityRequest *ChangeMessageVisibilityRequest `thrift:"changeMessageVisibilityRequest,1" json:"changeMessageVisibilityRequest"`
}

func NewChangeMessageVisibilitySecondsArgs() *ChangeMessageVisibilitySecondsArgs {
	return &ChangeMessageVisibilitySecondsArgs{}
}

var ChangeMessageVisibilitySecondsArgs_ChangeMessageVisibilityRequest_DEFAULT *ChangeMessageVisibilityRequest

func (p *ChangeMessageVisibilitySecondsArgs) GetChangeMessageVisibilityRequest() *ChangeMessageVisibilityRequest {
	if !p.IsSetChangeMessageVisibilityRequest() {
		return ChangeMessageVisibilitySecondsArgs_ChangeMessageVisibilityRequest_DEFAULT
	}
	return p.ChangeMessageVisibilityRequest
}
func (p *ChangeMessageVisibilitySecondsArgs) IsSetChangeMessageVisibilityRequest() bool {
	return p.ChangeMessageVisibilityRequest != nil
}

func (p *ChangeMessageVisibilitySecondsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.ChangeMessageVisibilityRequest = &ChangeMessageVisibilityRequest{}
	if err := p.ChangeMessageVisibilityRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ChangeMessageVisibilityRequest, err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeMessageVisibilitySeconds_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("changeMessageVisibilityRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:changeMessageVisibilityRequest: %s", p, err)
	}
	if err := p.ChangeMessageVisibilityRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ChangeMessageVisibilityRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:changeMessageVisibilityRequest: %s", p, err)
	}
	return err
}

func (p *ChangeMessageVisibilitySecondsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeMessageVisibilitySecondsArgs(%+v)", *p)
}

type ChangeMessageVisibilitySecondsResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewChangeMessageVisibilitySecondsResult() *ChangeMessageVisibilitySecondsResult {
	return &ChangeMessageVisibilitySecondsResult{}
}

var ChangeMessageVisibilitySecondsResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *ChangeMessageVisibilitySecondsResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return ChangeMessageVisibilitySecondsResult_E_DEFAULT
	}
	return p.E
}
func (p *ChangeMessageVisibilitySecondsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChangeMessageVisibilitySecondsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeMessageVisibilitySeconds_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ChangeMessageVisibilitySecondsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeMessageVisibilitySecondsResult(%+v)", *p)
}

type ChangeMessageVisibilitySecondsBatchArgs struct {
	ChangeMessageVisibilityBatchRequest *ChangeMessageVisibilityBatchRequest `thrift:"changeMessageVisibilityBatchRequest,1" json:"changeMessageVisibilityBatchRequest"`
}

func NewChangeMessageVisibilitySecondsBatchArgs() *ChangeMessageVisibilitySecondsBatchArgs {
	return &ChangeMessageVisibilitySecondsBatchArgs{}
}

var ChangeMessageVisibilitySecondsBatchArgs_ChangeMessageVisibilityBatchRequest_DEFAULT *ChangeMessageVisibilityBatchRequest

func (p *ChangeMessageVisibilitySecondsBatchArgs) GetChangeMessageVisibilityBatchRequest() *ChangeMessageVisibilityBatchRequest {
	if !p.IsSetChangeMessageVisibilityBatchRequest() {
		return ChangeMessageVisibilitySecondsBatchArgs_ChangeMessageVisibilityBatchRequest_DEFAULT
	}
	return p.ChangeMessageVisibilityBatchRequest
}
func (p *ChangeMessageVisibilitySecondsBatchArgs) IsSetChangeMessageVisibilityBatchRequest() bool {
	return p.ChangeMessageVisibilityBatchRequest != nil
}

func (p *ChangeMessageVisibilitySecondsBatchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsBatchArgs) ReadField1(iprot thrift.TProtocol) error {
	p.ChangeMessageVisibilityBatchRequest = &ChangeMessageVisibilityBatchRequest{}
	if err := p.ChangeMessageVisibilityBatchRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ChangeMessageVisibilityBatchRequest, err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsBatchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeMessageVisibilitySecondsBatch_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsBatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("changeMessageVisibilityBatchRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:changeMessageVisibilityBatchRequest: %s", p, err)
	}
	if err := p.ChangeMessageVisibilityBatchRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ChangeMessageVisibilityBatchRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:changeMessageVisibilityBatchRequest: %s", p, err)
	}
	return err
}

func (p *ChangeMessageVisibilitySecondsBatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeMessageVisibilitySecondsBatchArgs(%+v)", *p)
}

type ChangeMessageVisibilitySecondsBatchResult struct {
	Success *ChangeMessageVisibilityBatchResponse `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException     `thrift:"e,1" json:"e"`
}

func NewChangeMessageVisibilitySecondsBatchResult() *ChangeMessageVisibilitySecondsBatchResult {
	return &ChangeMessageVisibilitySecondsBatchResult{}
}

var ChangeMessageVisibilitySecondsBatchResult_Success_DEFAULT *ChangeMessageVisibilityBatchResponse

func (p *ChangeMessageVisibilitySecondsBatchResult) GetSuccess() *ChangeMessageVisibilityBatchResponse {
	if !p.IsSetSuccess() {
		return ChangeMessageVisibilitySecondsBatchResult_Success_DEFAULT
	}
	return p.Success
}

var ChangeMessageVisibilitySecondsBatchResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *ChangeMessageVisibilitySecondsBatchResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return ChangeMessageVisibilitySecondsBatchResult_E_DEFAULT
	}
	return p.E
}
func (p *ChangeMessageVisibilitySecondsBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChangeMessageVisibilitySecondsBatchResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChangeMessageVisibilitySecondsBatchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsBatchResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ChangeMessageVisibilityBatchResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsBatchResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsBatchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeMessageVisibilitySecondsBatch_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeMessageVisibilitySecondsBatchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ChangeMessageVisibilitySecondsBatchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ChangeMessageVisibilitySecondsBatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeMessageVisibilitySecondsBatchResult(%+v)", *p)
}

type DeleteMessageArgs struct {
	DeleteMessageRequest *DeleteMessageRequest `thrift:"deleteMessageRequest,1" json:"deleteMessageRequest"`
}

func NewDeleteMessageArgs() *DeleteMessageArgs {
	return &DeleteMessageArgs{}
}

var DeleteMessageArgs_DeleteMessageRequest_DEFAULT *DeleteMessageRequest

func (p *DeleteMessageArgs) GetDeleteMessageRequest() *DeleteMessageRequest {
	if !p.IsSetDeleteMessageRequest() {
		return DeleteMessageArgs_DeleteMessageRequest_DEFAULT
	}
	return p.DeleteMessageRequest
}
func (p *DeleteMessageArgs) IsSetDeleteMessageRequest() bool {
	return p.DeleteMessageRequest != nil
}

func (p *DeleteMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.DeleteMessageRequest = &DeleteMessageRequest{}
	if err := p.DeleteMessageRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeleteMessageRequest, err)
	}
	return nil
}

func (p *DeleteMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteMessageRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:deleteMessageRequest: %s", p, err)
	}
	if err := p.DeleteMessageRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeleteMessageRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:deleteMessageRequest: %s", p, err)
	}
	return err
}

func (p *DeleteMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteMessageArgs(%+v)", *p)
}

type DeleteMessageResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewDeleteMessageResult() *DeleteMessageResult {
	return &DeleteMessageResult{}
}

var DeleteMessageResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *DeleteMessageResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return DeleteMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteMessageResult(%+v)", *p)
}

type DeleteMessageBatchArgs struct {
	DeleteMessageBatchRequest *DeleteMessageBatchRequest `thrift:"deleteMessageBatchRequest,1" json:"deleteMessageBatchRequest"`
}

func NewDeleteMessageBatchArgs() *DeleteMessageBatchArgs {
	return &DeleteMessageBatchArgs{}
}

var DeleteMessageBatchArgs_DeleteMessageBatchRequest_DEFAULT *DeleteMessageBatchRequest

func (p *DeleteMessageBatchArgs) GetDeleteMessageBatchRequest() *DeleteMessageBatchRequest {
	if !p.IsSetDeleteMessageBatchRequest() {
		return DeleteMessageBatchArgs_DeleteMessageBatchRequest_DEFAULT
	}
	return p.DeleteMessageBatchRequest
}
func (p *DeleteMessageBatchArgs) IsSetDeleteMessageBatchRequest() bool {
	return p.DeleteMessageBatchRequest != nil
}

func (p *DeleteMessageBatchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteMessageBatchArgs) ReadField1(iprot thrift.TProtocol) error {
	p.DeleteMessageBatchRequest = &DeleteMessageBatchRequest{}
	if err := p.DeleteMessageBatchRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeleteMessageBatchRequest, err)
	}
	return nil
}

func (p *DeleteMessageBatchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteMessageBatch_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteMessageBatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteMessageBatchRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:deleteMessageBatchRequest: %s", p, err)
	}
	if err := p.DeleteMessageBatchRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeleteMessageBatchRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:deleteMessageBatchRequest: %s", p, err)
	}
	return err
}

func (p *DeleteMessageBatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteMessageBatchArgs(%+v)", *p)
}

type DeleteMessageBatchResult struct {
	Success *DeleteMessageBatchResponse       `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewDeleteMessageBatchResult() *DeleteMessageBatchResult {
	return &DeleteMessageBatchResult{}
}

var DeleteMessageBatchResult_Success_DEFAULT *DeleteMessageBatchResponse

func (p *DeleteMessageBatchResult) GetSuccess() *DeleteMessageBatchResponse {
	if !p.IsSetSuccess() {
		return DeleteMessageBatchResult_Success_DEFAULT
	}
	return p.Success
}

var DeleteMessageBatchResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *DeleteMessageBatchResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return DeleteMessageBatchResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteMessageBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteMessageBatchResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteMessageBatchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteMessageBatchResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DeleteMessageBatchResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *DeleteMessageBatchResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteMessageBatchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteMessageBatch_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteMessageBatchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DeleteMessageBatchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteMessageBatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteMessageBatchResult(%+v)", *p)
}

type DeadMessageArgs struct {
	DeadMessageRequest *DeadMessageRequest `thrift:"deadMessageRequest,1" json:"deadMessageRequest"`
}

func NewDeadMessageArgs() *DeadMessageArgs {
	return &DeadMessageArgs{}
}

var DeadMessageArgs_DeadMessageRequest_DEFAULT *DeadMessageRequest

func (p *DeadMessageArgs) GetDeadMessageRequest() *DeadMessageRequest {
	if !p.IsSetDeadMessageRequest() {
		return DeadMessageArgs_DeadMessageRequest_DEFAULT
	}
	return p.DeadMessageRequest
}
func (p *DeadMessageArgs) IsSetDeadMessageRequest() bool {
	return p.DeadMessageRequest != nil
}

func (p *DeadMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeadMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.DeadMessageRequest = &DeadMessageRequest{}
	if err := p.DeadMessageRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeadMessageRequest, err)
	}
	return nil
}

func (p *DeadMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deadMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeadMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deadMessageRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:deadMessageRequest: %s", p, err)
	}
	if err := p.DeadMessageRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeadMessageRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:deadMessageRequest: %s", p, err)
	}
	return err
}

func (p *DeadMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeadMessageArgs(%+v)", *p)
}

type DeadMessageResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewDeadMessageResult() *DeadMessageResult {
	return &DeadMessageResult{}
}

var DeadMessageResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *DeadMessageResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return DeadMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *DeadMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeadMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeadMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeadMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deadMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeadMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeadMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeadMessageResult(%+v)", *p)
}

type DeadMessageBatchArgs struct {
	DeadMessageBatchRequest *DeadMessageBatchRequest `thrift:"deadMessageBatchRequest,1" json:"deadMessageBatchRequest"`
}

func NewDeadMessageBatchArgs() *DeadMessageBatchArgs {
	return &DeadMessageBatchArgs{}
}

var DeadMessageBatchArgs_DeadMessageBatchRequest_DEFAULT *DeadMessageBatchRequest

func (p *DeadMessageBatchArgs) GetDeadMessageBatchRequest() *DeadMessageBatchRequest {
	if !p.IsSetDeadMessageBatchRequest() {
		return DeadMessageBatchArgs_DeadMessageBatchRequest_DEFAULT
	}
	return p.DeadMessageBatchRequest
}
func (p *DeadMessageBatchArgs) IsSetDeadMessageBatchRequest() bool {
	return p.DeadMessageBatchRequest != nil
}

func (p *DeadMessageBatchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeadMessageBatchArgs) ReadField1(iprot thrift.TProtocol) error {
	p.DeadMessageBatchRequest = &DeadMessageBatchRequest{}
	if err := p.DeadMessageBatchRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeadMessageBatchRequest, err)
	}
	return nil
}

func (p *DeadMessageBatchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deadMessageBatch_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeadMessageBatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deadMessageBatchRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:deadMessageBatchRequest: %s", p, err)
	}
	if err := p.DeadMessageBatchRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeadMessageBatchRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:deadMessageBatchRequest: %s", p, err)
	}
	return err
}

func (p *DeadMessageBatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeadMessageBatchArgs(%+v)", *p)
}

type DeadMessageBatchResult struct {
	Success *DeadMessageBatchResponse         `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewDeadMessageBatchResult() *DeadMessageBatchResult {
	return &DeadMessageBatchResult{}
}

var DeadMessageBatchResult_Success_DEFAULT *DeadMessageBatchResponse

func (p *DeadMessageBatchResult) GetSuccess() *DeadMessageBatchResponse {
	if !p.IsSetSuccess() {
		return DeadMessageBatchResult_Success_DEFAULT
	}
	return p.Success
}

var DeadMessageBatchResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *DeadMessageBatchResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return DeadMessageBatchResult_E_DEFAULT
	}
	return p.E
}
func (p *DeadMessageBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeadMessageBatchResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeadMessageBatchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeadMessageBatchResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DeadMessageBatchResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *DeadMessageBatchResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeadMessageBatchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deadMessageBatch_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeadMessageBatchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DeadMessageBatchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeadMessageBatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeadMessageBatchResult(%+v)", *p)
}

type PeekMessageArgs struct {
	PeekMessageRequest *PeekMessageRequest `thrift:"peekMessageRequest,1" json:"peekMessageRequest"`
}

func NewPeekMessageArgs() *PeekMessageArgs {
	return &PeekMessageArgs{}
}

var PeekMessageArgs_PeekMessageRequest_DEFAULT *PeekMessageRequest

func (p *PeekMessageArgs) GetPeekMessageRequest() *PeekMessageRequest {
	if !p.IsSetPeekMessageRequest() {
		return PeekMessageArgs_PeekMessageRequest_DEFAULT
	}
	return p.PeekMessageRequest
}
func (p *PeekMessageArgs) IsSetPeekMessageRequest() bool {
	return p.PeekMessageRequest != nil
}

func (p *PeekMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PeekMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.PeekMessageRequest = &PeekMessageRequest{}
	if err := p.PeekMessageRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PeekMessageRequest, err)
	}
	return nil
}

func (p *PeekMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("peekMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PeekMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("peekMessageRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:peekMessageRequest: %s", p, err)
	}
	if err := p.PeekMessageRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.PeekMessageRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:peekMessageRequest: %s", p, err)
	}
	return err
}

func (p *PeekMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PeekMessageArgs(%+v)", *p)
}

type PeekMessageResult struct {
	Success []*PeekMessageResponse            `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewPeekMessageResult() *PeekMessageResult {
	return &PeekMessageResult{}
}

var PeekMessageResult_Success_DEFAULT []*PeekMessageResponse

func (p *PeekMessageResult) GetSuccess() []*PeekMessageResponse {
	return p.Success
}

var PeekMessageResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *PeekMessageResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return PeekMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *PeekMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PeekMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *PeekMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PeekMessageResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*PeekMessageResponse, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem54 := &PeekMessageResponse{}
		if err := _elem54.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem54, err)
		}
		p.Success = append(p.Success, _elem54)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PeekMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *PeekMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("peekMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PeekMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *PeekMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *PeekMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PeekMessageResult(%+v)", *p)
}

type DeletePeekMessageArgs struct {
	DeletePeekMessageRequest *DeletePeekMessageRequest `thrift:"deletePeekMessageRequest,1" json:"deletePeekMessageRequest"`
}

func NewDeletePeekMessageArgs() *DeletePeekMessageArgs {
	return &DeletePeekMessageArgs{}
}

var DeletePeekMessageArgs_DeletePeekMessageRequest_DEFAULT *DeletePeekMessageRequest

func (p *DeletePeekMessageArgs) GetDeletePeekMessageRequest() *DeletePeekMessageRequest {
	if !p.IsSetDeletePeekMessageRequest() {
		return DeletePeekMessageArgs_DeletePeekMessageRequest_DEFAULT
	}
	return p.DeletePeekMessageRequest
}
func (p *DeletePeekMessageArgs) IsSetDeletePeekMessageRequest() bool {
	return p.DeletePeekMessageRequest != nil
}

func (p *DeletePeekMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeletePeekMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.DeletePeekMessageRequest = &DeletePeekMessageRequest{}
	if err := p.DeletePeekMessageRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeletePeekMessageRequest, err)
	}
	return nil
}

func (p *DeletePeekMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deletePeekMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeletePeekMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deletePeekMessageRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:deletePeekMessageRequest: %s", p, err)
	}
	if err := p.DeletePeekMessageRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeletePeekMessageRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:deletePeekMessageRequest: %s", p, err)
	}
	return err
}

func (p *DeletePeekMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePeekMessageArgs(%+v)", *p)
}

type DeletePeekMessageResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewDeletePeekMessageResult() *DeletePeekMessageResult {
	return &DeletePeekMessageResult{}
}

var DeletePeekMessageResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *DeletePeekMessageResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return DeletePeekMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *DeletePeekMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeletePeekMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeletePeekMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeletePeekMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deletePeekMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeletePeekMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeletePeekMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePeekMessageResult(%+v)", *p)
}

type DeletePeekMessageBatchArgs struct {
	DeletePeekMessageBatchRequest *DeletePeekMessageBatchRequest `thrift:"deletePeekMessageBatchRequest,1" json:"deletePeekMessageBatchRequest"`
}

func NewDeletePeekMessageBatchArgs() *DeletePeekMessageBatchArgs {
	return &DeletePeekMessageBatchArgs{}
}

var DeletePeekMessageBatchArgs_DeletePeekMessageBatchRequest_DEFAULT *DeletePeekMessageBatchRequest

func (p *DeletePeekMessageBatchArgs) GetDeletePeekMessageBatchRequest() *DeletePeekMessageBatchRequest {
	if !p.IsSetDeletePeekMessageBatchRequest() {
		return DeletePeekMessageBatchArgs_DeletePeekMessageBatchRequest_DEFAULT
	}
	return p.DeletePeekMessageBatchRequest
}
func (p *DeletePeekMessageBatchArgs) IsSetDeletePeekMessageBatchRequest() bool {
	return p.DeletePeekMessageBatchRequest != nil
}

func (p *DeletePeekMessageBatchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeletePeekMessageBatchArgs) ReadField1(iprot thrift.TProtocol) error {
	p.DeletePeekMessageBatchRequest = &DeletePeekMessageBatchRequest{}
	if err := p.DeletePeekMessageBatchRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeletePeekMessageBatchRequest, err)
	}
	return nil
}

func (p *DeletePeekMessageBatchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deletePeekMessageBatch_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeletePeekMessageBatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deletePeekMessageBatchRequest", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:deletePeekMessageBatchRequest: %s", p, err)
	}
	if err := p.DeletePeekMessageBatchRequest.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeletePeekMessageBatchRequest, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:deletePeekMessageBatchRequest: %s", p, err)
	}
	return err
}

func (p *DeletePeekMessageBatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePeekMessageBatchArgs(%+v)", *p)
}

type DeletePeekMessageBatchResult struct {
	Success *DeletePeekMessageBatchResponse   `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewDeletePeekMessageBatchResult() *DeletePeekMessageBatchResult {
	return &DeletePeekMessageBatchResult{}
}

var DeletePeekMessageBatchResult_Success_DEFAULT *DeletePeekMessageBatchResponse

func (p *DeletePeekMessageBatchResult) GetSuccess() *DeletePeekMessageBatchResponse {
	if !p.IsSetSuccess() {
		return DeletePeekMessageBatchResult_Success_DEFAULT
	}
	return p.Success
}

var DeletePeekMessageBatchResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *DeletePeekMessageBatchResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return DeletePeekMessageBatchResult_E_DEFAULT
	}
	return p.E
}
func (p *DeletePeekMessageBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeletePeekMessageBatchResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeletePeekMessageBatchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeletePeekMessageBatchResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DeletePeekMessageBatchResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *DeletePeekMessageBatchResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeletePeekMessageBatchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deletePeekMessageBatch_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeletePeekMessageBatchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DeletePeekMessageBatchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeletePeekMessageBatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePeekMessageBatchResult(%+v)", *p)
}
