// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package message

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/emq/common"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var GoUnusedProtection__ int

type MessageAttribute struct {
	TypeA1      string  `thrift:"type,1,required" json:"type"`
	StringValue *string `thrift:"stringValue,2" json:"stringValue"`
	BinaryValue []byte  `thrift:"binaryValue,3" json:"binaryValue"`
}

func NewMessageAttribute() *MessageAttribute {
	return &MessageAttribute{}
}

func (p *MessageAttribute) GetTypeA1() string {
	return p.TypeA1
}

var MessageAttribute_StringValue_DEFAULT string

func (p *MessageAttribute) GetStringValue() string {
	if !p.IsSetStringValue() {
		return MessageAttribute_StringValue_DEFAULT
	}
	return *p.StringValue
}

var MessageAttribute_BinaryValue_DEFAULT []byte

func (p *MessageAttribute) GetBinaryValue() []byte {
	return p.BinaryValue
}
func (p *MessageAttribute) IsSetStringValue() bool {
	return p.StringValue != nil
}

func (p *MessageAttribute) IsSetBinaryValue() bool {
	return p.BinaryValue != nil
}

func (p *MessageAttribute) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MessageAttribute) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *MessageAttribute) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StringValue = &v
	}
	return nil
}

func (p *MessageAttribute) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.BinaryValue = v
	}
	return nil
}

func (p *MessageAttribute) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageAttribute"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MessageAttribute) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *MessageAttribute) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue() {
		if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:stringValue: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.StringValue)); err != nil {
			return fmt.Errorf("%T.stringValue (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:stringValue: %s", p, err)
		}
	}
	return err
}

func (p *MessageAttribute) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinaryValue() {
		if err := oprot.WriteFieldBegin("binaryValue", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:binaryValue: %s", p, err)
		}
		if err := oprot.WriteBinary(p.BinaryValue); err != nil {
			return fmt.Errorf("%T.binaryValue (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:binaryValue: %s", p, err)
		}
	}
	return err
}

func (p *MessageAttribute) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageAttribute(%+v)", *p)
}

type SendMessageRequest struct {
	QueueName           string                       `thrift:"queueName,1,required" json:"queueName"`
	MessageBody         string                       `thrift:"messageBody,2,required" json:"messageBody"`
	DelaySeconds        *int32                       `thrift:"delaySeconds,3" json:"delaySeconds"`
	InvisibilitySeconds *int32                       `thrift:"invisibilitySeconds,4" json:"invisibilitySeconds"`
	MessageAttributes   map[string]*MessageAttribute `thrift:"messageAttributes,5" json:"messageAttributes"`
	Topic               *string                      `thrift:"topic,6" json:"topic"`
	Priority            *int32                       `thrift:"priority,7" json:"priority"`
}

func NewSendMessageRequest() *SendMessageRequest {
	return &SendMessageRequest{}
}

func (p *SendMessageRequest) GetQueueName() string {
	return p.QueueName
}

func (p *SendMessageRequest) GetMessageBody() string {
	return p.MessageBody
}

var SendMessageRequest_DelaySeconds_DEFAULT int32

func (p *SendMessageRequest) GetDelaySeconds() int32 {
	if !p.IsSetDelaySeconds() {
		return SendMessageRequest_DelaySeconds_DEFAULT
	}
	return *p.DelaySeconds
}

var SendMessageRequest_InvisibilitySeconds_DEFAULT int32

func (p *SendMessageRequest) GetInvisibilitySeconds() int32 {
	if !p.IsSetInvisibilitySeconds() {
		return SendMessageRequest_InvisibilitySeconds_DEFAULT
	}
	return *p.InvisibilitySeconds
}

var SendMessageRequest_MessageAttributes_DEFAULT map[string]*MessageAttribute

func (p *SendMessageRequest) GetMessageAttributes() map[string]*MessageAttribute {
	return p.MessageAttributes
}

var SendMessageRequest_Topic_DEFAULT string

func (p *SendMessageRequest) GetTopic() string {
	if !p.IsSetTopic() {
		return SendMessageRequest_Topic_DEFAULT
	}
	return *p.Topic
}

var SendMessageRequest_Priority_DEFAULT int32

func (p *SendMessageRequest) GetPriority() int32 {
	if !p.IsSetPriority() {
		return SendMessageRequest_Priority_DEFAULT
	}
	return *p.Priority
}
func (p *SendMessageRequest) IsSetDelaySeconds() bool {
	return p.DelaySeconds != nil
}

func (p *SendMessageRequest) IsSetInvisibilitySeconds() bool {
	return p.InvisibilitySeconds != nil
}

func (p *SendMessageRequest) IsSetMessageAttributes() bool {
	return p.MessageAttributes != nil
}

func (p *SendMessageRequest) IsSetTopic() bool {
	return p.Topic != nil
}

func (p *SendMessageRequest) IsSetPriority() bool {
	return p.Priority != nil
}

func (p *SendMessageRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *SendMessageRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageBody = v
	}
	return nil
}

func (p *SendMessageRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DelaySeconds = &v
	}
	return nil
}

func (p *SendMessageRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.InvisibilitySeconds = &v
	}
	return nil
}

func (p *SendMessageRequest) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*MessageAttribute, size)
	p.MessageAttributes = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		_val1 := &MessageAttribute{}
		if err := _val1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val1, err)
		}
		p.MessageAttributes[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *SendMessageRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Topic = &v
	}
	return nil
}

func (p *SendMessageRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Priority = &v
	}
	return nil
}

func (p *SendMessageRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendMessageRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *SendMessageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBody", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageBody: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageBody)); err != nil {
		return fmt.Errorf("%T.messageBody (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageBody: %s", p, err)
	}
	return err
}

func (p *SendMessageRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDelaySeconds() {
		if err := oprot.WriteFieldBegin("delaySeconds", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:delaySeconds: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.DelaySeconds)); err != nil {
			return fmt.Errorf("%T.delaySeconds (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:delaySeconds: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvisibilitySeconds() {
		if err := oprot.WriteFieldBegin("invisibilitySeconds", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:invisibilitySeconds: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.InvisibilitySeconds)); err != nil {
			return fmt.Errorf("%T.invisibilitySeconds (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:invisibilitySeconds: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageAttributes() {
		if err := oprot.WriteFieldBegin("messageAttributes", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:messageAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.MessageAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MessageAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:messageAttributes: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopic() {
		if err := oprot.WriteFieldBegin("topic", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:topic: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Topic)); err != nil {
			return fmt.Errorf("%T.topic (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:topic: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPriority() {
		if err := oprot.WriteFieldBegin("priority", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:priority: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Priority)); err != nil {
			return fmt.Errorf("%T.priority (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:priority: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageRequest(%+v)", *p)
}

type SendMessageResponse struct {
	MessageID     string  `thrift:"messageID,1,required" json:"messageID"`
	BodyLength    *int32  `thrift:"bodyLength,2" json:"bodyLength"`
	BodyMd5       *string `thrift:"bodyMd5,3" json:"bodyMd5"`
	SendTimestamp *int64  `thrift:"sendTimestamp,4" json:"sendTimestamp"`
}

func NewSendMessageResponse() *SendMessageResponse {
	return &SendMessageResponse{}
}

func (p *SendMessageResponse) GetMessageID() string {
	return p.MessageID
}

var SendMessageResponse_BodyLength_DEFAULT int32

func (p *SendMessageResponse) GetBodyLength() int32 {
	if !p.IsSetBodyLength() {
		return SendMessageResponse_BodyLength_DEFAULT
	}
	return *p.BodyLength
}

var SendMessageResponse_BodyMd5_DEFAULT string

func (p *SendMessageResponse) GetBodyMd5() string {
	if !p.IsSetBodyMd5() {
		return SendMessageResponse_BodyMd5_DEFAULT
	}
	return *p.BodyMd5
}

var SendMessageResponse_SendTimestamp_DEFAULT int64

func (p *SendMessageResponse) GetSendTimestamp() int64 {
	if !p.IsSetSendTimestamp() {
		return SendMessageResponse_SendTimestamp_DEFAULT
	}
	return *p.SendTimestamp
}
func (p *SendMessageResponse) IsSetBodyLength() bool {
	return p.BodyLength != nil
}

func (p *SendMessageResponse) IsSetBodyMd5() bool {
	return p.BodyMd5 != nil
}

func (p *SendMessageResponse) IsSetSendTimestamp() bool {
	return p.SendTimestamp != nil
}

func (p *SendMessageResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MessageID = v
	}
	return nil
}

func (p *SendMessageResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.BodyLength = &v
	}
	return nil
}

func (p *SendMessageResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.BodyMd5 = &v
	}
	return nil
}

func (p *SendMessageResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.SendTimestamp = &v
	}
	return nil
}

func (p *SendMessageResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendMessageResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:messageID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageID)); err != nil {
		return fmt.Errorf("%T.messageID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:messageID: %s", p, err)
	}
	return err
}

func (p *SendMessageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBodyLength() {
		if err := oprot.WriteFieldBegin("bodyLength", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:bodyLength: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.BodyLength)); err != nil {
			return fmt.Errorf("%T.bodyLength (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:bodyLength: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBodyMd5() {
		if err := oprot.WriteFieldBegin("bodyMd5", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:bodyMd5: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.BodyMd5)); err != nil {
			return fmt.Errorf("%T.bodyMd5 (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:bodyMd5: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSendTimestamp() {
		if err := oprot.WriteFieldBegin("sendTimestamp", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:sendTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.SendTimestamp)); err != nil {
			return fmt.Errorf("%T.sendTimestamp (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:sendTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageResponse(%+v)", *p)
}

type SendMessageBatchRequestEntry struct {
	EntryId             string                       `thrift:"entryId,1,required" json:"entryId"`
	MessageBody         string                       `thrift:"messageBody,2,required" json:"messageBody"`
	DelaySeconds        *int32                       `thrift:"delaySeconds,3" json:"delaySeconds"`
	InvisibilitySeconds *int32                       `thrift:"invisibilitySeconds,4" json:"invisibilitySeconds"`
	MessageAttributes   map[string]*MessageAttribute `thrift:"messageAttributes,5" json:"messageAttributes"`
	Priority            *int32                       `thrift:"priority,6" json:"priority"`
}

func NewSendMessageBatchRequestEntry() *SendMessageBatchRequestEntry {
	return &SendMessageBatchRequestEntry{}
}

func (p *SendMessageBatchRequestEntry) GetEntryId() string {
	return p.EntryId
}

func (p *SendMessageBatchRequestEntry) GetMessageBody() string {
	return p.MessageBody
}

var SendMessageBatchRequestEntry_DelaySeconds_DEFAULT int32

func (p *SendMessageBatchRequestEntry) GetDelaySeconds() int32 {
	if !p.IsSetDelaySeconds() {
		return SendMessageBatchRequestEntry_DelaySeconds_DEFAULT
	}
	return *p.DelaySeconds
}

var SendMessageBatchRequestEntry_InvisibilitySeconds_DEFAULT int32

func (p *SendMessageBatchRequestEntry) GetInvisibilitySeconds() int32 {
	if !p.IsSetInvisibilitySeconds() {
		return SendMessageBatchRequestEntry_InvisibilitySeconds_DEFAULT
	}
	return *p.InvisibilitySeconds
}

var SendMessageBatchRequestEntry_MessageAttributes_DEFAULT map[string]*MessageAttribute

func (p *SendMessageBatchRequestEntry) GetMessageAttributes() map[string]*MessageAttribute {
	return p.MessageAttributes
}

var SendMessageBatchRequestEntry_Priority_DEFAULT int32

func (p *SendMessageBatchRequestEntry) GetPriority() int32 {
	if !p.IsSetPriority() {
		return SendMessageBatchRequestEntry_Priority_DEFAULT
	}
	return *p.Priority
}
func (p *SendMessageBatchRequestEntry) IsSetDelaySeconds() bool {
	return p.DelaySeconds != nil
}

func (p *SendMessageBatchRequestEntry) IsSetInvisibilitySeconds() bool {
	return p.InvisibilitySeconds != nil
}

func (p *SendMessageBatchRequestEntry) IsSetMessageAttributes() bool {
	return p.MessageAttributes != nil
}

func (p *SendMessageBatchRequestEntry) IsSetPriority() bool {
	return p.Priority != nil
}

func (p *SendMessageBatchRequestEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageBatchRequestEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.EntryId = v
	}
	return nil
}

func (p *SendMessageBatchRequestEntry) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageBody = v
	}
	return nil
}

func (p *SendMessageBatchRequestEntry) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DelaySeconds = &v
	}
	return nil
}

func (p *SendMessageBatchRequestEntry) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.InvisibilitySeconds = &v
	}
	return nil
}

func (p *SendMessageBatchRequestEntry) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*MessageAttribute, size)
	p.MessageAttributes = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key2 = v
		}
		_val3 := &MessageAttribute{}
		if err := _val3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val3, err)
		}
		p.MessageAttributes[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *SendMessageBatchRequestEntry) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Priority = &v
	}
	return nil
}

func (p *SendMessageBatchRequestEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendMessageBatchRequestEntry"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageBatchRequestEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entryId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:entryId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.EntryId)); err != nil {
		return fmt.Errorf("%T.entryId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:entryId: %s", p, err)
	}
	return err
}

func (p *SendMessageBatchRequestEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBody", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageBody: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageBody)); err != nil {
		return fmt.Errorf("%T.messageBody (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageBody: %s", p, err)
	}
	return err
}

func (p *SendMessageBatchRequestEntry) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDelaySeconds() {
		if err := oprot.WriteFieldBegin("delaySeconds", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:delaySeconds: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.DelaySeconds)); err != nil {
			return fmt.Errorf("%T.delaySeconds (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:delaySeconds: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageBatchRequestEntry) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvisibilitySeconds() {
		if err := oprot.WriteFieldBegin("invisibilitySeconds", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:invisibilitySeconds: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.InvisibilitySeconds)); err != nil {
			return fmt.Errorf("%T.invisibilitySeconds (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:invisibilitySeconds: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageBatchRequestEntry) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageAttributes() {
		if err := oprot.WriteFieldBegin("messageAttributes", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:messageAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.MessageAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MessageAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:messageAttributes: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageBatchRequestEntry) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPriority() {
		if err := oprot.WriteFieldBegin("priority", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:priority: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Priority)); err != nil {
			return fmt.Errorf("%T.priority (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:priority: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageBatchRequestEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageBatchRequestEntry(%+v)", *p)
}

type SendMessageBatchRequest struct {
	QueueName                        string                          `thrift:"queueName,1,required" json:"queueName"`
	SendMessageBatchRequestEntryList []*SendMessageBatchRequestEntry `thrift:"sendMessageBatchRequestEntryList,2,required" json:"sendMessageBatchRequestEntryList"`
	Topic                            *string                         `thrift:"topic,3" json:"topic"`
}

func NewSendMessageBatchRequest() *SendMessageBatchRequest {
	return &SendMessageBatchRequest{}
}

func (p *SendMessageBatchRequest) GetQueueName() string {
	return p.QueueName
}

func (p *SendMessageBatchRequest) GetSendMessageBatchRequestEntryList() []*SendMessageBatchRequestEntry {
	return p.SendMessageBatchRequestEntryList
}

var SendMessageBatchRequest_Topic_DEFAULT string

func (p *SendMessageBatchRequest) GetTopic() string {
	if !p.IsSetTopic() {
		return SendMessageBatchRequest_Topic_DEFAULT
	}
	return *p.Topic
}
func (p *SendMessageBatchRequest) IsSetTopic() bool {
	return p.Topic != nil
}

func (p *SendMessageBatchRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageBatchRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *SendMessageBatchRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*SendMessageBatchRequestEntry, 0, size)
	p.SendMessageBatchRequestEntryList = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &SendMessageBatchRequestEntry{}
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.SendMessageBatchRequestEntryList = append(p.SendMessageBatchRequestEntryList, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SendMessageBatchRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Topic = &v
	}
	return nil
}

func (p *SendMessageBatchRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendMessageBatchRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageBatchRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *SendMessageBatchRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sendMessageBatchRequestEntryList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sendMessageBatchRequestEntryList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SendMessageBatchRequestEntryList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.SendMessageBatchRequestEntryList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sendMessageBatchRequestEntryList: %s", p, err)
	}
	return err
}

func (p *SendMessageBatchRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopic() {
		if err := oprot.WriteFieldBegin("topic", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:topic: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Topic)); err != nil {
			return fmt.Errorf("%T.topic (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:topic: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageBatchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageBatchRequest(%+v)", *p)
}

type SendMessageBatchResponseEntry struct {
	EntryId       string  `thrift:"entryId,1,required" json:"entryId"`
	MessageID     string  `thrift:"messageID,2,required" json:"messageID"`
	BodyLength    *int32  `thrift:"bodyLength,3" json:"bodyLength"`
	BodyMd5       *string `thrift:"bodyMd5,4" json:"bodyMd5"`
	SendTimestamp *int64  `thrift:"sendTimestamp,5" json:"sendTimestamp"`
}

func NewSendMessageBatchResponseEntry() *SendMessageBatchResponseEntry {
	return &SendMessageBatchResponseEntry{}
}

func (p *SendMessageBatchResponseEntry) GetEntryId() string {
	return p.EntryId
}

func (p *SendMessageBatchResponseEntry) GetMessageID() string {
	return p.MessageID
}

var SendMessageBatchResponseEntry_BodyLength_DEFAULT int32

func (p *SendMessageBatchResponseEntry) GetBodyLength() int32 {
	if !p.IsSetBodyLength() {
		return SendMessageBatchResponseEntry_BodyLength_DEFAULT
	}
	return *p.BodyLength
}

var SendMessageBatchResponseEntry_BodyMd5_DEFAULT string

func (p *SendMessageBatchResponseEntry) GetBodyMd5() string {
	if !p.IsSetBodyMd5() {
		return SendMessageBatchResponseEntry_BodyMd5_DEFAULT
	}
	return *p.BodyMd5
}

var SendMessageBatchResponseEntry_SendTimestamp_DEFAULT int64

func (p *SendMessageBatchResponseEntry) GetSendTimestamp() int64 {
	if !p.IsSetSendTimestamp() {
		return SendMessageBatchResponseEntry_SendTimestamp_DEFAULT
	}
	return *p.SendTimestamp
}
func (p *SendMessageBatchResponseEntry) IsSetBodyLength() bool {
	return p.BodyLength != nil
}

func (p *SendMessageBatchResponseEntry) IsSetBodyMd5() bool {
	return p.BodyMd5 != nil
}

func (p *SendMessageBatchResponseEntry) IsSetSendTimestamp() bool {
	return p.SendTimestamp != nil
}

func (p *SendMessageBatchResponseEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageBatchResponseEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.EntryId = v
	}
	return nil
}

func (p *SendMessageBatchResponseEntry) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageID = v
	}
	return nil
}

func (p *SendMessageBatchResponseEntry) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.BodyLength = &v
	}
	return nil
}

func (p *SendMessageBatchResponseEntry) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.BodyMd5 = &v
	}
	return nil
}

func (p *SendMessageBatchResponseEntry) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.SendTimestamp = &v
	}
	return nil
}

func (p *SendMessageBatchResponseEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendMessageBatchResponseEntry"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageBatchResponseEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entryId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:entryId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.EntryId)); err != nil {
		return fmt.Errorf("%T.entryId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:entryId: %s", p, err)
	}
	return err
}

func (p *SendMessageBatchResponseEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageID", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageID)); err != nil {
		return fmt.Errorf("%T.messageID (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageID: %s", p, err)
	}
	return err
}

func (p *SendMessageBatchResponseEntry) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBodyLength() {
		if err := oprot.WriteFieldBegin("bodyLength", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:bodyLength: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.BodyLength)); err != nil {
			return fmt.Errorf("%T.bodyLength (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:bodyLength: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageBatchResponseEntry) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBodyMd5() {
		if err := oprot.WriteFieldBegin("bodyMd5", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:bodyMd5: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.BodyMd5)); err != nil {
			return fmt.Errorf("%T.bodyMd5 (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:bodyMd5: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageBatchResponseEntry) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSendTimestamp() {
		if err := oprot.WriteFieldBegin("sendTimestamp", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:sendTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.SendTimestamp)); err != nil {
			return fmt.Errorf("%T.sendTimestamp (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:sendTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageBatchResponseEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageBatchResponseEntry(%+v)", *p)
}

type MessageBatchErrorEntry struct {
	Id     string                            `thrift:"id,1,required" json:"id"`
	Reason *common.GalaxyEmqServiceException `thrift:"reason,2,required" json:"reason"`
}

func NewMessageBatchErrorEntry() *MessageBatchErrorEntry {
	return &MessageBatchErrorEntry{}
}

func (p *MessageBatchErrorEntry) GetId() string {
	return p.Id
}

var MessageBatchErrorEntry_Reason_DEFAULT *common.GalaxyEmqServiceException

func (p *MessageBatchErrorEntry) GetReason() *common.GalaxyEmqServiceException {
	if !p.IsSetReason() {
		return MessageBatchErrorEntry_Reason_DEFAULT
	}
	return p.Reason
}
func (p *MessageBatchErrorEntry) IsSetReason() bool {
	return p.Reason != nil
}

func (p *MessageBatchErrorEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MessageBatchErrorEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *MessageBatchErrorEntry) ReadField2(iprot thrift.TProtocol) error {
	p.Reason = &common.GalaxyEmqServiceException{}
	if err := p.Reason.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Reason, err)
	}
	return nil
}

func (p *MessageBatchErrorEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageBatchErrorEntry"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MessageBatchErrorEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *MessageBatchErrorEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:reason: %s", p, err)
	}
	if err := p.Reason.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Reason, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:reason: %s", p, err)
	}
	return err
}

func (p *MessageBatchErrorEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageBatchErrorEntry(%+v)", *p)
}

type SendMessageBatchResponse struct {
	Successful []*SendMessageBatchResponseEntry `thrift:"successful,1" json:"successful"`
	Failed     []*MessageBatchErrorEntry        `thrift:"failed,2" json:"failed"`
}

func NewSendMessageBatchResponse() *SendMessageBatchResponse {
	return &SendMessageBatchResponse{}
}

func (p *SendMessageBatchResponse) GetSuccessful() []*SendMessageBatchResponseEntry {
	return p.Successful
}

func (p *SendMessageBatchResponse) GetFailed() []*MessageBatchErrorEntry {
	return p.Failed
}
func (p *SendMessageBatchResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageBatchResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*SendMessageBatchResponseEntry, 0, size)
	p.Successful = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &SendMessageBatchResponseEntry{}
		if err := _elem5.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem5, err)
		}
		p.Successful = append(p.Successful, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SendMessageBatchResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MessageBatchErrorEntry, 0, size)
	p.Failed = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &MessageBatchErrorEntry{}
		if err := _elem6.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem6, err)
		}
		p.Failed = append(p.Failed, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SendMessageBatchResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendMessageBatchResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageBatchResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("successful", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:successful: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Successful)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Successful {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:successful: %s", p, err)
	}
	return err
}

func (p *SendMessageBatchResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failed", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:failed: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Failed)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Failed {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:failed: %s", p, err)
	}
	return err
}

func (p *SendMessageBatchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageBatchResponse(%+v)", *p)
}

type ReceiveMessageRequest struct {
	QueueName                    string            `thrift:"queueName,1,required" json:"queueName"`
	MaxReceiveMessageNumber      int32             `thrift:"maxReceiveMessageNumber,2" json:"maxReceiveMessageNumber"`
	MaxReceiveMessageWaitSeconds int32             `thrift:"maxReceiveMessageWaitSeconds,3" json:"maxReceiveMessageWaitSeconds"`
	AttributeName                *string           `thrift:"attributeName,4" json:"attributeName"`
	AttributeValue               *MessageAttribute `thrift:"attributeValue,5" json:"attributeValue"`
	TagName                      *string           `thrift:"tagName,6" json:"tagName"`
}

func NewReceiveMessageRequest() *ReceiveMessageRequest {
	return &ReceiveMessageRequest{
		MaxReceiveMessageNumber: 100,
	}
}

func (p *ReceiveMessageRequest) GetQueueName() string {
	return p.QueueName
}

var ReceiveMessageRequest_MaxReceiveMessageNumber_DEFAULT int32 = 100

func (p *ReceiveMessageRequest) GetMaxReceiveMessageNumber() int32 {
	return p.MaxReceiveMessageNumber
}

var ReceiveMessageRequest_MaxReceiveMessageWaitSeconds_DEFAULT int32 = 0

func (p *ReceiveMessageRequest) GetMaxReceiveMessageWaitSeconds() int32 {
	return p.MaxReceiveMessageWaitSeconds
}

var ReceiveMessageRequest_AttributeName_DEFAULT string

func (p *ReceiveMessageRequest) GetAttributeName() string {
	if !p.IsSetAttributeName() {
		return ReceiveMessageRequest_AttributeName_DEFAULT
	}
	return *p.AttributeName
}

var ReceiveMessageRequest_AttributeValue_DEFAULT *MessageAttribute

func (p *ReceiveMessageRequest) GetAttributeValue() *MessageAttribute {
	if !p.IsSetAttributeValue() {
		return ReceiveMessageRequest_AttributeValue_DEFAULT
	}
	return p.AttributeValue
}

var ReceiveMessageRequest_TagName_DEFAULT string

func (p *ReceiveMessageRequest) GetTagName() string {
	if !p.IsSetTagName() {
		return ReceiveMessageRequest_TagName_DEFAULT
	}
	return *p.TagName
}
func (p *ReceiveMessageRequest) IsSetMaxReceiveMessageNumber() bool {
	return p.MaxReceiveMessageNumber != ReceiveMessageRequest_MaxReceiveMessageNumber_DEFAULT
}

func (p *ReceiveMessageRequest) IsSetMaxReceiveMessageWaitSeconds() bool {
	return p.MaxReceiveMessageWaitSeconds != ReceiveMessageRequest_MaxReceiveMessageWaitSeconds_DEFAULT
}

func (p *ReceiveMessageRequest) IsSetAttributeName() bool {
	return p.AttributeName != nil
}

func (p *ReceiveMessageRequest) IsSetAttributeValue() bool {
	return p.AttributeValue != nil
}

func (p *ReceiveMessageRequest) IsSetTagName() bool {
	return p.TagName != nil
}

func (p *ReceiveMessageRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReceiveMessageRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *ReceiveMessageRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MaxReceiveMessageNumber = v
	}
	return nil
}

func (p *ReceiveMessageRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxReceiveMessageWaitSeconds = v
	}
	return nil
}

func (p *ReceiveMessageRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.AttributeName = &v
	}
	return nil
}

func (p *ReceiveMessageRequest) ReadField5(iprot thrift.TProtocol) error {
	p.AttributeValue = &MessageAttribute{}
	if err := p.AttributeValue.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AttributeValue, err)
	}
	return nil
}

func (p *ReceiveMessageRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.TagName = &v
	}
	return nil
}

func (p *ReceiveMessageRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReceiveMessageRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReceiveMessageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *ReceiveMessageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxReceiveMessageNumber() {
		if err := oprot.WriteFieldBegin("maxReceiveMessageNumber", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:maxReceiveMessageNumber: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxReceiveMessageNumber)); err != nil {
			return fmt.Errorf("%T.maxReceiveMessageNumber (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:maxReceiveMessageNumber: %s", p, err)
		}
	}
	return err
}

func (p *ReceiveMessageRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxReceiveMessageWaitSeconds() {
		if err := oprot.WriteFieldBegin("maxReceiveMessageWaitSeconds", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:maxReceiveMessageWaitSeconds: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxReceiveMessageWaitSeconds)); err != nil {
			return fmt.Errorf("%T.maxReceiveMessageWaitSeconds (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:maxReceiveMessageWaitSeconds: %s", p, err)
		}
	}
	return err
}

func (p *ReceiveMessageRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributeName() {
		if err := oprot.WriteFieldBegin("attributeName", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:attributeName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.AttributeName)); err != nil {
			return fmt.Errorf("%T.attributeName (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:attributeName: %s", p, err)
		}
	}
	return err
}

func (p *ReceiveMessageRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributeValue() {
		if err := oprot.WriteFieldBegin("attributeValue", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:attributeValue: %s", p, err)
		}
		if err := p.AttributeValue.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AttributeValue, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:attributeValue: %s", p, err)
		}
	}
	return err
}

func (p *ReceiveMessageRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagName() {
		if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:tagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TagName)); err != nil {
			return fmt.Errorf("%T.tagName (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:tagName: %s", p, err)
		}
	}
	return err
}

func (p *ReceiveMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReceiveMessageRequest(%+v)", *p)
}

type ReceiveMessageResponse struct {
	MessageID         string                       `thrift:"messageID,1,required" json:"messageID"`
	ReceiptHandle     string                       `thrift:"receiptHandle,2,required" json:"receiptHandle"`
	MessageBody       string                       `thrift:"messageBody,3,required" json:"messageBody"`
	Attributes        map[string]string            `thrift:"attributes,4" json:"attributes"`
	MessageAttributes map[string]*MessageAttribute `thrift:"messageAttributes,5" json:"messageAttributes"`
}

func NewReceiveMessageResponse() *ReceiveMessageResponse {
	return &ReceiveMessageResponse{}
}

func (p *ReceiveMessageResponse) GetMessageID() string {
	return p.MessageID
}

func (p *ReceiveMessageResponse) GetReceiptHandle() string {
	return p.ReceiptHandle
}

func (p *ReceiveMessageResponse) GetMessageBody() string {
	return p.MessageBody
}

var ReceiveMessageResponse_Attributes_DEFAULT map[string]string

func (p *ReceiveMessageResponse) GetAttributes() map[string]string {
	return p.Attributes
}

var ReceiveMessageResponse_MessageAttributes_DEFAULT map[string]*MessageAttribute

func (p *ReceiveMessageResponse) GetMessageAttributes() map[string]*MessageAttribute {
	return p.MessageAttributes
}
func (p *ReceiveMessageResponse) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *ReceiveMessageResponse) IsSetMessageAttributes() bool {
	return p.MessageAttributes != nil
}

func (p *ReceiveMessageResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReceiveMessageResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MessageID = v
	}
	return nil
}

func (p *ReceiveMessageResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReceiptHandle = v
	}
	return nil
}

func (p *ReceiveMessageResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageBody = v
	}
	return nil
}

func (p *ReceiveMessageResponse) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key7 = v
		}
		var _val8 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val8 = v
		}
		p.Attributes[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ReceiveMessageResponse) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*MessageAttribute, size)
	p.MessageAttributes = tMap
	for i := 0; i < size; i++ {
		var _key9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key9 = v
		}
		_val10 := &MessageAttribute{}
		if err := _val10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val10, err)
		}
		p.MessageAttributes[_key9] = _val10
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ReceiveMessageResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReceiveMessageResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReceiveMessageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:messageID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageID)); err != nil {
		return fmt.Errorf("%T.messageID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:messageID: %s", p, err)
	}
	return err
}

func (p *ReceiveMessageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiptHandle", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:receiptHandle: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiptHandle)); err != nil {
		return fmt.Errorf("%T.receiptHandle (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:receiptHandle: %s", p, err)
	}
	return err
}

func (p *ReceiveMessageResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBody", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageBody: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageBody)); err != nil {
		return fmt.Errorf("%T.messageBody (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageBody: %s", p, err)
	}
	return err
}

func (p *ReceiveMessageResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:attributes: %s", p, err)
		}
	}
	return err
}

func (p *ReceiveMessageResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageAttributes() {
		if err := oprot.WriteFieldBegin("messageAttributes", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:messageAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.MessageAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MessageAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:messageAttributes: %s", p, err)
		}
	}
	return err
}

func (p *ReceiveMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReceiveMessageResponse(%+v)", *p)
}

type ChangeMessageVisibilityRequest struct {
	QueueName           string `thrift:"queueName,1,required" json:"queueName"`
	ReceiptHandle       string `thrift:"receiptHandle,2,required" json:"receiptHandle"`
	InvisibilitySeconds int32  `thrift:"invisibilitySeconds,3,required" json:"invisibilitySeconds"`
}

func NewChangeMessageVisibilityRequest() *ChangeMessageVisibilityRequest {
	return &ChangeMessageVisibilityRequest{}
}

func (p *ChangeMessageVisibilityRequest) GetQueueName() string {
	return p.QueueName
}

func (p *ChangeMessageVisibilityRequest) GetReceiptHandle() string {
	return p.ReceiptHandle
}

func (p *ChangeMessageVisibilityRequest) GetInvisibilitySeconds() int32 {
	return p.InvisibilitySeconds
}
func (p *ChangeMessageVisibilityRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeMessageVisibilityRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *ChangeMessageVisibilityRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReceiptHandle = v
	}
	return nil
}

func (p *ChangeMessageVisibilityRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.InvisibilitySeconds = v
	}
	return nil
}

func (p *ChangeMessageVisibilityRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChangeMessageVisibilityRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeMessageVisibilityRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *ChangeMessageVisibilityRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiptHandle", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:receiptHandle: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiptHandle)); err != nil {
		return fmt.Errorf("%T.receiptHandle (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:receiptHandle: %s", p, err)
	}
	return err
}

func (p *ChangeMessageVisibilityRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invisibilitySeconds", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:invisibilitySeconds: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.InvisibilitySeconds)); err != nil {
		return fmt.Errorf("%T.invisibilitySeconds (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:invisibilitySeconds: %s", p, err)
	}
	return err
}

func (p *ChangeMessageVisibilityRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeMessageVisibilityRequest(%+v)", *p)
}

type ChangeMessageVisibilityBatchRequestEntry struct {
	ReceiptHandle       string `thrift:"receiptHandle,1,required" json:"receiptHandle"`
	InvisibilitySeconds int32  `thrift:"invisibilitySeconds,2,required" json:"invisibilitySeconds"`
}

func NewChangeMessageVisibilityBatchRequestEntry() *ChangeMessageVisibilityBatchRequestEntry {
	return &ChangeMessageVisibilityBatchRequestEntry{}
}

func (p *ChangeMessageVisibilityBatchRequestEntry) GetReceiptHandle() string {
	return p.ReceiptHandle
}

func (p *ChangeMessageVisibilityBatchRequestEntry) GetInvisibilitySeconds() int32 {
	return p.InvisibilitySeconds
}
func (p *ChangeMessageVisibilityBatchRequestEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchRequestEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReceiptHandle = v
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchRequestEntry) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.InvisibilitySeconds = v
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchRequestEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChangeMessageVisibilityBatchRequestEntry"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchRequestEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiptHandle", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:receiptHandle: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiptHandle)); err != nil {
		return fmt.Errorf("%T.receiptHandle (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:receiptHandle: %s", p, err)
	}
	return err
}

func (p *ChangeMessageVisibilityBatchRequestEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invisibilitySeconds", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:invisibilitySeconds: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.InvisibilitySeconds)); err != nil {
		return fmt.Errorf("%T.invisibilitySeconds (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:invisibilitySeconds: %s", p, err)
	}
	return err
}

func (p *ChangeMessageVisibilityBatchRequestEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeMessageVisibilityBatchRequestEntry(%+v)", *p)
}

type ChangeMessageVisibilityBatchRequest struct {
	QueueName                               string                                      `thrift:"queueName,1,required" json:"queueName"`
	ChangeMessageVisibilityRequestEntryList []*ChangeMessageVisibilityBatchRequestEntry `thrift:"changeMessageVisibilityRequestEntryList,2,required" json:"changeMessageVisibilityRequestEntryList"`
}

func NewChangeMessageVisibilityBatchRequest() *ChangeMessageVisibilityBatchRequest {
	return &ChangeMessageVisibilityBatchRequest{}
}

func (p *ChangeMessageVisibilityBatchRequest) GetQueueName() string {
	return p.QueueName
}

func (p *ChangeMessageVisibilityBatchRequest) GetChangeMessageVisibilityRequestEntryList() []*ChangeMessageVisibilityBatchRequestEntry {
	return p.ChangeMessageVisibilityRequestEntryList
}
func (p *ChangeMessageVisibilityBatchRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ChangeMessageVisibilityBatchRequestEntry, 0, size)
	p.ChangeMessageVisibilityRequestEntryList = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &ChangeMessageVisibilityBatchRequestEntry{}
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11, err)
		}
		p.ChangeMessageVisibilityRequestEntryList = append(p.ChangeMessageVisibilityRequestEntryList, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChangeMessageVisibilityBatchRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *ChangeMessageVisibilityBatchRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("changeMessageVisibilityRequestEntryList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:changeMessageVisibilityRequestEntryList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChangeMessageVisibilityRequestEntryList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ChangeMessageVisibilityRequestEntryList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:changeMessageVisibilityRequestEntryList: %s", p, err)
	}
	return err
}

func (p *ChangeMessageVisibilityBatchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeMessageVisibilityBatchRequest(%+v)", *p)
}

type ChangeMessageVisibilityBatchResponse struct {
	Successful []string                  `thrift:"successful,1" json:"successful"`
	Failed     []*MessageBatchErrorEntry `thrift:"failed,2" json:"failed"`
}

func NewChangeMessageVisibilityBatchResponse() *ChangeMessageVisibilityBatchResponse {
	return &ChangeMessageVisibilityBatchResponse{}
}

func (p *ChangeMessageVisibilityBatchResponse) GetSuccessful() []string {
	return p.Successful
}

func (p *ChangeMessageVisibilityBatchResponse) GetFailed() []*MessageBatchErrorEntry {
	return p.Failed
}
func (p *ChangeMessageVisibilityBatchResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Successful = tSlice
	for i := 0; i < size; i++ {
		var _elem12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem12 = v
		}
		p.Successful = append(p.Successful, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MessageBatchErrorEntry, 0, size)
	p.Failed = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &MessageBatchErrorEntry{}
		if err := _elem13.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem13, err)
		}
		p.Failed = append(p.Failed, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChangeMessageVisibilityBatchResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeMessageVisibilityBatchResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("successful", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:successful: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Successful)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Successful {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:successful: %s", p, err)
	}
	return err
}

func (p *ChangeMessageVisibilityBatchResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failed", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:failed: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Failed)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Failed {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:failed: %s", p, err)
	}
	return err
}

func (p *ChangeMessageVisibilityBatchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeMessageVisibilityBatchResponse(%+v)", *p)
}

type DeleteMessageRequest struct {
	QueueName     string `thrift:"queueName,1,required" json:"queueName"`
	ReceiptHandle string `thrift:"receiptHandle,2,required" json:"receiptHandle"`
}

func NewDeleteMessageRequest() *DeleteMessageRequest {
	return &DeleteMessageRequest{}
}

func (p *DeleteMessageRequest) GetQueueName() string {
	return p.QueueName
}

func (p *DeleteMessageRequest) GetReceiptHandle() string {
	return p.ReceiptHandle
}
func (p *DeleteMessageRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteMessageRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *DeleteMessageRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReceiptHandle = v
	}
	return nil
}

func (p *DeleteMessageRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteMessageRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteMessageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *DeleteMessageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiptHandle", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:receiptHandle: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiptHandle)); err != nil {
		return fmt.Errorf("%T.receiptHandle (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:receiptHandle: %s", p, err)
	}
	return err
}

func (p *DeleteMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteMessageRequest(%+v)", *p)
}

type DeleteMessageBatchRequestEntry struct {
	ReceiptHandle string `thrift:"receiptHandle,1,required" json:"receiptHandle"`
}

func NewDeleteMessageBatchRequestEntry() *DeleteMessageBatchRequestEntry {
	return &DeleteMessageBatchRequestEntry{}
}

func (p *DeleteMessageBatchRequestEntry) GetReceiptHandle() string {
	return p.ReceiptHandle
}
func (p *DeleteMessageBatchRequestEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteMessageBatchRequestEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReceiptHandle = v
	}
	return nil
}

func (p *DeleteMessageBatchRequestEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteMessageBatchRequestEntry"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteMessageBatchRequestEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiptHandle", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:receiptHandle: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiptHandle)); err != nil {
		return fmt.Errorf("%T.receiptHandle (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:receiptHandle: %s", p, err)
	}
	return err
}

func (p *DeleteMessageBatchRequestEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteMessageBatchRequestEntry(%+v)", *p)
}

type DeleteMessageBatchRequest struct {
	QueueName                          string                            `thrift:"queueName,1,required" json:"queueName"`
	DeleteMessageBatchRequestEntryList []*DeleteMessageBatchRequestEntry `thrift:"deleteMessageBatchRequestEntryList,2,required" json:"deleteMessageBatchRequestEntryList"`
}

func NewDeleteMessageBatchRequest() *DeleteMessageBatchRequest {
	return &DeleteMessageBatchRequest{}
}

func (p *DeleteMessageBatchRequest) GetQueueName() string {
	return p.QueueName
}

func (p *DeleteMessageBatchRequest) GetDeleteMessageBatchRequestEntryList() []*DeleteMessageBatchRequestEntry {
	return p.DeleteMessageBatchRequestEntryList
}
func (p *DeleteMessageBatchRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteMessageBatchRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *DeleteMessageBatchRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*DeleteMessageBatchRequestEntry, 0, size)
	p.DeleteMessageBatchRequestEntryList = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &DeleteMessageBatchRequestEntry{}
		if err := _elem14.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem14, err)
		}
		p.DeleteMessageBatchRequestEntryList = append(p.DeleteMessageBatchRequestEntryList, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DeleteMessageBatchRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteMessageBatchRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteMessageBatchRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *DeleteMessageBatchRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteMessageBatchRequestEntryList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:deleteMessageBatchRequestEntryList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DeleteMessageBatchRequestEntryList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.DeleteMessageBatchRequestEntryList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:deleteMessageBatchRequestEntryList: %s", p, err)
	}
	return err
}

func (p *DeleteMessageBatchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteMessageBatchRequest(%+v)", *p)
}

type DeleteMessageBatchResponse struct {
	Successful []string                  `thrift:"successful,1" json:"successful"`
	Failed     []*MessageBatchErrorEntry `thrift:"failed,2" json:"failed"`
}

func NewDeleteMessageBatchResponse() *DeleteMessageBatchResponse {
	return &DeleteMessageBatchResponse{}
}

func (p *DeleteMessageBatchResponse) GetSuccessful() []string {
	return p.Successful
}

func (p *DeleteMessageBatchResponse) GetFailed() []*MessageBatchErrorEntry {
	return p.Failed
}
func (p *DeleteMessageBatchResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteMessageBatchResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Successful = tSlice
	for i := 0; i < size; i++ {
		var _elem15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem15 = v
		}
		p.Successful = append(p.Successful, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DeleteMessageBatchResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MessageBatchErrorEntry, 0, size)
	p.Failed = tSlice
	for i := 0; i < size; i++ {
		_elem16 := &MessageBatchErrorEntry{}
		if err := _elem16.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem16, err)
		}
		p.Failed = append(p.Failed, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DeleteMessageBatchResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteMessageBatchResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteMessageBatchResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("successful", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:successful: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Successful)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Successful {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:successful: %s", p, err)
	}
	return err
}

func (p *DeleteMessageBatchResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failed", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:failed: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Failed)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Failed {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:failed: %s", p, err)
	}
	return err
}

func (p *DeleteMessageBatchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteMessageBatchResponse(%+v)", *p)
}

type DeadMessageRequest struct {
	QueueName     string `thrift:"queueName,1,required" json:"queueName"`
	ReceiptHandle string `thrift:"receiptHandle,2,required" json:"receiptHandle"`
}

func NewDeadMessageRequest() *DeadMessageRequest {
	return &DeadMessageRequest{}
}

func (p *DeadMessageRequest) GetQueueName() string {
	return p.QueueName
}

func (p *DeadMessageRequest) GetReceiptHandle() string {
	return p.ReceiptHandle
}
func (p *DeadMessageRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeadMessageRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *DeadMessageRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReceiptHandle = v
	}
	return nil
}

func (p *DeadMessageRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeadMessageRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeadMessageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *DeadMessageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiptHandle", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:receiptHandle: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiptHandle)); err != nil {
		return fmt.Errorf("%T.receiptHandle (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:receiptHandle: %s", p, err)
	}
	return err
}

func (p *DeadMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeadMessageRequest(%+v)", *p)
}

type DeadMessageBatchRequestEntry struct {
	ReceiptHandle string `thrift:"receiptHandle,1,required" json:"receiptHandle"`
}

func NewDeadMessageBatchRequestEntry() *DeadMessageBatchRequestEntry {
	return &DeadMessageBatchRequestEntry{}
}

func (p *DeadMessageBatchRequestEntry) GetReceiptHandle() string {
	return p.ReceiptHandle
}
func (p *DeadMessageBatchRequestEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeadMessageBatchRequestEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReceiptHandle = v
	}
	return nil
}

func (p *DeadMessageBatchRequestEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeadMessageBatchRequestEntry"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeadMessageBatchRequestEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiptHandle", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:receiptHandle: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiptHandle)); err != nil {
		return fmt.Errorf("%T.receiptHandle (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:receiptHandle: %s", p, err)
	}
	return err
}

func (p *DeadMessageBatchRequestEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeadMessageBatchRequestEntry(%+v)", *p)
}

type DeadMessageBatchRequest struct {
	QueueName                        string                          `thrift:"queueName,1,required" json:"queueName"`
	DeadMessageBatchRequestEntryList []*DeadMessageBatchRequestEntry `thrift:"deadMessageBatchRequestEntryList,2,required" json:"deadMessageBatchRequestEntryList"`
}

func NewDeadMessageBatchRequest() *DeadMessageBatchRequest {
	return &DeadMessageBatchRequest{}
}

func (p *DeadMessageBatchRequest) GetQueueName() string {
	return p.QueueName
}

func (p *DeadMessageBatchRequest) GetDeadMessageBatchRequestEntryList() []*DeadMessageBatchRequestEntry {
	return p.DeadMessageBatchRequestEntryList
}
func (p *DeadMessageBatchRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeadMessageBatchRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *DeadMessageBatchRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*DeadMessageBatchRequestEntry, 0, size)
	p.DeadMessageBatchRequestEntryList = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &DeadMessageBatchRequestEntry{}
		if err := _elem17.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem17, err)
		}
		p.DeadMessageBatchRequestEntryList = append(p.DeadMessageBatchRequestEntryList, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DeadMessageBatchRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeadMessageBatchRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeadMessageBatchRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *DeadMessageBatchRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deadMessageBatchRequestEntryList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:deadMessageBatchRequestEntryList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DeadMessageBatchRequestEntryList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.DeadMessageBatchRequestEntryList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:deadMessageBatchRequestEntryList: %s", p, err)
	}
	return err
}

func (p *DeadMessageBatchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeadMessageBatchRequest(%+v)", *p)
}

type DeadMessageBatchResponse struct {
	Successful []string                  `thrift:"successful,1" json:"successful"`
	Failed     []*MessageBatchErrorEntry `thrift:"failed,2" json:"failed"`
}

func NewDeadMessageBatchResponse() *DeadMessageBatchResponse {
	return &DeadMessageBatchResponse{}
}

func (p *DeadMessageBatchResponse) GetSuccessful() []string {
	return p.Successful
}

func (p *DeadMessageBatchResponse) GetFailed() []*MessageBatchErrorEntry {
	return p.Failed
}
func (p *DeadMessageBatchResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeadMessageBatchResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Successful = tSlice
	for i := 0; i < size; i++ {
		var _elem18 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem18 = v
		}
		p.Successful = append(p.Successful, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DeadMessageBatchResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MessageBatchErrorEntry, 0, size)
	p.Failed = tSlice
	for i := 0; i < size; i++ {
		_elem19 := &MessageBatchErrorEntry{}
		if err := _elem19.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem19, err)
		}
		p.Failed = append(p.Failed, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DeadMessageBatchResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeadMessageBatchResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeadMessageBatchResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("successful", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:successful: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Successful)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Successful {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:successful: %s", p, err)
	}
	return err
}

func (p *DeadMessageBatchResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failed", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:failed: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Failed)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Failed {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:failed: %s", p, err)
	}
	return err
}

func (p *DeadMessageBatchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeadMessageBatchResponse(%+v)", *p)
}

type PeekMessageResponse struct {
	MessageID         string                            `thrift:"messageID,1,required" json:"messageID"`
	MessageBody       *string                           `thrift:"messageBody,2" json:"messageBody"`
	Attributes        map[string]string                 `thrift:"attributes,3" json:"attributes"`
	MessageAttributes map[string]*MessageAttribute      `thrift:"messageAttributes,4" json:"messageAttributes"`
	E                 *common.GalaxyEmqServiceException `thrift:"e,5" json:"e"`
}

func NewPeekMessageResponse() *PeekMessageResponse {
	return &PeekMessageResponse{}
}

func (p *PeekMessageResponse) GetMessageID() string {
	return p.MessageID
}

var PeekMessageResponse_MessageBody_DEFAULT string

func (p *PeekMessageResponse) GetMessageBody() string {
	if !p.IsSetMessageBody() {
		return PeekMessageResponse_MessageBody_DEFAULT
	}
	return *p.MessageBody
}

var PeekMessageResponse_Attributes_DEFAULT map[string]string

func (p *PeekMessageResponse) GetAttributes() map[string]string {
	return p.Attributes
}

var PeekMessageResponse_MessageAttributes_DEFAULT map[string]*MessageAttribute

func (p *PeekMessageResponse) GetMessageAttributes() map[string]*MessageAttribute {
	return p.MessageAttributes
}

var PeekMessageResponse_E_DEFAULT *common.GalaxyEmqServiceException

func (p *PeekMessageResponse) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return PeekMessageResponse_E_DEFAULT
	}
	return p.E
}
func (p *PeekMessageResponse) IsSetMessageBody() bool {
	return p.MessageBody != nil
}

func (p *PeekMessageResponse) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *PeekMessageResponse) IsSetMessageAttributes() bool {
	return p.MessageAttributes != nil
}

func (p *PeekMessageResponse) IsSetE() bool {
	return p.E != nil
}

func (p *PeekMessageResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PeekMessageResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MessageID = v
	}
	return nil
}

func (p *PeekMessageResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageBody = &v
	}
	return nil
}

func (p *PeekMessageResponse) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key20 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key20 = v
		}
		var _val21 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val21 = v
		}
		p.Attributes[_key20] = _val21
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PeekMessageResponse) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*MessageAttribute, size)
	p.MessageAttributes = tMap
	for i := 0; i < size; i++ {
		var _key22 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key22 = v
		}
		_val23 := &MessageAttribute{}
		if err := _val23.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val23, err)
		}
		p.MessageAttributes[_key22] = _val23
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PeekMessageResponse) ReadField5(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *PeekMessageResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PeekMessageResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PeekMessageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:messageID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageID)); err != nil {
		return fmt.Errorf("%T.messageID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:messageID: %s", p, err)
	}
	return err
}

func (p *PeekMessageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageBody() {
		if err := oprot.WriteFieldBegin("messageBody", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:messageBody: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MessageBody)); err != nil {
			return fmt.Errorf("%T.messageBody (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:messageBody: %s", p, err)
		}
	}
	return err
}

func (p *PeekMessageResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:attributes: %s", p, err)
		}
	}
	return err
}

func (p *PeekMessageResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageAttributes() {
		if err := oprot.WriteFieldBegin("messageAttributes", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:messageAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.MessageAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.MessageAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:messageAttributes: %s", p, err)
		}
	}
	return err
}

func (p *PeekMessageResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:e: %s", p, err)
		}
	}
	return err
}

func (p *PeekMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PeekMessageResponse(%+v)", *p)
}

type DeletePeekMessageRequest struct {
	QueueName     string `thrift:"queueName,1,required" json:"queueName"`
	ReceiptHandle string `thrift:"receiptHandle,2,required" json:"receiptHandle"`
}

func NewDeletePeekMessageRequest() *DeletePeekMessageRequest {
	return &DeletePeekMessageRequest{}
}

func (p *DeletePeekMessageRequest) GetQueueName() string {
	return p.QueueName
}

func (p *DeletePeekMessageRequest) GetReceiptHandle() string {
	return p.ReceiptHandle
}
func (p *DeletePeekMessageRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeletePeekMessageRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *DeletePeekMessageRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReceiptHandle = v
	}
	return nil
}

func (p *DeletePeekMessageRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeletePeekMessageRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeletePeekMessageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *DeletePeekMessageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiptHandle", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:receiptHandle: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiptHandle)); err != nil {
		return fmt.Errorf("%T.receiptHandle (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:receiptHandle: %s", p, err)
	}
	return err
}

func (p *DeletePeekMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePeekMessageRequest(%+v)", *p)
}

type DeletePeekMessageBatchEntry struct {
	ReceiptHandle string `thrift:"receiptHandle,1,required" json:"receiptHandle"`
}

func NewDeletePeekMessageBatchEntry() *DeletePeekMessageBatchEntry {
	return &DeletePeekMessageBatchEntry{}
}

func (p *DeletePeekMessageBatchEntry) GetReceiptHandle() string {
	return p.ReceiptHandle
}
func (p *DeletePeekMessageBatchEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeletePeekMessageBatchEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReceiptHandle = v
	}
	return nil
}

func (p *DeletePeekMessageBatchEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeletePeekMessageBatchEntry"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeletePeekMessageBatchEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiptHandle", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:receiptHandle: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiptHandle)); err != nil {
		return fmt.Errorf("%T.receiptHandle (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:receiptHandle: %s", p, err)
	}
	return err
}

func (p *DeletePeekMessageBatchEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePeekMessageBatchEntry(%+v)", *p)
}

type DeletePeekMessageBatchRequest struct {
	QueueName                       string                         `thrift:"queueName,1,required" json:"queueName"`
	DeletePeekMessageBatchEntryList []*DeletePeekMessageBatchEntry `thrift:"deletePeekMessageBatchEntryList,2,required" json:"deletePeekMessageBatchEntryList"`
}

func NewDeletePeekMessageBatchRequest() *DeletePeekMessageBatchRequest {
	return &DeletePeekMessageBatchRequest{}
}

func (p *DeletePeekMessageBatchRequest) GetQueueName() string {
	return p.QueueName
}

func (p *DeletePeekMessageBatchRequest) GetDeletePeekMessageBatchEntryList() []*DeletePeekMessageBatchEntry {
	return p.DeletePeekMessageBatchEntryList
}
func (p *DeletePeekMessageBatchRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeletePeekMessageBatchRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *DeletePeekMessageBatchRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*DeletePeekMessageBatchEntry, 0, size)
	p.DeletePeekMessageBatchEntryList = tSlice
	for i := 0; i < size; i++ {
		_elem24 := &DeletePeekMessageBatchEntry{}
		if err := _elem24.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem24, err)
		}
		p.DeletePeekMessageBatchEntryList = append(p.DeletePeekMessageBatchEntryList, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DeletePeekMessageBatchRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeletePeekMessageBatchRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeletePeekMessageBatchRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *DeletePeekMessageBatchRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deletePeekMessageBatchEntryList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:deletePeekMessageBatchEntryList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DeletePeekMessageBatchEntryList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.DeletePeekMessageBatchEntryList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:deletePeekMessageBatchEntryList: %s", p, err)
	}
	return err
}

func (p *DeletePeekMessageBatchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePeekMessageBatchRequest(%+v)", *p)
}

type DeletePeekMessageBatchResponse struct {
	Successful []string                  `thrift:"successful,1" json:"successful"`
	Failed     []*MessageBatchErrorEntry `thrift:"failed,2" json:"failed"`
}

func NewDeletePeekMessageBatchResponse() *DeletePeekMessageBatchResponse {
	return &DeletePeekMessageBatchResponse{}
}

func (p *DeletePeekMessageBatchResponse) GetSuccessful() []string {
	return p.Successful
}

func (p *DeletePeekMessageBatchResponse) GetFailed() []*MessageBatchErrorEntry {
	return p.Failed
}
func (p *DeletePeekMessageBatchResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeletePeekMessageBatchResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Successful = tSlice
	for i := 0; i < size; i++ {
		var _elem25 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem25 = v
		}
		p.Successful = append(p.Successful, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DeletePeekMessageBatchResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MessageBatchErrorEntry, 0, size)
	p.Failed = tSlice
	for i := 0; i < size; i++ {
		_elem26 := &MessageBatchErrorEntry{}
		if err := _elem26.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem26, err)
		}
		p.Failed = append(p.Failed, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DeletePeekMessageBatchResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeletePeekMessageBatchResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeletePeekMessageBatchResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("successful", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:successful: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Successful)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Successful {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:successful: %s", p, err)
	}
	return err
}

func (p *DeletePeekMessageBatchResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failed", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:failed: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Failed)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Failed {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:failed: %s", p, err)
	}
	return err
}

func (p *DeletePeekMessageBatchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePeekMessageBatchResponse(%+v)", *p)
}

type PartitionTimeIntervalAndMaxNum struct {
	StartTimestamp *int64 `thrift:"startTimestamp,1" json:"startTimestamp"`
	EndTimestamp   *int64 `thrift:"endTimestamp,2" json:"endTimestamp"`
	MaxNum         *int32 `thrift:"maxNum,3" json:"maxNum"`
	PartitionId    *int32 `thrift:"partitionId,4" json:"partitionId"`
}

func NewPartitionTimeIntervalAndMaxNum() *PartitionTimeIntervalAndMaxNum {
	return &PartitionTimeIntervalAndMaxNum{}
}

var PartitionTimeIntervalAndMaxNum_StartTimestamp_DEFAULT int64

func (p *PartitionTimeIntervalAndMaxNum) GetStartTimestamp() int64 {
	if !p.IsSetStartTimestamp() {
		return PartitionTimeIntervalAndMaxNum_StartTimestamp_DEFAULT
	}
	return *p.StartTimestamp
}

var PartitionTimeIntervalAndMaxNum_EndTimestamp_DEFAULT int64

func (p *PartitionTimeIntervalAndMaxNum) GetEndTimestamp() int64 {
	if !p.IsSetEndTimestamp() {
		return PartitionTimeIntervalAndMaxNum_EndTimestamp_DEFAULT
	}
	return *p.EndTimestamp
}

var PartitionTimeIntervalAndMaxNum_MaxNum_DEFAULT int32

func (p *PartitionTimeIntervalAndMaxNum) GetMaxNum() int32 {
	if !p.IsSetMaxNum() {
		return PartitionTimeIntervalAndMaxNum_MaxNum_DEFAULT
	}
	return *p.MaxNum
}

var PartitionTimeIntervalAndMaxNum_PartitionId_DEFAULT int32

func (p *PartitionTimeIntervalAndMaxNum) GetPartitionId() int32 {
	if !p.IsSetPartitionId() {
		return PartitionTimeIntervalAndMaxNum_PartitionId_DEFAULT
	}
	return *p.PartitionId
}
func (p *PartitionTimeIntervalAndMaxNum) IsSetStartTimestamp() bool {
	return p.StartTimestamp != nil
}

func (p *PartitionTimeIntervalAndMaxNum) IsSetEndTimestamp() bool {
	return p.EndTimestamp != nil
}

func (p *PartitionTimeIntervalAndMaxNum) IsSetMaxNum() bool {
	return p.MaxNum != nil
}

func (p *PartitionTimeIntervalAndMaxNum) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *PartitionTimeIntervalAndMaxNum) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionTimeIntervalAndMaxNum) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.StartTimestamp = &v
	}
	return nil
}

func (p *PartitionTimeIntervalAndMaxNum) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.EndTimestamp = &v
	}
	return nil
}

func (p *PartitionTimeIntervalAndMaxNum) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxNum = &v
	}
	return nil
}

func (p *PartitionTimeIntervalAndMaxNum) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.PartitionId = &v
	}
	return nil
}

func (p *PartitionTimeIntervalAndMaxNum) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PartitionTimeIntervalAndMaxNum"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionTimeIntervalAndMaxNum) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTimestamp() {
		if err := oprot.WriteFieldBegin("startTimestamp", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:startTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartTimestamp)); err != nil {
			return fmt.Errorf("%T.startTimestamp (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:startTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *PartitionTimeIntervalAndMaxNum) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTimestamp() {
		if err := oprot.WriteFieldBegin("endTimestamp", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:endTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EndTimestamp)); err != nil {
			return fmt.Errorf("%T.endTimestamp (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:endTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *PartitionTimeIntervalAndMaxNum) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxNum() {
		if err := oprot.WriteFieldBegin("maxNum", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:maxNum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MaxNum)); err != nil {
			return fmt.Errorf("%T.maxNum (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:maxNum: %s", p, err)
		}
	}
	return err
}

func (p *PartitionTimeIntervalAndMaxNum) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err := oprot.WriteFieldBegin("partitionId", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:partitionId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.PartitionId)); err != nil {
			return fmt.Errorf("%T.partitionId (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:partitionId: %s", p, err)
		}
	}
	return err
}

func (p *PartitionTimeIntervalAndMaxNum) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionTimeIntervalAndMaxNum(%+v)", *p)
}

type PeekMessageArg struct {
	ReceiptHandle                  string                          `thrift:"receiptHandle,1" json:"receiptHandle"`
	ReceiptHandleList              []string                        `thrift:"receiptHandleList,2" json:"receiptHandleList"`
	PartitionTimeIntervalAndMaxNum *PartitionTimeIntervalAndMaxNum `thrift:"partitionTimeIntervalAndMaxNum,3" json:"partitionTimeIntervalAndMaxNum"`
}

func NewPeekMessageArg() *PeekMessageArg {
	return &PeekMessageArg{}
}

func (p *PeekMessageArg) GetReceiptHandle() string {
	return p.ReceiptHandle
}

func (p *PeekMessageArg) GetReceiptHandleList() []string {
	return p.ReceiptHandleList
}

var PeekMessageArg_PartitionTimeIntervalAndMaxNum_DEFAULT *PartitionTimeIntervalAndMaxNum

func (p *PeekMessageArg) GetPartitionTimeIntervalAndMaxNum() *PartitionTimeIntervalAndMaxNum {
	if !p.IsSetPartitionTimeIntervalAndMaxNum() {
		return PeekMessageArg_PartitionTimeIntervalAndMaxNum_DEFAULT
	}
	return p.PartitionTimeIntervalAndMaxNum
}
func (p *PeekMessageArg) IsSetPartitionTimeIntervalAndMaxNum() bool {
	return p.PartitionTimeIntervalAndMaxNum != nil
}

func (p *PeekMessageArg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PeekMessageArg) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReceiptHandle = v
	}
	return nil
}

func (p *PeekMessageArg) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ReceiptHandleList = tSlice
	for i := 0; i < size; i++ {
		var _elem27 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem27 = v
		}
		p.ReceiptHandleList = append(p.ReceiptHandleList, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PeekMessageArg) ReadField3(iprot thrift.TProtocol) error {
	p.PartitionTimeIntervalAndMaxNum = &PartitionTimeIntervalAndMaxNum{}
	if err := p.PartitionTimeIntervalAndMaxNum.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PartitionTimeIntervalAndMaxNum, err)
	}
	return nil
}

func (p *PeekMessageArg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PeekMessageArg"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PeekMessageArg) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiptHandle", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:receiptHandle: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiptHandle)); err != nil {
		return fmt.Errorf("%T.receiptHandle (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:receiptHandle: %s", p, err)
	}
	return err
}

func (p *PeekMessageArg) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiptHandleList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:receiptHandleList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ReceiptHandleList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ReceiptHandleList {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:receiptHandleList: %s", p, err)
	}
	return err
}

func (p *PeekMessageArg) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionTimeIntervalAndMaxNum", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:partitionTimeIntervalAndMaxNum: %s", p, err)
	}
	if err := p.PartitionTimeIntervalAndMaxNum.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.PartitionTimeIntervalAndMaxNum, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:partitionTimeIntervalAndMaxNum: %s", p, err)
	}
	return err
}

func (p *PeekMessageArg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PeekMessageArg(%+v)", *p)
}

type PeekMessageRequest struct {
	QueueName      string          `thrift:"queueName,1,required" json:"queueName"`
	PeekMessageArg *PeekMessageArg `thrift:"peekMessageArg,2,required" json:"peekMessageArg"`
}

func NewPeekMessageRequest() *PeekMessageRequest {
	return &PeekMessageRequest{}
}

func (p *PeekMessageRequest) GetQueueName() string {
	return p.QueueName
}

var PeekMessageRequest_PeekMessageArg_DEFAULT *PeekMessageArg

func (p *PeekMessageRequest) GetPeekMessageArg() *PeekMessageArg {
	if !p.IsSetPeekMessageArg() {
		return PeekMessageRequest_PeekMessageArg_DEFAULT
	}
	return p.PeekMessageArg
}
func (p *PeekMessageRequest) IsSetPeekMessageArg() bool {
	return p.PeekMessageArg != nil
}

func (p *PeekMessageRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PeekMessageRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *PeekMessageRequest) ReadField2(iprot thrift.TProtocol) error {
	p.PeekMessageArg = &PeekMessageArg{}
	if err := p.PeekMessageArg.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PeekMessageArg, err)
	}
	return nil
}

func (p *PeekMessageRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PeekMessageRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PeekMessageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *PeekMessageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("peekMessageArg", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:peekMessageArg: %s", p, err)
	}
	if err := p.PeekMessageArg.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.PeekMessageArg, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:peekMessageArg: %s", p, err)
	}
	return err
}

func (p *PeekMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PeekMessageRequest(%+v)", *p)
}
