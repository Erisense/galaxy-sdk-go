// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package queue

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/emq/common"
	"github.com/XiaoMi/galaxy-sdk-go/emq/message"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = message.GoUnusedProtection__

type QueueService interface {
	common.EMQBaseService

	// Create queue;
	//
	//
	// Parameters:
	//  - Request
	CreateQueue(request *CreateQueueRequest) (r *CreateQueueResponse, err error)
	// Delete queue;
	//
	//
	// Parameters:
	//  - Request
	DeleteQueue(request *DeleteQueueRequest) (err error)
	// Purge queue;
	//
	//
	// Parameters:
	//  - Request
	PurgeQueue(request *PurgeQueueRequest) (err error)
	// Set queue attribute;
	//
	//
	// Parameters:
	//  - Request
	SetQueueAttribute(request *SetQueueAttributesRequest) (r *SetQueueAttributesResponse, err error)
	// Set queue quota;
	//
	//
	// Parameters:
	//  - Request
	SetQueueQuota(request *SetQueueQuotaRequest) (r *SetQueueQuotaResponse, err error)
	// Get queue info, include QueueAttribute, QueueState and QueueQuota;
	//
	//
	// Parameters:
	//  - Request
	GetQueueInfo(request *GetQueueInfoRequest) (r *GetQueueInfoResponse, err error)
	// List queue with queueNamePrefix;
	//
	//
	// Parameters:
	//  - Request
	ListQueue(request *ListQueueRequest) (r *ListQueueResponse, err error)
	// Remove queue redrive policy;
	//
	//
	// Parameters:
	//  - Request
	SetQueueRedrivePolicy(request *SetQueueRedrivePolicyRequest) (r *SetQueueRedrivePolicyResponse, err error)
	// Remove queue redrive policy;
	//
	//
	// Parameters:
	//  - Request
	RemoveQueueRedrivePolicy(request *RemoveQueueRedrivePolicyRequest) (err error)
	// Set permission for developer
	// FULL_CONTROL required to use this method
	//
	//
	// Parameters:
	//  - Request
	SetPermission(request *SetPermissionRequest) (err error)
	// Revoke permission for developer
	// FULL_CONTROL required to use this method
	//
	// Parameters:
	//  - Request
	RevokePermission(request *RevokePermissionRequest) (err error)
	// query permission for developer using this method
	// no permission required to use this method
	//
	// Parameters:
	//  - Request
	QueryPermission(request *QueryPermissionRequest) (r *QueryPermissionResponse, err error)
	// List permission for developer
	// ADMIN_QUEUE required to use this method
	//
	// Parameters:
	//  - Request
	QueryPermissionForId(request *QueryPermissionForIdRequest) (r *QueryPermissionForIdResponse, err error)
	// list permissions for all users of the queue
	// ADMIN_QUEUE required to use this method
	//
	//
	// Parameters:
	//  - Request
	ListPermissions(request *ListPermissionsRequest) (r *ListPermissionsResponse, err error)
	// create tag for queue
	// ADMIN_QUEUE required to use this method
	//
	//
	// Parameters:
	//  - Request
	CreateTag(request *CreateTagRequest) (r *CreateTagResponse, err error)
	// delete tag for queue
	// ADMIN_QUEUE required to use this method
	//
	//
	// Parameters:
	//  - Request
	DeleteTag(request *DeleteTagRequest) (err error)
	// get info of tag
	// ADMIN_QUEUE required to use this method
	//
	//
	// Parameters:
	//  - Request
	GetTagInfo(request *GetTagInfoRequest) (r *GetTagInfoResponse, err error)
	// list names of all tag of queue
	// ADMIN_QUEUE required to use this method
	//
	//
	// Parameters:
	//  - Request
	ListTag(request *ListTagRequest) (r *ListTagResponse, err error)
	// query metrics
	// FULL_CONTROL required to use this method
	//
	//
	// Parameters:
	//  - Request
	QueryMetric(request *QueryMetricRequest) (r *TimeSeriesData, err error)
	// query privileged queues
	// No permission required
	//
	//
	// Parameters:
	//  - Request
	QueryPrivilegedQueue(request *QueryPrivilegedQueueRequest) (r *QueryPrivilegedQueueResponse, err error)
	VerifyEMQAdmin() (r *VerifyEMQAdminResponse, err error)
	// Parameters:
	//  - Request
	VerifyEMQAdminRole(request *VerifyEMQAdminRoleRequest) (r *VerifyEMQAdminRoleResponse, err error)
	// copy queues using queues meta
	//
	//
	// Parameters:
	//  - Request
	CopyQueue(request *CopyQueueRequest) (err error)
	// Parameters:
	//  - QueueName
	GetQueueMeta(queueName string) (r *GetQueueMetaResponse, err error)
}

type QueueServiceClient struct {
	*common.EMQBaseServiceClient
}

func NewQueueServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *QueueServiceClient {
	return &QueueServiceClient{EMQBaseServiceClient: common.NewEMQBaseServiceClientFactory(t, f)}
}

func NewQueueServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *QueueServiceClient {
	return &QueueServiceClient{EMQBaseServiceClient: common.NewEMQBaseServiceClientProtocol(t, iprot, oprot)}
}

// Create queue;
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) CreateQueue(request *CreateQueueRequest) (r *CreateQueueResponse, err error) {
	if err = p.sendCreateQueue(request); err != nil {
		return
	}
	return p.recvCreateQueue()
}

func (p *QueueServiceClient) sendCreateQueue(request *CreateQueueRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createQueue", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateQueueArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvCreateQueue() (value *CreateQueueResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error28 error
		error28, err = error27.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error28
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createQueue failed: out of sequence response")
		return
	}
	result := CreateQueueResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Delete queue;
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) DeleteQueue(request *DeleteQueueRequest) (err error) {
	if err = p.sendDeleteQueue(request); err != nil {
		return
	}
	return p.recvDeleteQueue()
}

func (p *QueueServiceClient) sendDeleteQueue(request *DeleteQueueRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteQueue", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteQueueArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvDeleteQueue() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error30 error
		error30, err = error29.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error30
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteQueue failed: out of sequence response")
		return
	}
	result := DeleteQueueResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Purge queue;
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) PurgeQueue(request *PurgeQueueRequest) (err error) {
	if err = p.sendPurgeQueue(request); err != nil {
		return
	}
	return p.recvPurgeQueue()
}

func (p *QueueServiceClient) sendPurgeQueue(request *PurgeQueueRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("purgeQueue", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PurgeQueueArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvPurgeQueue() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		error32, err = error31.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error32
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "purgeQueue failed: out of sequence response")
		return
	}
	result := PurgeQueueResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Set queue attribute;
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) SetQueueAttribute(request *SetQueueAttributesRequest) (r *SetQueueAttributesResponse, err error) {
	if err = p.sendSetQueueAttribute(request); err != nil {
		return
	}
	return p.recvSetQueueAttribute()
}

func (p *QueueServiceClient) sendSetQueueAttribute(request *SetQueueAttributesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setQueueAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetQueueAttributeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvSetQueueAttribute() (value *SetQueueAttributesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error34 error
		error34, err = error33.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error34
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setQueueAttribute failed: out of sequence response")
		return
	}
	result := SetQueueAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Set queue quota;
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) SetQueueQuota(request *SetQueueQuotaRequest) (r *SetQueueQuotaResponse, err error) {
	if err = p.sendSetQueueQuota(request); err != nil {
		return
	}
	return p.recvSetQueueQuota()
}

func (p *QueueServiceClient) sendSetQueueQuota(request *SetQueueQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setQueueQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetQueueQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvSetQueueQuota() (value *SetQueueQuotaResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error36 error
		error36, err = error35.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error36
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setQueueQuota failed: out of sequence response")
		return
	}
	result := SetQueueQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Get queue info, include QueueAttribute, QueueState and QueueQuota;
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) GetQueueInfo(request *GetQueueInfoRequest) (r *GetQueueInfoResponse, err error) {
	if err = p.sendGetQueueInfo(request); err != nil {
		return
	}
	return p.recvGetQueueInfo()
}

func (p *QueueServiceClient) sendGetQueueInfo(request *GetQueueInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getQueueInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetQueueInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvGetQueueInfo() (value *GetQueueInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error38 error
		error38, err = error37.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error38
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getQueueInfo failed: out of sequence response")
		return
	}
	result := GetQueueInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// List queue with queueNamePrefix;
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) ListQueue(request *ListQueueRequest) (r *ListQueueResponse, err error) {
	if err = p.sendListQueue(request); err != nil {
		return
	}
	return p.recvListQueue()
}

func (p *QueueServiceClient) sendListQueue(request *ListQueueRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listQueue", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListQueueArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvListQueue() (value *ListQueueResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error40 error
		error40, err = error39.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error40
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listQueue failed: out of sequence response")
		return
	}
	result := ListQueueResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Remove queue redrive policy;
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) SetQueueRedrivePolicy(request *SetQueueRedrivePolicyRequest) (r *SetQueueRedrivePolicyResponse, err error) {
	if err = p.sendSetQueueRedrivePolicy(request); err != nil {
		return
	}
	return p.recvSetQueueRedrivePolicy()
}

func (p *QueueServiceClient) sendSetQueueRedrivePolicy(request *SetQueueRedrivePolicyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setQueueRedrivePolicy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetQueueRedrivePolicyArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvSetQueueRedrivePolicy() (value *SetQueueRedrivePolicyResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error42 error
		error42, err = error41.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error42
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setQueueRedrivePolicy failed: out of sequence response")
		return
	}
	result := SetQueueRedrivePolicyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Remove queue redrive policy;
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) RemoveQueueRedrivePolicy(request *RemoveQueueRedrivePolicyRequest) (err error) {
	if err = p.sendRemoveQueueRedrivePolicy(request); err != nil {
		return
	}
	return p.recvRemoveQueueRedrivePolicy()
}

func (p *QueueServiceClient) sendRemoveQueueRedrivePolicy(request *RemoveQueueRedrivePolicyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeQueueRedrivePolicy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoveQueueRedrivePolicyArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvRemoveQueueRedrivePolicy() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error44 error
		error44, err = error43.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error44
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeQueueRedrivePolicy failed: out of sequence response")
		return
	}
	result := RemoveQueueRedrivePolicyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Set permission for developer
// FULL_CONTROL required to use this method
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) SetPermission(request *SetPermissionRequest) (err error) {
	if err = p.sendSetPermission(request); err != nil {
		return
	}
	return p.recvSetPermission()
}

func (p *QueueServiceClient) sendSetPermission(request *SetPermissionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setPermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetPermissionArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvSetPermission() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error46 error
		error46, err = error45.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error46
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setPermission failed: out of sequence response")
		return
	}
	result := SetPermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Revoke permission for developer
// FULL_CONTROL required to use this method
//
// Parameters:
//  - Request
func (p *QueueServiceClient) RevokePermission(request *RevokePermissionRequest) (err error) {
	if err = p.sendRevokePermission(request); err != nil {
		return
	}
	return p.recvRevokePermission()
}

func (p *QueueServiceClient) sendRevokePermission(request *RevokePermissionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revokePermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RevokePermissionArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvRevokePermission() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error48 error
		error48, err = error47.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error48
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revokePermission failed: out of sequence response")
		return
	}
	result := RevokePermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// query permission for developer using this method
// no permission required to use this method
//
// Parameters:
//  - Request
func (p *QueueServiceClient) QueryPermission(request *QueryPermissionRequest) (r *QueryPermissionResponse, err error) {
	if err = p.sendQueryPermission(request); err != nil {
		return
	}
	return p.recvQueryPermission()
}

func (p *QueueServiceClient) sendQueryPermission(request *QueryPermissionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryPermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryPermissionArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvQueryPermission() (value *QueryPermissionResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error49 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error50 error
		error50, err = error49.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error50
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryPermission failed: out of sequence response")
		return
	}
	result := QueryPermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// List permission for developer
// ADMIN_QUEUE required to use this method
//
// Parameters:
//  - Request
func (p *QueueServiceClient) QueryPermissionForId(request *QueryPermissionForIdRequest) (r *QueryPermissionForIdResponse, err error) {
	if err = p.sendQueryPermissionForId(request); err != nil {
		return
	}
	return p.recvQueryPermissionForId()
}

func (p *QueueServiceClient) sendQueryPermissionForId(request *QueryPermissionForIdRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryPermissionForId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryPermissionForIdArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvQueryPermissionForId() (value *QueryPermissionForIdResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error52 error
		error52, err = error51.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error52
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryPermissionForId failed: out of sequence response")
		return
	}
	result := QueryPermissionForIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// list permissions for all users of the queue
// ADMIN_QUEUE required to use this method
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) ListPermissions(request *ListPermissionsRequest) (r *ListPermissionsResponse, err error) {
	if err = p.sendListPermissions(request); err != nil {
		return
	}
	return p.recvListPermissions()
}

func (p *QueueServiceClient) sendListPermissions(request *ListPermissionsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listPermissions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListPermissionsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvListPermissions() (value *ListPermissionsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error54 error
		error54, err = error53.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error54
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listPermissions failed: out of sequence response")
		return
	}
	result := ListPermissionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// create tag for queue
// ADMIN_QUEUE required to use this method
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) CreateTag(request *CreateTagRequest) (r *CreateTagResponse, err error) {
	if err = p.sendCreateTag(request); err != nil {
		return
	}
	return p.recvCreateTag()
}

func (p *QueueServiceClient) sendCreateTag(request *CreateTagRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createTag", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateTagArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvCreateTag() (value *CreateTagResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createTag failed: out of sequence response")
		return
	}
	result := CreateTagResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// delete tag for queue
// ADMIN_QUEUE required to use this method
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) DeleteTag(request *DeleteTagRequest) (err error) {
	if err = p.sendDeleteTag(request); err != nil {
		return
	}
	return p.recvDeleteTag()
}

func (p *QueueServiceClient) sendDeleteTag(request *DeleteTagRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteTag", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteTagArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvDeleteTag() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error57 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error58 error
		error58, err = error57.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error58
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteTag failed: out of sequence response")
		return
	}
	result := DeleteTagResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// get info of tag
// ADMIN_QUEUE required to use this method
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) GetTagInfo(request *GetTagInfoRequest) (r *GetTagInfoResponse, err error) {
	if err = p.sendGetTagInfo(request); err != nil {
		return
	}
	return p.recvGetTagInfo()
}

func (p *QueueServiceClient) sendGetTagInfo(request *GetTagInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTagInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTagInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvGetTagInfo() (value *GetTagInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error60 error
		error60, err = error59.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error60
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTagInfo failed: out of sequence response")
		return
	}
	result := GetTagInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// list names of all tag of queue
// ADMIN_QUEUE required to use this method
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) ListTag(request *ListTagRequest) (r *ListTagResponse, err error) {
	if err = p.sendListTag(request); err != nil {
		return
	}
	return p.recvListTag()
}

func (p *QueueServiceClient) sendListTag(request *ListTagRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listTag", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListTagArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvListTag() (value *ListTagResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error61 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error62 error
		error62, err = error61.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error62
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listTag failed: out of sequence response")
		return
	}
	result := ListTagResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// query metrics
// FULL_CONTROL required to use this method
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) QueryMetric(request *QueryMetricRequest) (r *TimeSeriesData, err error) {
	if err = p.sendQueryMetric(request); err != nil {
		return
	}
	return p.recvQueryMetric()
}

func (p *QueueServiceClient) sendQueryMetric(request *QueryMetricRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryMetric", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryMetricArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvQueryMetric() (value *TimeSeriesData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error63 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error64 error
		error64, err = error63.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error64
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryMetric failed: out of sequence response")
		return
	}
	result := QueryMetricResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// query privileged queues
// No permission required
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) QueryPrivilegedQueue(request *QueryPrivilegedQueueRequest) (r *QueryPrivilegedQueueResponse, err error) {
	if err = p.sendQueryPrivilegedQueue(request); err != nil {
		return
	}
	return p.recvQueryPrivilegedQueue()
}

func (p *QueueServiceClient) sendQueryPrivilegedQueue(request *QueryPrivilegedQueueRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryPrivilegedQueue", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryPrivilegedQueueArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvQueryPrivilegedQueue() (value *QueryPrivilegedQueueResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error65 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error66 error
		error66, err = error65.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error66
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryPrivilegedQueue failed: out of sequence response")
		return
	}
	result := QueryPrivilegedQueueResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *QueueServiceClient) VerifyEMQAdmin() (r *VerifyEMQAdminResponse, err error) {
	if err = p.sendVerifyEMQAdmin(); err != nil {
		return
	}
	return p.recvVerifyEMQAdmin()
}

func (p *QueueServiceClient) sendVerifyEMQAdmin() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("verifyEMQAdmin", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := VerifyEMQAdminArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvVerifyEMQAdmin() (value *VerifyEMQAdminResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error67 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error68 error
		error68, err = error67.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error68
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "verifyEMQAdmin failed: out of sequence response")
		return
	}
	result := VerifyEMQAdminResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *QueueServiceClient) VerifyEMQAdminRole(request *VerifyEMQAdminRoleRequest) (r *VerifyEMQAdminRoleResponse, err error) {
	if err = p.sendVerifyEMQAdminRole(request); err != nil {
		return
	}
	return p.recvVerifyEMQAdminRole()
}

func (p *QueueServiceClient) sendVerifyEMQAdminRole(request *VerifyEMQAdminRoleRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("verifyEMQAdminRole", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := VerifyEMQAdminRoleArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvVerifyEMQAdminRole() (value *VerifyEMQAdminRoleResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error69 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error70 error
		error70, err = error69.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error70
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "verifyEMQAdminRole failed: out of sequence response")
		return
	}
	result := VerifyEMQAdminRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// copy queues using queues meta
//
//
// Parameters:
//  - Request
func (p *QueueServiceClient) CopyQueue(request *CopyQueueRequest) (err error) {
	if err = p.sendCopyQueue(request); err != nil {
		return
	}
	return p.recvCopyQueue()
}

func (p *QueueServiceClient) sendCopyQueue(request *CopyQueueRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("copyQueue", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CopyQueueArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvCopyQueue() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error71 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error72 error
		error72, err = error71.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error72
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "copyQueue failed: out of sequence response")
		return
	}
	result := CopyQueueResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - QueueName
func (p *QueueServiceClient) GetQueueMeta(queueName string) (r *GetQueueMetaResponse, err error) {
	if err = p.sendGetQueueMeta(queueName); err != nil {
		return
	}
	return p.recvGetQueueMeta()
}

func (p *QueueServiceClient) sendGetQueueMeta(queueName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getQueueMeta", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetQueueMetaArgs{
		QueueName: queueName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QueueServiceClient) recvGetQueueMeta() (value *GetQueueMetaResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error73 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error74 error
		error74, err = error73.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error74
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getQueueMeta failed: out of sequence response")
		return
	}
	result := GetQueueMetaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type QueueServiceProcessor struct {
	*common.EMQBaseServiceProcessor
}

func NewQueueServiceProcessor(handler QueueService) *QueueServiceProcessor {
	self75 := &QueueServiceProcessor{common.NewEMQBaseServiceProcessor(handler)}
	self75.AddToProcessorMap("createQueue", &queueServiceProcessorCreateQueue{handler: handler})
	self75.AddToProcessorMap("deleteQueue", &queueServiceProcessorDeleteQueue{handler: handler})
	self75.AddToProcessorMap("purgeQueue", &queueServiceProcessorPurgeQueue{handler: handler})
	self75.AddToProcessorMap("setQueueAttribute", &queueServiceProcessorSetQueueAttribute{handler: handler})
	self75.AddToProcessorMap("setQueueQuota", &queueServiceProcessorSetQueueQuota{handler: handler})
	self75.AddToProcessorMap("getQueueInfo", &queueServiceProcessorGetQueueInfo{handler: handler})
	self75.AddToProcessorMap("listQueue", &queueServiceProcessorListQueue{handler: handler})
	self75.AddToProcessorMap("setQueueRedrivePolicy", &queueServiceProcessorSetQueueRedrivePolicy{handler: handler})
	self75.AddToProcessorMap("removeQueueRedrivePolicy", &queueServiceProcessorRemoveQueueRedrivePolicy{handler: handler})
	self75.AddToProcessorMap("setPermission", &queueServiceProcessorSetPermission{handler: handler})
	self75.AddToProcessorMap("revokePermission", &queueServiceProcessorRevokePermission{handler: handler})
	self75.AddToProcessorMap("queryPermission", &queueServiceProcessorQueryPermission{handler: handler})
	self75.AddToProcessorMap("queryPermissionForId", &queueServiceProcessorQueryPermissionForId{handler: handler})
	self75.AddToProcessorMap("listPermissions", &queueServiceProcessorListPermissions{handler: handler})
	self75.AddToProcessorMap("createTag", &queueServiceProcessorCreateTag{handler: handler})
	self75.AddToProcessorMap("deleteTag", &queueServiceProcessorDeleteTag{handler: handler})
	self75.AddToProcessorMap("getTagInfo", &queueServiceProcessorGetTagInfo{handler: handler})
	self75.AddToProcessorMap("listTag", &queueServiceProcessorListTag{handler: handler})
	self75.AddToProcessorMap("queryMetric", &queueServiceProcessorQueryMetric{handler: handler})
	self75.AddToProcessorMap("queryPrivilegedQueue", &queueServiceProcessorQueryPrivilegedQueue{handler: handler})
	self75.AddToProcessorMap("verifyEMQAdmin", &queueServiceProcessorVerifyEMQAdmin{handler: handler})
	self75.AddToProcessorMap("verifyEMQAdminRole", &queueServiceProcessorVerifyEMQAdminRole{handler: handler})
	self75.AddToProcessorMap("copyQueue", &queueServiceProcessorCopyQueue{handler: handler})
	self75.AddToProcessorMap("getQueueMeta", &queueServiceProcessorGetQueueMeta{handler: handler})
	return self75
}

type queueServiceProcessorCreateQueue struct {
	handler QueueService
}

func (p *queueServiceProcessorCreateQueue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateQueueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createQueue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateQueueResult{}
	var retval *CreateQueueResponse
	var err2 error
	if retval, err2 = p.handler.CreateQueue(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createQueue: "+err2.Error())
			oprot.WriteMessageBegin("createQueue", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createQueue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorDeleteQueue struct {
	handler QueueService
}

func (p *queueServiceProcessorDeleteQueue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteQueueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteQueue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteQueueResult{}
	var err2 error
	if err2 = p.handler.DeleteQueue(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteQueue: "+err2.Error())
			oprot.WriteMessageBegin("deleteQueue", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteQueue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorPurgeQueue struct {
	handler QueueService
}

func (p *queueServiceProcessorPurgeQueue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PurgeQueueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("purgeQueue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PurgeQueueResult{}
	var err2 error
	if err2 = p.handler.PurgeQueue(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing purgeQueue: "+err2.Error())
			oprot.WriteMessageBegin("purgeQueue", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("purgeQueue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorSetQueueAttribute struct {
	handler QueueService
}

func (p *queueServiceProcessorSetQueueAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetQueueAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setQueueAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetQueueAttributeResult{}
	var retval *SetQueueAttributesResponse
	var err2 error
	if retval, err2 = p.handler.SetQueueAttribute(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setQueueAttribute: "+err2.Error())
			oprot.WriteMessageBegin("setQueueAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("setQueueAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorSetQueueQuota struct {
	handler QueueService
}

func (p *queueServiceProcessorSetQueueQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetQueueQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setQueueQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetQueueQuotaResult{}
	var retval *SetQueueQuotaResponse
	var err2 error
	if retval, err2 = p.handler.SetQueueQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setQueueQuota: "+err2.Error())
			oprot.WriteMessageBegin("setQueueQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("setQueueQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorGetQueueInfo struct {
	handler QueueService
}

func (p *queueServiceProcessorGetQueueInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetQueueInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getQueueInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetQueueInfoResult{}
	var retval *GetQueueInfoResponse
	var err2 error
	if retval, err2 = p.handler.GetQueueInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueueInfo: "+err2.Error())
			oprot.WriteMessageBegin("getQueueInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getQueueInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorListQueue struct {
	handler QueueService
}

func (p *queueServiceProcessorListQueue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListQueueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listQueue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListQueueResult{}
	var retval *ListQueueResponse
	var err2 error
	if retval, err2 = p.handler.ListQueue(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listQueue: "+err2.Error())
			oprot.WriteMessageBegin("listQueue", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listQueue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorSetQueueRedrivePolicy struct {
	handler QueueService
}

func (p *queueServiceProcessorSetQueueRedrivePolicy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetQueueRedrivePolicyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setQueueRedrivePolicy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetQueueRedrivePolicyResult{}
	var retval *SetQueueRedrivePolicyResponse
	var err2 error
	if retval, err2 = p.handler.SetQueueRedrivePolicy(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setQueueRedrivePolicy: "+err2.Error())
			oprot.WriteMessageBegin("setQueueRedrivePolicy", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("setQueueRedrivePolicy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorRemoveQueueRedrivePolicy struct {
	handler QueueService
}

func (p *queueServiceProcessorRemoveQueueRedrivePolicy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoveQueueRedrivePolicyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeQueueRedrivePolicy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoveQueueRedrivePolicyResult{}
	var err2 error
	if err2 = p.handler.RemoveQueueRedrivePolicy(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeQueueRedrivePolicy: "+err2.Error())
			oprot.WriteMessageBegin("removeQueueRedrivePolicy", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeQueueRedrivePolicy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorSetPermission struct {
	handler QueueService
}

func (p *queueServiceProcessorSetPermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetPermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setPermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetPermissionResult{}
	var err2 error
	if err2 = p.handler.SetPermission(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setPermission: "+err2.Error())
			oprot.WriteMessageBegin("setPermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setPermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorRevokePermission struct {
	handler QueueService
}

func (p *queueServiceProcessorRevokePermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RevokePermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revokePermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RevokePermissionResult{}
	var err2 error
	if err2 = p.handler.RevokePermission(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokePermission: "+err2.Error())
			oprot.WriteMessageBegin("revokePermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("revokePermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorQueryPermission struct {
	handler QueueService
}

func (p *queueServiceProcessorQueryPermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryPermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryPermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryPermissionResult{}
	var retval *QueryPermissionResponse
	var err2 error
	if retval, err2 = p.handler.QueryPermission(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryPermission: "+err2.Error())
			oprot.WriteMessageBegin("queryPermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryPermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorQueryPermissionForId struct {
	handler QueueService
}

func (p *queueServiceProcessorQueryPermissionForId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryPermissionForIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryPermissionForId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryPermissionForIdResult{}
	var retval *QueryPermissionForIdResponse
	var err2 error
	if retval, err2 = p.handler.QueryPermissionForId(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryPermissionForId: "+err2.Error())
			oprot.WriteMessageBegin("queryPermissionForId", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryPermissionForId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorListPermissions struct {
	handler QueueService
}

func (p *queueServiceProcessorListPermissions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListPermissionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listPermissions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListPermissionsResult{}
	var retval *ListPermissionsResponse
	var err2 error
	if retval, err2 = p.handler.ListPermissions(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listPermissions: "+err2.Error())
			oprot.WriteMessageBegin("listPermissions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listPermissions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorCreateTag struct {
	handler QueueService
}

func (p *queueServiceProcessorCreateTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateTagResult{}
	var retval *CreateTagResponse
	var err2 error
	if retval, err2 = p.handler.CreateTag(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTag: "+err2.Error())
			oprot.WriteMessageBegin("createTag", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorDeleteTag struct {
	handler QueueService
}

func (p *queueServiceProcessorDeleteTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteTagResult{}
	var err2 error
	if err2 = p.handler.DeleteTag(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTag: "+err2.Error())
			oprot.WriteMessageBegin("deleteTag", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorGetTagInfo struct {
	handler QueueService
}

func (p *queueServiceProcessorGetTagInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTagInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTagInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTagInfoResult{}
	var retval *GetTagInfoResponse
	var err2 error
	if retval, err2 = p.handler.GetTagInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTagInfo: "+err2.Error())
			oprot.WriteMessageBegin("getTagInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTagInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorListTag struct {
	handler QueueService
}

func (p *queueServiceProcessorListTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListTagResult{}
	var retval *ListTagResponse
	var err2 error
	if retval, err2 = p.handler.ListTag(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTag: "+err2.Error())
			oprot.WriteMessageBegin("listTag", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorQueryMetric struct {
	handler QueueService
}

func (p *queueServiceProcessorQueryMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryMetricArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryMetricResult{}
	var retval *TimeSeriesData
	var err2 error
	if retval, err2 = p.handler.QueryMetric(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryMetric: "+err2.Error())
			oprot.WriteMessageBegin("queryMetric", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryMetric", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorQueryPrivilegedQueue struct {
	handler QueueService
}

func (p *queueServiceProcessorQueryPrivilegedQueue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryPrivilegedQueueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryPrivilegedQueue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryPrivilegedQueueResult{}
	var retval *QueryPrivilegedQueueResponse
	var err2 error
	if retval, err2 = p.handler.QueryPrivilegedQueue(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryPrivilegedQueue: "+err2.Error())
			oprot.WriteMessageBegin("queryPrivilegedQueue", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryPrivilegedQueue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorVerifyEMQAdmin struct {
	handler QueueService
}

func (p *queueServiceProcessorVerifyEMQAdmin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VerifyEMQAdminArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("verifyEMQAdmin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := VerifyEMQAdminResult{}
	var retval *VerifyEMQAdminResponse
	var err2 error
	if retval, err2 = p.handler.VerifyEMQAdmin(); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyEMQAdmin: "+err2.Error())
			oprot.WriteMessageBegin("verifyEMQAdmin", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("verifyEMQAdmin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorVerifyEMQAdminRole struct {
	handler QueueService
}

func (p *queueServiceProcessorVerifyEMQAdminRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VerifyEMQAdminRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("verifyEMQAdminRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := VerifyEMQAdminRoleResult{}
	var retval *VerifyEMQAdminRoleResponse
	var err2 error
	if retval, err2 = p.handler.VerifyEMQAdminRole(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyEMQAdminRole: "+err2.Error())
			oprot.WriteMessageBegin("verifyEMQAdminRole", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("verifyEMQAdminRole", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorCopyQueue struct {
	handler QueueService
}

func (p *queueServiceProcessorCopyQueue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CopyQueueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("copyQueue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CopyQueueResult{}
	var err2 error
	if err2 = p.handler.CopyQueue(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing copyQueue: "+err2.Error())
			oprot.WriteMessageBegin("copyQueue", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("copyQueue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type queueServiceProcessorGetQueueMeta struct {
	handler QueueService
}

func (p *queueServiceProcessorGetQueueMeta) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetQueueMetaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getQueueMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetQueueMetaResult{}
	var retval *GetQueueMetaResponse
	var err2 error
	if retval, err2 = p.handler.GetQueueMeta(args.QueueName); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueueMeta: "+err2.Error())
			oprot.WriteMessageBegin("getQueueMeta", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getQueueMeta", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type CreateQueueArgs struct {
	Request *CreateQueueRequest `thrift:"request,1" json:"request"`
}

func NewCreateQueueArgs() *CreateQueueArgs {
	return &CreateQueueArgs{}
}

var CreateQueueArgs_Request_DEFAULT *CreateQueueRequest

func (p *CreateQueueArgs) GetRequest() *CreateQueueRequest {
	if !p.IsSetRequest() {
		return CreateQueueArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CreateQueueArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CreateQueueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateQueueArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &CreateQueueRequest{
		DeleteMessageForce: true,
	}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *CreateQueueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createQueue_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateQueueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *CreateQueueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateQueueArgs(%+v)", *p)
}

type CreateQueueResult struct {
	Success *CreateQueueResponse              `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewCreateQueueResult() *CreateQueueResult {
	return &CreateQueueResult{}
}

var CreateQueueResult_Success_DEFAULT *CreateQueueResponse

func (p *CreateQueueResult) GetSuccess() *CreateQueueResponse {
	if !p.IsSetSuccess() {
		return CreateQueueResult_Success_DEFAULT
	}
	return p.Success
}

var CreateQueueResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *CreateQueueResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return CreateQueueResult_E_DEFAULT
	}
	return p.E
}
func (p *CreateQueueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateQueueResult) IsSetE() bool {
	return p.E != nil
}

func (p *CreateQueueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateQueueResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateQueueResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateQueueResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CreateQueueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createQueue_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateQueueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateQueueResult(%+v)", *p)
}

type DeleteQueueArgs struct {
	Request *DeleteQueueRequest `thrift:"request,1" json:"request"`
}

func NewDeleteQueueArgs() *DeleteQueueArgs {
	return &DeleteQueueArgs{}
}

var DeleteQueueArgs_Request_DEFAULT *DeleteQueueRequest

func (p *DeleteQueueArgs) GetRequest() *DeleteQueueRequest {
	if !p.IsSetRequest() {
		return DeleteQueueArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DeleteQueueArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DeleteQueueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteQueueArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteQueueRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DeleteQueueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteQueue_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteQueueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DeleteQueueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteQueueArgs(%+v)", *p)
}

type DeleteQueueResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewDeleteQueueResult() *DeleteQueueResult {
	return &DeleteQueueResult{}
}

var DeleteQueueResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *DeleteQueueResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return DeleteQueueResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteQueueResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteQueueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteQueueResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteQueueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteQueue_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteQueueResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteQueueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteQueueResult(%+v)", *p)
}

type PurgeQueueArgs struct {
	Request *PurgeQueueRequest `thrift:"request,1" json:"request"`
}

func NewPurgeQueueArgs() *PurgeQueueArgs {
	return &PurgeQueueArgs{}
}

var PurgeQueueArgs_Request_DEFAULT *PurgeQueueRequest

func (p *PurgeQueueArgs) GetRequest() *PurgeQueueRequest {
	if !p.IsSetRequest() {
		return PurgeQueueArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PurgeQueueArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PurgeQueueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PurgeQueueArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &PurgeQueueRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *PurgeQueueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("purgeQueue_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PurgeQueueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *PurgeQueueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PurgeQueueArgs(%+v)", *p)
}

type PurgeQueueResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewPurgeQueueResult() *PurgeQueueResult {
	return &PurgeQueueResult{}
}

var PurgeQueueResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *PurgeQueueResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return PurgeQueueResult_E_DEFAULT
	}
	return p.E
}
func (p *PurgeQueueResult) IsSetE() bool {
	return p.E != nil
}

func (p *PurgeQueueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PurgeQueueResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *PurgeQueueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("purgeQueue_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PurgeQueueResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *PurgeQueueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PurgeQueueResult(%+v)", *p)
}

type SetQueueAttributeArgs struct {
	Request *SetQueueAttributesRequest `thrift:"request,1" json:"request"`
}

func NewSetQueueAttributeArgs() *SetQueueAttributeArgs {
	return &SetQueueAttributeArgs{}
}

var SetQueueAttributeArgs_Request_DEFAULT *SetQueueAttributesRequest

func (p *SetQueueAttributeArgs) GetRequest() *SetQueueAttributesRequest {
	if !p.IsSetRequest() {
		return SetQueueAttributeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SetQueueAttributeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SetQueueAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueAttributeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &SetQueueAttributesRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *SetQueueAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setQueueAttribute_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *SetQueueAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueAttributeArgs(%+v)", *p)
}

type SetQueueAttributeResult struct {
	Success *SetQueueAttributesResponse       `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewSetQueueAttributeResult() *SetQueueAttributeResult {
	return &SetQueueAttributeResult{}
}

var SetQueueAttributeResult_Success_DEFAULT *SetQueueAttributesResponse

func (p *SetQueueAttributeResult) GetSuccess() *SetQueueAttributesResponse {
	if !p.IsSetSuccess() {
		return SetQueueAttributeResult_Success_DEFAULT
	}
	return p.Success
}

var SetQueueAttributeResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *SetQueueAttributeResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return SetQueueAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *SetQueueAttributeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetQueueAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetQueueAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueAttributeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SetQueueAttributesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *SetQueueAttributeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetQueueAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setQueueAttribute_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueAttributeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SetQueueAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetQueueAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueAttributeResult(%+v)", *p)
}

type SetQueueQuotaArgs struct {
	Request *SetQueueQuotaRequest `thrift:"request,1" json:"request"`
}

func NewSetQueueQuotaArgs() *SetQueueQuotaArgs {
	return &SetQueueQuotaArgs{}
}

var SetQueueQuotaArgs_Request_DEFAULT *SetQueueQuotaRequest

func (p *SetQueueQuotaArgs) GetRequest() *SetQueueQuotaRequest {
	if !p.IsSetRequest() {
		return SetQueueQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SetQueueQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SetQueueQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &SetQueueQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *SetQueueQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setQueueQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *SetQueueQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueQuotaArgs(%+v)", *p)
}

type SetQueueQuotaResult struct {
	Success *SetQueueQuotaResponse            `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewSetQueueQuotaResult() *SetQueueQuotaResult {
	return &SetQueueQuotaResult{}
}

var SetQueueQuotaResult_Success_DEFAULT *SetQueueQuotaResponse

func (p *SetQueueQuotaResult) GetSuccess() *SetQueueQuotaResponse {
	if !p.IsSetSuccess() {
		return SetQueueQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var SetQueueQuotaResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *SetQueueQuotaResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return SetQueueQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *SetQueueQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetQueueQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetQueueQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SetQueueQuotaResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *SetQueueQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetQueueQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setQueueQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SetQueueQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetQueueQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueQuotaResult(%+v)", *p)
}

type GetQueueInfoArgs struct {
	Request *GetQueueInfoRequest `thrift:"request,1" json:"request"`
}

func NewGetQueueInfoArgs() *GetQueueInfoArgs {
	return &GetQueueInfoArgs{}
}

var GetQueueInfoArgs_Request_DEFAULT *GetQueueInfoRequest

func (p *GetQueueInfoArgs) GetRequest() *GetQueueInfoRequest {
	if !p.IsSetRequest() {
		return GetQueueInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetQueueInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetQueueInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueueInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetQueueInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetQueueInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueueInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueueInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetQueueInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueInfoArgs(%+v)", *p)
}

type GetQueueInfoResult struct {
	Success *GetQueueInfoResponse             `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewGetQueueInfoResult() *GetQueueInfoResult {
	return &GetQueueInfoResult{}
}

var GetQueueInfoResult_Success_DEFAULT *GetQueueInfoResponse

func (p *GetQueueInfoResult) GetSuccess() *GetQueueInfoResponse {
	if !p.IsSetSuccess() {
		return GetQueueInfoResult_Success_DEFAULT
	}
	return p.Success
}

var GetQueueInfoResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *GetQueueInfoResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return GetQueueInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *GetQueueInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetQueueInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetQueueInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueueInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetQueueInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetQueueInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetQueueInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueueInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueueInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueInfoResult(%+v)", *p)
}

type ListQueueArgs struct {
	Request *ListQueueRequest `thrift:"request,1" json:"request"`
}

func NewListQueueArgs() *ListQueueArgs {
	return &ListQueueArgs{}
}

var ListQueueArgs_Request_DEFAULT *ListQueueRequest

func (p *ListQueueArgs) GetRequest() *ListQueueRequest {
	if !p.IsSetRequest() {
		return ListQueueArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ListQueueArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ListQueueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListQueueArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ListQueueRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ListQueueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listQueue_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListQueueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *ListQueueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListQueueArgs(%+v)", *p)
}

type ListQueueResult struct {
	Success *ListQueueResponse                `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewListQueueResult() *ListQueueResult {
	return &ListQueueResult{}
}

var ListQueueResult_Success_DEFAULT *ListQueueResponse

func (p *ListQueueResult) GetSuccess() *ListQueueResponse {
	if !p.IsSetSuccess() {
		return ListQueueResult_Success_DEFAULT
	}
	return p.Success
}

var ListQueueResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *ListQueueResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return ListQueueResult_E_DEFAULT
	}
	return p.E
}
func (p *ListQueueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListQueueResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListQueueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListQueueResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListQueueResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListQueueResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListQueueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listQueue_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListQueueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListQueueResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListQueueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListQueueResult(%+v)", *p)
}

type SetQueueRedrivePolicyArgs struct {
	Request *SetQueueRedrivePolicyRequest `thrift:"request,1" json:"request"`
}

func NewSetQueueRedrivePolicyArgs() *SetQueueRedrivePolicyArgs {
	return &SetQueueRedrivePolicyArgs{}
}

var SetQueueRedrivePolicyArgs_Request_DEFAULT *SetQueueRedrivePolicyRequest

func (p *SetQueueRedrivePolicyArgs) GetRequest() *SetQueueRedrivePolicyRequest {
	if !p.IsSetRequest() {
		return SetQueueRedrivePolicyArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SetQueueRedrivePolicyArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SetQueueRedrivePolicyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &SetQueueRedrivePolicyRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setQueueRedrivePolicy_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *SetQueueRedrivePolicyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueRedrivePolicyArgs(%+v)", *p)
}

type SetQueueRedrivePolicyResult struct {
	Success *SetQueueRedrivePolicyResponse    `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewSetQueueRedrivePolicyResult() *SetQueueRedrivePolicyResult {
	return &SetQueueRedrivePolicyResult{}
}

var SetQueueRedrivePolicyResult_Success_DEFAULT *SetQueueRedrivePolicyResponse

func (p *SetQueueRedrivePolicyResult) GetSuccess() *SetQueueRedrivePolicyResponse {
	if !p.IsSetSuccess() {
		return SetQueueRedrivePolicyResult_Success_DEFAULT
	}
	return p.Success
}

var SetQueueRedrivePolicyResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *SetQueueRedrivePolicyResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return SetQueueRedrivePolicyResult_E_DEFAULT
	}
	return p.E
}
func (p *SetQueueRedrivePolicyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetQueueRedrivePolicyResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetQueueRedrivePolicyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SetQueueRedrivePolicyResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setQueueRedrivePolicy_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SetQueueRedrivePolicyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetQueueRedrivePolicyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueRedrivePolicyResult(%+v)", *p)
}

type RemoveQueueRedrivePolicyArgs struct {
	Request *RemoveQueueRedrivePolicyRequest `thrift:"request,1" json:"request"`
}

func NewRemoveQueueRedrivePolicyArgs() *RemoveQueueRedrivePolicyArgs {
	return &RemoveQueueRedrivePolicyArgs{}
}

var RemoveQueueRedrivePolicyArgs_Request_DEFAULT *RemoveQueueRedrivePolicyRequest

func (p *RemoveQueueRedrivePolicyArgs) GetRequest() *RemoveQueueRedrivePolicyRequest {
	if !p.IsSetRequest() {
		return RemoveQueueRedrivePolicyArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *RemoveQueueRedrivePolicyArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *RemoveQueueRedrivePolicyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveQueueRedrivePolicyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &RemoveQueueRedrivePolicyRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *RemoveQueueRedrivePolicyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeQueueRedrivePolicy_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveQueueRedrivePolicyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *RemoveQueueRedrivePolicyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveQueueRedrivePolicyArgs(%+v)", *p)
}

type RemoveQueueRedrivePolicyResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewRemoveQueueRedrivePolicyResult() *RemoveQueueRedrivePolicyResult {
	return &RemoveQueueRedrivePolicyResult{}
}

var RemoveQueueRedrivePolicyResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *RemoveQueueRedrivePolicyResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return RemoveQueueRedrivePolicyResult_E_DEFAULT
	}
	return p.E
}
func (p *RemoveQueueRedrivePolicyResult) IsSetE() bool {
	return p.E != nil
}

func (p *RemoveQueueRedrivePolicyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveQueueRedrivePolicyResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RemoveQueueRedrivePolicyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeQueueRedrivePolicy_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveQueueRedrivePolicyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RemoveQueueRedrivePolicyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveQueueRedrivePolicyResult(%+v)", *p)
}

type SetPermissionArgs struct {
	Request *SetPermissionRequest `thrift:"request,1" json:"request"`
}

func NewSetPermissionArgs() *SetPermissionArgs {
	return &SetPermissionArgs{}
}

var SetPermissionArgs_Request_DEFAULT *SetPermissionRequest

func (p *SetPermissionArgs) GetRequest() *SetPermissionRequest {
	if !p.IsSetRequest() {
		return SetPermissionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SetPermissionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SetPermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetPermissionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &SetPermissionRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *SetPermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setPermission_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetPermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *SetPermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetPermissionArgs(%+v)", *p)
}

type SetPermissionResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewSetPermissionResult() *SetPermissionResult {
	return &SetPermissionResult{}
}

var SetPermissionResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *SetPermissionResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return SetPermissionResult_E_DEFAULT
	}
	return p.E
}
func (p *SetPermissionResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetPermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetPermissionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetPermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setPermission_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetPermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetPermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetPermissionResult(%+v)", *p)
}

type RevokePermissionArgs struct {
	Request *RevokePermissionRequest `thrift:"request,1" json:"request"`
}

func NewRevokePermissionArgs() *RevokePermissionArgs {
	return &RevokePermissionArgs{}
}

var RevokePermissionArgs_Request_DEFAULT *RevokePermissionRequest

func (p *RevokePermissionArgs) GetRequest() *RevokePermissionRequest {
	if !p.IsSetRequest() {
		return RevokePermissionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *RevokePermissionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *RevokePermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePermissionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &RevokePermissionRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *RevokePermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokePermission_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *RevokePermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePermissionArgs(%+v)", *p)
}

type RevokePermissionResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewRevokePermissionResult() *RevokePermissionResult {
	return &RevokePermissionResult{}
}

var RevokePermissionResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *RevokePermissionResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return RevokePermissionResult_E_DEFAULT
	}
	return p.E
}
func (p *RevokePermissionResult) IsSetE() bool {
	return p.E != nil
}

func (p *RevokePermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePermissionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RevokePermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokePermission_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RevokePermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePermissionResult(%+v)", *p)
}

type QueryPermissionArgs struct {
	Request *QueryPermissionRequest `thrift:"request,1" json:"request"`
}

func NewQueryPermissionArgs() *QueryPermissionArgs {
	return &QueryPermissionArgs{}
}

var QueryPermissionArgs_Request_DEFAULT *QueryPermissionRequest

func (p *QueryPermissionArgs) GetRequest() *QueryPermissionRequest {
	if !p.IsSetRequest() {
		return QueryPermissionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QueryPermissionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QueryPermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPermissionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &QueryPermissionRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *QueryPermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryPermission_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *QueryPermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPermissionArgs(%+v)", *p)
}

type QueryPermissionResult struct {
	Success *QueryPermissionResponse          `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewQueryPermissionResult() *QueryPermissionResult {
	return &QueryPermissionResult{}
}

var QueryPermissionResult_Success_DEFAULT *QueryPermissionResponse

func (p *QueryPermissionResult) GetSuccess() *QueryPermissionResponse {
	if !p.IsSetSuccess() {
		return QueryPermissionResult_Success_DEFAULT
	}
	return p.Success
}

var QueryPermissionResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *QueryPermissionResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return QueryPermissionResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryPermissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryPermissionResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryPermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPermissionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryPermissionResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryPermissionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryPermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryPermission_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPermissionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryPermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryPermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPermissionResult(%+v)", *p)
}

type QueryPermissionForIdArgs struct {
	Request *QueryPermissionForIdRequest `thrift:"request,1" json:"request"`
}

func NewQueryPermissionForIdArgs() *QueryPermissionForIdArgs {
	return &QueryPermissionForIdArgs{}
}

var QueryPermissionForIdArgs_Request_DEFAULT *QueryPermissionForIdRequest

func (p *QueryPermissionForIdArgs) GetRequest() *QueryPermissionForIdRequest {
	if !p.IsSetRequest() {
		return QueryPermissionForIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QueryPermissionForIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QueryPermissionForIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPermissionForIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &QueryPermissionForIdRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *QueryPermissionForIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryPermissionForId_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPermissionForIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *QueryPermissionForIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPermissionForIdArgs(%+v)", *p)
}

type QueryPermissionForIdResult struct {
	Success *QueryPermissionForIdResponse     `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewQueryPermissionForIdResult() *QueryPermissionForIdResult {
	return &QueryPermissionForIdResult{}
}

var QueryPermissionForIdResult_Success_DEFAULT *QueryPermissionForIdResponse

func (p *QueryPermissionForIdResult) GetSuccess() *QueryPermissionForIdResponse {
	if !p.IsSetSuccess() {
		return QueryPermissionForIdResult_Success_DEFAULT
	}
	return p.Success
}

var QueryPermissionForIdResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *QueryPermissionForIdResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return QueryPermissionForIdResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryPermissionForIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryPermissionForIdResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryPermissionForIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPermissionForIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryPermissionForIdResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryPermissionForIdResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryPermissionForIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryPermissionForId_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPermissionForIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryPermissionForIdResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryPermissionForIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPermissionForIdResult(%+v)", *p)
}

type ListPermissionsArgs struct {
	Request *ListPermissionsRequest `thrift:"request,1" json:"request"`
}

func NewListPermissionsArgs() *ListPermissionsArgs {
	return &ListPermissionsArgs{}
}

var ListPermissionsArgs_Request_DEFAULT *ListPermissionsRequest

func (p *ListPermissionsArgs) GetRequest() *ListPermissionsRequest {
	if !p.IsSetRequest() {
		return ListPermissionsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ListPermissionsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ListPermissionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPermissionsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ListPermissionsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ListPermissionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listPermissions_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPermissionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *ListPermissionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPermissionsArgs(%+v)", *p)
}

type ListPermissionsResult struct {
	Success *ListPermissionsResponse          `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewListPermissionsResult() *ListPermissionsResult {
	return &ListPermissionsResult{}
}

var ListPermissionsResult_Success_DEFAULT *ListPermissionsResponse

func (p *ListPermissionsResult) GetSuccess() *ListPermissionsResponse {
	if !p.IsSetSuccess() {
		return ListPermissionsResult_Success_DEFAULT
	}
	return p.Success
}

var ListPermissionsResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *ListPermissionsResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return ListPermissionsResult_E_DEFAULT
	}
	return p.E
}
func (p *ListPermissionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListPermissionsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListPermissionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPermissionsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListPermissionsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListPermissionsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListPermissionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listPermissions_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPermissionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListPermissionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListPermissionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPermissionsResult(%+v)", *p)
}

type CreateTagArgs struct {
	Request *CreateTagRequest `thrift:"request,1" json:"request"`
}

func NewCreateTagArgs() *CreateTagArgs {
	return &CreateTagArgs{}
}

var CreateTagArgs_Request_DEFAULT *CreateTagRequest

func (p *CreateTagArgs) GetRequest() *CreateTagRequest {
	if !p.IsSetRequest() {
		return CreateTagArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CreateTagArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CreateTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTagArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &CreateTagRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *CreateTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTag_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *CreateTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTagArgs(%+v)", *p)
}

type CreateTagResult struct {
	Success *CreateTagResponse                `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewCreateTagResult() *CreateTagResult {
	return &CreateTagResult{}
}

var CreateTagResult_Success_DEFAULT *CreateTagResponse

func (p *CreateTagResult) GetSuccess() *CreateTagResponse {
	if !p.IsSetSuccess() {
		return CreateTagResult_Success_DEFAULT
	}
	return p.Success
}

var CreateTagResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *CreateTagResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return CreateTagResult_E_DEFAULT
	}
	return p.E
}
func (p *CreateTagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateTagResult) IsSetE() bool {
	return p.E != nil
}

func (p *CreateTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTagResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateTagResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateTagResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CreateTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTag_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTagResult(%+v)", *p)
}

type DeleteTagArgs struct {
	Request *DeleteTagRequest `thrift:"request,1" json:"request"`
}

func NewDeleteTagArgs() *DeleteTagArgs {
	return &DeleteTagArgs{}
}

var DeleteTagArgs_Request_DEFAULT *DeleteTagRequest

func (p *DeleteTagArgs) GetRequest() *DeleteTagRequest {
	if !p.IsSetRequest() {
		return DeleteTagArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DeleteTagArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DeleteTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTagArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteTagRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DeleteTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTag_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DeleteTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTagArgs(%+v)", *p)
}

type DeleteTagResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewDeleteTagResult() *DeleteTagResult {
	return &DeleteTagResult{}
}

var DeleteTagResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *DeleteTagResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return DeleteTagResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteTagResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTagResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTag_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTagResult(%+v)", *p)
}

type GetTagInfoArgs struct {
	Request *GetTagInfoRequest `thrift:"request,1" json:"request"`
}

func NewGetTagInfoArgs() *GetTagInfoArgs {
	return &GetTagInfoArgs{}
}

var GetTagInfoArgs_Request_DEFAULT *GetTagInfoRequest

func (p *GetTagInfoArgs) GetRequest() *GetTagInfoRequest {
	if !p.IsSetRequest() {
		return GetTagInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetTagInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetTagInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTagInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetTagInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetTagInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTagInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTagInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetTagInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagInfoArgs(%+v)", *p)
}

type GetTagInfoResult struct {
	Success *GetTagInfoResponse               `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewGetTagInfoResult() *GetTagInfoResult {
	return &GetTagInfoResult{}
}

var GetTagInfoResult_Success_DEFAULT *GetTagInfoResponse

func (p *GetTagInfoResult) GetSuccess() *GetTagInfoResponse {
	if !p.IsSetSuccess() {
		return GetTagInfoResult_Success_DEFAULT
	}
	return p.Success
}

var GetTagInfoResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *GetTagInfoResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return GetTagInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *GetTagInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTagInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetTagInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTagInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetTagInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTagInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetTagInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTagInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTagInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTagInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetTagInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagInfoResult(%+v)", *p)
}

type ListTagArgs struct {
	Request *ListTagRequest `thrift:"request,1" json:"request"`
}

func NewListTagArgs() *ListTagArgs {
	return &ListTagArgs{}
}

var ListTagArgs_Request_DEFAULT *ListTagRequest

func (p *ListTagArgs) GetRequest() *ListTagRequest {
	if !p.IsSetRequest() {
		return ListTagArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ListTagArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ListTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ListTagRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ListTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTag_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *ListTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagArgs(%+v)", *p)
}

type ListTagResult struct {
	Success *ListTagResponse                  `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewListTagResult() *ListTagResult {
	return &ListTagResult{}
}

var ListTagResult_Success_DEFAULT *ListTagResponse

func (p *ListTagResult) GetSuccess() *ListTagResponse {
	if !p.IsSetSuccess() {
		return ListTagResult_Success_DEFAULT
	}
	return p.Success
}

var ListTagResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *ListTagResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return ListTagResult_E_DEFAULT
	}
	return p.E
}
func (p *ListTagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListTagResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListTagResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListTagResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTag_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagResult(%+v)", *p)
}

type QueryMetricArgs struct {
	Request *QueryMetricRequest `thrift:"request,1" json:"request"`
}

func NewQueryMetricArgs() *QueryMetricArgs {
	return &QueryMetricArgs{}
}

var QueryMetricArgs_Request_DEFAULT *QueryMetricRequest

func (p *QueryMetricArgs) GetRequest() *QueryMetricRequest {
	if !p.IsSetRequest() {
		return QueryMetricArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QueryMetricArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QueryMetricArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMetricArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &QueryMetricRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *QueryMetricArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryMetric_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *QueryMetricArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMetricArgs(%+v)", *p)
}

type QueryMetricResult struct {
	Success *TimeSeriesData                   `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewQueryMetricResult() *QueryMetricResult {
	return &QueryMetricResult{}
}

var QueryMetricResult_Success_DEFAULT *TimeSeriesData

func (p *QueryMetricResult) GetSuccess() *TimeSeriesData {
	if !p.IsSetSuccess() {
		return QueryMetricResult_Success_DEFAULT
	}
	return p.Success
}

var QueryMetricResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *QueryMetricResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return QueryMetricResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryMetricResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryMetricResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryMetricResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMetricResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TimeSeriesData{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryMetricResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryMetricResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryMetric_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMetricResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMetricResult(%+v)", *p)
}

type QueryPrivilegedQueueArgs struct {
	Request *QueryPrivilegedQueueRequest `thrift:"request,1" json:"request"`
}

func NewQueryPrivilegedQueueArgs() *QueryPrivilegedQueueArgs {
	return &QueryPrivilegedQueueArgs{}
}

var QueryPrivilegedQueueArgs_Request_DEFAULT *QueryPrivilegedQueueRequest

func (p *QueryPrivilegedQueueArgs) GetRequest() *QueryPrivilegedQueueRequest {
	if !p.IsSetRequest() {
		return QueryPrivilegedQueueArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QueryPrivilegedQueueArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QueryPrivilegedQueueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPrivilegedQueueArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &QueryPrivilegedQueueRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *QueryPrivilegedQueueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryPrivilegedQueue_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPrivilegedQueueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *QueryPrivilegedQueueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPrivilegedQueueArgs(%+v)", *p)
}

type QueryPrivilegedQueueResult struct {
	Success *QueryPrivilegedQueueResponse     `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewQueryPrivilegedQueueResult() *QueryPrivilegedQueueResult {
	return &QueryPrivilegedQueueResult{}
}

var QueryPrivilegedQueueResult_Success_DEFAULT *QueryPrivilegedQueueResponse

func (p *QueryPrivilegedQueueResult) GetSuccess() *QueryPrivilegedQueueResponse {
	if !p.IsSetSuccess() {
		return QueryPrivilegedQueueResult_Success_DEFAULT
	}
	return p.Success
}

var QueryPrivilegedQueueResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *QueryPrivilegedQueueResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return QueryPrivilegedQueueResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryPrivilegedQueueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryPrivilegedQueueResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryPrivilegedQueueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPrivilegedQueueResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryPrivilegedQueueResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryPrivilegedQueueResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryPrivilegedQueueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryPrivilegedQueue_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPrivilegedQueueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryPrivilegedQueueResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryPrivilegedQueueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPrivilegedQueueResult(%+v)", *p)
}

type VerifyEMQAdminArgs struct {
}

func NewVerifyEMQAdminArgs() *VerifyEMQAdminArgs {
	return &VerifyEMQAdminArgs{}
}

func (p *VerifyEMQAdminArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyEMQAdminArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyEMQAdmin_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyEMQAdminArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyEMQAdminArgs(%+v)", *p)
}

type VerifyEMQAdminResult struct {
	Success *VerifyEMQAdminResponse           `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewVerifyEMQAdminResult() *VerifyEMQAdminResult {
	return &VerifyEMQAdminResult{}
}

var VerifyEMQAdminResult_Success_DEFAULT *VerifyEMQAdminResponse

func (p *VerifyEMQAdminResult) GetSuccess() *VerifyEMQAdminResponse {
	if !p.IsSetSuccess() {
		return VerifyEMQAdminResult_Success_DEFAULT
	}
	return p.Success
}

var VerifyEMQAdminResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *VerifyEMQAdminResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return VerifyEMQAdminResult_E_DEFAULT
	}
	return p.E
}
func (p *VerifyEMQAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VerifyEMQAdminResult) IsSetE() bool {
	return p.E != nil
}

func (p *VerifyEMQAdminResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyEMQAdminResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &VerifyEMQAdminResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *VerifyEMQAdminResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *VerifyEMQAdminResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyEMQAdmin_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyEMQAdminResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *VerifyEMQAdminResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *VerifyEMQAdminResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyEMQAdminResult(%+v)", *p)
}

type VerifyEMQAdminRoleArgs struct {
	Request *VerifyEMQAdminRoleRequest `thrift:"request,1" json:"request"`
}

func NewVerifyEMQAdminRoleArgs() *VerifyEMQAdminRoleArgs {
	return &VerifyEMQAdminRoleArgs{}
}

var VerifyEMQAdminRoleArgs_Request_DEFAULT *VerifyEMQAdminRoleRequest

func (p *VerifyEMQAdminRoleArgs) GetRequest() *VerifyEMQAdminRoleRequest {
	if !p.IsSetRequest() {
		return VerifyEMQAdminRoleArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VerifyEMQAdminRoleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VerifyEMQAdminRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyEMQAdminRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &VerifyEMQAdminRoleRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *VerifyEMQAdminRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyEMQAdminRole_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyEMQAdminRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *VerifyEMQAdminRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyEMQAdminRoleArgs(%+v)", *p)
}

type VerifyEMQAdminRoleResult struct {
	Success *VerifyEMQAdminRoleResponse       `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewVerifyEMQAdminRoleResult() *VerifyEMQAdminRoleResult {
	return &VerifyEMQAdminRoleResult{}
}

var VerifyEMQAdminRoleResult_Success_DEFAULT *VerifyEMQAdminRoleResponse

func (p *VerifyEMQAdminRoleResult) GetSuccess() *VerifyEMQAdminRoleResponse {
	if !p.IsSetSuccess() {
		return VerifyEMQAdminRoleResult_Success_DEFAULT
	}
	return p.Success
}

var VerifyEMQAdminRoleResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *VerifyEMQAdminRoleResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return VerifyEMQAdminRoleResult_E_DEFAULT
	}
	return p.E
}
func (p *VerifyEMQAdminRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VerifyEMQAdminRoleResult) IsSetE() bool {
	return p.E != nil
}

func (p *VerifyEMQAdminRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyEMQAdminRoleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &VerifyEMQAdminRoleResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *VerifyEMQAdminRoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *VerifyEMQAdminRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyEMQAdminRole_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyEMQAdminRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *VerifyEMQAdminRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *VerifyEMQAdminRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyEMQAdminRoleResult(%+v)", *p)
}

type CopyQueueArgs struct {
	Request *CopyQueueRequest `thrift:"request,1" json:"request"`
}

func NewCopyQueueArgs() *CopyQueueArgs {
	return &CopyQueueArgs{}
}

var CopyQueueArgs_Request_DEFAULT *CopyQueueRequest

func (p *CopyQueueArgs) GetRequest() *CopyQueueRequest {
	if !p.IsSetRequest() {
		return CopyQueueArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CopyQueueArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CopyQueueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CopyQueueArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &CopyQueueRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *CopyQueueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("copyQueue_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CopyQueueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *CopyQueueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CopyQueueArgs(%+v)", *p)
}

type CopyQueueResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewCopyQueueResult() *CopyQueueResult {
	return &CopyQueueResult{}
}

var CopyQueueResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *CopyQueueResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return CopyQueueResult_E_DEFAULT
	}
	return p.E
}
func (p *CopyQueueResult) IsSetE() bool {
	return p.E != nil
}

func (p *CopyQueueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CopyQueueResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CopyQueueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("copyQueue_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CopyQueueResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CopyQueueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CopyQueueResult(%+v)", *p)
}

type GetQueueMetaArgs struct {
	QueueName string `thrift:"queueName,1" json:"queueName"`
}

func NewGetQueueMetaArgs() *GetQueueMetaArgs {
	return &GetQueueMetaArgs{}
}

func (p *GetQueueMetaArgs) GetQueueName() string {
	return p.QueueName
}
func (p *GetQueueMetaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueueMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *GetQueueMetaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueueMeta_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueueMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *GetQueueMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueMetaArgs(%+v)", *p)
}

type GetQueueMetaResult struct {
	Success *GetQueueMetaResponse             `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewGetQueueMetaResult() *GetQueueMetaResult {
	return &GetQueueMetaResult{}
}

var GetQueueMetaResult_Success_DEFAULT *GetQueueMetaResponse

func (p *GetQueueMetaResult) GetSuccess() *GetQueueMetaResponse {
	if !p.IsSetSuccess() {
		return GetQueueMetaResult_Success_DEFAULT
	}
	return p.Success
}

var GetQueueMetaResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *GetQueueMetaResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return GetQueueMetaResult_E_DEFAULT
	}
	return p.E
}
func (p *GetQueueMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetQueueMetaResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetQueueMetaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueueMetaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetQueueMetaResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetQueueMetaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetQueueMetaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueueMeta_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueueMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueMetaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueMetaResult(%+v)", *p)
}
