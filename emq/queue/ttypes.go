// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package queue

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/emq/common"
	"github.com/XiaoMi/galaxy-sdk-go/emq/message"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = message.GoUnusedProtection__
var GoUnusedProtection__ int

type Permission int64

const (
	Permission_NONE                 Permission = 0
	Permission_SEND_MESSAGE         Permission = 1
	Permission_RECEIVE_MESSAGE      Permission = 2
	Permission_SEND_RECEIVE_MESSAGE Permission = 3
	Permission_HANDLE_MESSAGE       Permission = 4
	Permission_SEND_HANDLE_MESSAGE  Permission = 5
	Permission_GET_QUEUE_INFO       Permission = 6
	Permission_USE_QUEUE            Permission = 7
	Permission_ADMIN_QUEUE          Permission = 8
	Permission_PEEK_MESSAGE         Permission = 9
	Permission_DELETE_PEEK_MESSAGE  Permission = 10
	Permission_FULL_CONTROL         Permission = 11
)

func (p Permission) String() string {
	switch p {
	case Permission_NONE:
		return "Permission_NONE"
	case Permission_SEND_MESSAGE:
		return "Permission_SEND_MESSAGE"
	case Permission_RECEIVE_MESSAGE:
		return "Permission_RECEIVE_MESSAGE"
	case Permission_SEND_RECEIVE_MESSAGE:
		return "Permission_SEND_RECEIVE_MESSAGE"
	case Permission_HANDLE_MESSAGE:
		return "Permission_HANDLE_MESSAGE"
	case Permission_SEND_HANDLE_MESSAGE:
		return "Permission_SEND_HANDLE_MESSAGE"
	case Permission_GET_QUEUE_INFO:
		return "Permission_GET_QUEUE_INFO"
	case Permission_USE_QUEUE:
		return "Permission_USE_QUEUE"
	case Permission_ADMIN_QUEUE:
		return "Permission_ADMIN_QUEUE"
	case Permission_PEEK_MESSAGE:
		return "Permission_PEEK_MESSAGE"
	case Permission_DELETE_PEEK_MESSAGE:
		return "Permission_DELETE_PEEK_MESSAGE"
	case Permission_FULL_CONTROL:
		return "Permission_FULL_CONTROL"
	}
	return "<UNSET>"
}

func PermissionFromString(s string) (Permission, error) {
	switch s {
	case "Permission_NONE":
		return Permission_NONE, nil
	case "Permission_SEND_MESSAGE":
		return Permission_SEND_MESSAGE, nil
	case "Permission_RECEIVE_MESSAGE":
		return Permission_RECEIVE_MESSAGE, nil
	case "Permission_SEND_RECEIVE_MESSAGE":
		return Permission_SEND_RECEIVE_MESSAGE, nil
	case "Permission_HANDLE_MESSAGE":
		return Permission_HANDLE_MESSAGE, nil
	case "Permission_SEND_HANDLE_MESSAGE":
		return Permission_SEND_HANDLE_MESSAGE, nil
	case "Permission_GET_QUEUE_INFO":
		return Permission_GET_QUEUE_INFO, nil
	case "Permission_USE_QUEUE":
		return Permission_USE_QUEUE, nil
	case "Permission_ADMIN_QUEUE":
		return Permission_ADMIN_QUEUE, nil
	case "Permission_PEEK_MESSAGE":
		return Permission_PEEK_MESSAGE, nil
	case "Permission_DELETE_PEEK_MESSAGE":
		return Permission_DELETE_PEEK_MESSAGE, nil
	case "Permission_FULL_CONTROL":
		return Permission_FULL_CONTROL, nil
	}
	return Permission(0), fmt.Errorf("not a valid Permission string")
}

func PermissionPtr(v Permission) *Permission { return &v }

type LogicalOperator int64

const (
	LogicalOperator_AND LogicalOperator = 0
	LogicalOperator_OR  LogicalOperator = 1
)

func (p LogicalOperator) String() string {
	switch p {
	case LogicalOperator_AND:
		return "LogicalOperator_AND"
	case LogicalOperator_OR:
		return "LogicalOperator_OR"
	}
	return "<UNSET>"
}

func LogicalOperatorFromString(s string) (LogicalOperator, error) {
	switch s {
	case "LogicalOperator_AND":
		return LogicalOperator_AND, nil
	case "LogicalOperator_OR":
		return LogicalOperator_OR, nil
	}
	return LogicalOperator(0), fmt.Errorf("not a valid LogicalOperator string")
}

func LogicalOperatorPtr(v LogicalOperator) *LogicalOperator { return &v }

type QueueAttribute struct {
	DelaySeconds                *int32            `thrift:"delaySeconds,1" json:"delaySeconds"`
	InvisibilitySeconds         *int32            `thrift:"invisibilitySeconds,2" json:"invisibilitySeconds"`
	ReceiveMessageWaitSeconds   *int32            `thrift:"receiveMessageWaitSeconds,3" json:"receiveMessageWaitSeconds"`
	ReceiveMessageMaximumNumber *int32            `thrift:"receiveMessageMaximumNumber,4" json:"receiveMessageMaximumNumber"`
	MessageRetentionSeconds     *int32            `thrift:"messageRetentionSeconds,5" json:"messageRetentionSeconds"`
	MessageMaximumBytes         *int32            `thrift:"messageMaximumBytes,6" json:"messageMaximumBytes"`
	PartitionNumber             *int32            `thrift:"partitionNumber,7" json:"partitionNumber"`
	UserAttributes              map[string]string `thrift:"userAttributes,8" json:"userAttributes"`
}

func NewQueueAttribute() *QueueAttribute {
	return &QueueAttribute{}
}

var QueueAttribute_DelaySeconds_DEFAULT int32

func (p *QueueAttribute) GetDelaySeconds() int32 {
	if !p.IsSetDelaySeconds() {
		return QueueAttribute_DelaySeconds_DEFAULT
	}
	return *p.DelaySeconds
}

var QueueAttribute_InvisibilitySeconds_DEFAULT int32

func (p *QueueAttribute) GetInvisibilitySeconds() int32 {
	if !p.IsSetInvisibilitySeconds() {
		return QueueAttribute_InvisibilitySeconds_DEFAULT
	}
	return *p.InvisibilitySeconds
}

var QueueAttribute_ReceiveMessageWaitSeconds_DEFAULT int32

func (p *QueueAttribute) GetReceiveMessageWaitSeconds() int32 {
	if !p.IsSetReceiveMessageWaitSeconds() {
		return QueueAttribute_ReceiveMessageWaitSeconds_DEFAULT
	}
	return *p.ReceiveMessageWaitSeconds
}

var QueueAttribute_ReceiveMessageMaximumNumber_DEFAULT int32

func (p *QueueAttribute) GetReceiveMessageMaximumNumber() int32 {
	if !p.IsSetReceiveMessageMaximumNumber() {
		return QueueAttribute_ReceiveMessageMaximumNumber_DEFAULT
	}
	return *p.ReceiveMessageMaximumNumber
}

var QueueAttribute_MessageRetentionSeconds_DEFAULT int32

func (p *QueueAttribute) GetMessageRetentionSeconds() int32 {
	if !p.IsSetMessageRetentionSeconds() {
		return QueueAttribute_MessageRetentionSeconds_DEFAULT
	}
	return *p.MessageRetentionSeconds
}

var QueueAttribute_MessageMaximumBytes_DEFAULT int32

func (p *QueueAttribute) GetMessageMaximumBytes() int32 {
	if !p.IsSetMessageMaximumBytes() {
		return QueueAttribute_MessageMaximumBytes_DEFAULT
	}
	return *p.MessageMaximumBytes
}

var QueueAttribute_PartitionNumber_DEFAULT int32

func (p *QueueAttribute) GetPartitionNumber() int32 {
	if !p.IsSetPartitionNumber() {
		return QueueAttribute_PartitionNumber_DEFAULT
	}
	return *p.PartitionNumber
}

var QueueAttribute_UserAttributes_DEFAULT map[string]string

func (p *QueueAttribute) GetUserAttributes() map[string]string {
	return p.UserAttributes
}
func (p *QueueAttribute) IsSetDelaySeconds() bool {
	return p.DelaySeconds != nil
}

func (p *QueueAttribute) IsSetInvisibilitySeconds() bool {
	return p.InvisibilitySeconds != nil
}

func (p *QueueAttribute) IsSetReceiveMessageWaitSeconds() bool {
	return p.ReceiveMessageWaitSeconds != nil
}

func (p *QueueAttribute) IsSetReceiveMessageMaximumNumber() bool {
	return p.ReceiveMessageMaximumNumber != nil
}

func (p *QueueAttribute) IsSetMessageRetentionSeconds() bool {
	return p.MessageRetentionSeconds != nil
}

func (p *QueueAttribute) IsSetMessageMaximumBytes() bool {
	return p.MessageMaximumBytes != nil
}

func (p *QueueAttribute) IsSetPartitionNumber() bool {
	return p.PartitionNumber != nil
}

func (p *QueueAttribute) IsSetUserAttributes() bool {
	return p.UserAttributes != nil
}

func (p *QueueAttribute) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueueAttribute) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DelaySeconds = &v
	}
	return nil
}

func (p *QueueAttribute) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.InvisibilitySeconds = &v
	}
	return nil
}

func (p *QueueAttribute) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ReceiveMessageWaitSeconds = &v
	}
	return nil
}

func (p *QueueAttribute) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ReceiveMessageMaximumNumber = &v
	}
	return nil
}

func (p *QueueAttribute) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MessageRetentionSeconds = &v
	}
	return nil
}

func (p *QueueAttribute) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.MessageMaximumBytes = &v
	}
	return nil
}

func (p *QueueAttribute) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.PartitionNumber = &v
	}
	return nil
}

func (p *QueueAttribute) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.UserAttributes = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val1 = v
		}
		p.UserAttributes[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *QueueAttribute) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueueAttribute"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueueAttribute) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDelaySeconds() {
		if err := oprot.WriteFieldBegin("delaySeconds", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:delaySeconds: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.DelaySeconds)); err != nil {
			return fmt.Errorf("%T.delaySeconds (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:delaySeconds: %s", p, err)
		}
	}
	return err
}

func (p *QueueAttribute) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvisibilitySeconds() {
		if err := oprot.WriteFieldBegin("invisibilitySeconds", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:invisibilitySeconds: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.InvisibilitySeconds)); err != nil {
			return fmt.Errorf("%T.invisibilitySeconds (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:invisibilitySeconds: %s", p, err)
		}
	}
	return err
}

func (p *QueueAttribute) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceiveMessageWaitSeconds() {
		if err := oprot.WriteFieldBegin("receiveMessageWaitSeconds", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:receiveMessageWaitSeconds: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ReceiveMessageWaitSeconds)); err != nil {
			return fmt.Errorf("%T.receiveMessageWaitSeconds (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:receiveMessageWaitSeconds: %s", p, err)
		}
	}
	return err
}

func (p *QueueAttribute) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceiveMessageMaximumNumber() {
		if err := oprot.WriteFieldBegin("receiveMessageMaximumNumber", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:receiveMessageMaximumNumber: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ReceiveMessageMaximumNumber)); err != nil {
			return fmt.Errorf("%T.receiveMessageMaximumNumber (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:receiveMessageMaximumNumber: %s", p, err)
		}
	}
	return err
}

func (p *QueueAttribute) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageRetentionSeconds() {
		if err := oprot.WriteFieldBegin("messageRetentionSeconds", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:messageRetentionSeconds: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MessageRetentionSeconds)); err != nil {
			return fmt.Errorf("%T.messageRetentionSeconds (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:messageRetentionSeconds: %s", p, err)
		}
	}
	return err
}

func (p *QueueAttribute) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageMaximumBytes() {
		if err := oprot.WriteFieldBegin("messageMaximumBytes", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:messageMaximumBytes: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MessageMaximumBytes)); err != nil {
			return fmt.Errorf("%T.messageMaximumBytes (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:messageMaximumBytes: %s", p, err)
		}
	}
	return err
}

func (p *QueueAttribute) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionNumber() {
		if err := oprot.WriteFieldBegin("partitionNumber", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:partitionNumber: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.PartitionNumber)); err != nil {
			return fmt.Errorf("%T.partitionNumber (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:partitionNumber: %s", p, err)
		}
	}
	return err
}

func (p *QueueAttribute) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserAttributes() {
		if err := oprot.WriteFieldBegin("userAttributes", thrift.MAP, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:userAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.UserAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.UserAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:userAttributes: %s", p, err)
		}
	}
	return err
}

func (p *QueueAttribute) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueueAttribute(%+v)", *p)
}

type QueueState struct {
	CreateTimestamp                      int64 `thrift:"createTimestamp,1,required" json:"createTimestamp"`
	LastModifiedTimestamp                int64 `thrift:"lastModifiedTimestamp,2,required" json:"lastModifiedTimestamp"`
	ApproximateMessageNumber             int64 `thrift:"approximateMessageNumber,3,required" json:"approximateMessageNumber"`
	ApproximateAvailableMessageNumber    int64 `thrift:"approximateAvailableMessageNumber,4,required" json:"approximateAvailableMessageNumber"`
	ApproximateInvisibilityMessageNumber int64 `thrift:"approximateInvisibilityMessageNumber,5,required" json:"approximateInvisibilityMessageNumber"`
}

func NewQueueState() *QueueState {
	return &QueueState{}
}

func (p *QueueState) GetCreateTimestamp() int64 {
	return p.CreateTimestamp
}

func (p *QueueState) GetLastModifiedTimestamp() int64 {
	return p.LastModifiedTimestamp
}

func (p *QueueState) GetApproximateMessageNumber() int64 {
	return p.ApproximateMessageNumber
}

func (p *QueueState) GetApproximateAvailableMessageNumber() int64 {
	return p.ApproximateAvailableMessageNumber
}

func (p *QueueState) GetApproximateInvisibilityMessageNumber() int64 {
	return p.ApproximateInvisibilityMessageNumber
}
func (p *QueueState) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueueState) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.CreateTimestamp = v
	}
	return nil
}

func (p *QueueState) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.LastModifiedTimestamp = v
	}
	return nil
}

func (p *QueueState) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ApproximateMessageNumber = v
	}
	return nil
}

func (p *QueueState) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ApproximateAvailableMessageNumber = v
	}
	return nil
}

func (p *QueueState) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ApproximateInvisibilityMessageNumber = v
	}
	return nil
}

func (p *QueueState) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueueState"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueueState) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTimestamp", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:createTimestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateTimestamp)); err != nil {
		return fmt.Errorf("%T.createTimestamp (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:createTimestamp: %s", p, err)
	}
	return err
}

func (p *QueueState) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastModifiedTimestamp", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:lastModifiedTimestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LastModifiedTimestamp)); err != nil {
		return fmt.Errorf("%T.lastModifiedTimestamp (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:lastModifiedTimestamp: %s", p, err)
	}
	return err
}

func (p *QueueState) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("approximateMessageNumber", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:approximateMessageNumber: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ApproximateMessageNumber)); err != nil {
		return fmt.Errorf("%T.approximateMessageNumber (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:approximateMessageNumber: %s", p, err)
	}
	return err
}

func (p *QueueState) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("approximateAvailableMessageNumber", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:approximateAvailableMessageNumber: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ApproximateAvailableMessageNumber)); err != nil {
		return fmt.Errorf("%T.approximateAvailableMessageNumber (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:approximateAvailableMessageNumber: %s", p, err)
	}
	return err
}

func (p *QueueState) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("approximateInvisibilityMessageNumber", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:approximateInvisibilityMessageNumber: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ApproximateInvisibilityMessageNumber)); err != nil {
		return fmt.Errorf("%T.approximateInvisibilityMessageNumber (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:approximateInvisibilityMessageNumber: %s", p, err)
	}
	return err
}

func (p *QueueState) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueueState(%+v)", *p)
}

type Throughput struct {
	ReadQps  *int64 `thrift:"readQps,1" json:"readQps"`
	WriteQps *int64 `thrift:"writeQps,2" json:"writeQps"`
}

func NewThroughput() *Throughput {
	return &Throughput{}
}

var Throughput_ReadQps_DEFAULT int64

func (p *Throughput) GetReadQps() int64 {
	if !p.IsSetReadQps() {
		return Throughput_ReadQps_DEFAULT
	}
	return *p.ReadQps
}

var Throughput_WriteQps_DEFAULT int64

func (p *Throughput) GetWriteQps() int64 {
	if !p.IsSetWriteQps() {
		return Throughput_WriteQps_DEFAULT
	}
	return *p.WriteQps
}
func (p *Throughput) IsSetReadQps() bool {
	return p.ReadQps != nil
}

func (p *Throughput) IsSetWriteQps() bool {
	return p.WriteQps != nil
}

func (p *Throughput) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Throughput) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReadQps = &v
	}
	return nil
}

func (p *Throughput) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.WriteQps = &v
	}
	return nil
}

func (p *Throughput) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Throughput"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Throughput) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadQps() {
		if err := oprot.WriteFieldBegin("readQps", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:readQps: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ReadQps)); err != nil {
			return fmt.Errorf("%T.readQps (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:readQps: %s", p, err)
		}
	}
	return err
}

func (p *Throughput) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteQps() {
		if err := oprot.WriteFieldBegin("writeQps", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:writeQps: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.WriteQps)); err != nil {
			return fmt.Errorf("%T.writeQps (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:writeQps: %s", p, err)
		}
	}
	return err
}

func (p *Throughput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Throughput(%+v)", *p)
}

type QueueQuota struct {
	// unused field # 1
	Throughput *Throughput `thrift:"throughput,2" json:"throughput"`
}

func NewQueueQuota() *QueueQuota {
	return &QueueQuota{}
}

var QueueQuota_Throughput_DEFAULT *Throughput

func (p *QueueQuota) GetThroughput() *Throughput {
	if !p.IsSetThroughput() {
		return QueueQuota_Throughput_DEFAULT
	}
	return p.Throughput
}
func (p *QueueQuota) IsSetThroughput() bool {
	return p.Throughput != nil
}

func (p *QueueQuota) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueueQuota) ReadField2(iprot thrift.TProtocol) error {
	p.Throughput = &Throughput{}
	if err := p.Throughput.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Throughput, err)
	}
	return nil
}

func (p *QueueQuota) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueueQuota"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueueQuota) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetThroughput() {
		if err := oprot.WriteFieldBegin("throughput", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:throughput: %s", p, err)
		}
		if err := p.Throughput.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Throughput, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:throughput: %s", p, err)
		}
	}
	return err
}

func (p *QueueQuota) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueueQuota(%+v)", *p)
}

type CreateQueueRequest struct {
	QueueName          string          `thrift:"queueName,1,required" json:"queueName"`
	QueueAttribute     *QueueAttribute `thrift:"queueAttribute,2" json:"queueAttribute"`
	QueueQuota         *QueueQuota     `thrift:"queueQuota,3" json:"queueQuota"`
	DeadLetterQueue    *bool           `thrift:"deadLetterQueue,4" json:"deadLetterQueue"`
	EnablePriority     *bool           `thrift:"enablePriority,5" json:"enablePriority"`
	TopicQueue         *bool           `thrift:"topicQueue,6" json:"topicQueue"`
	DeleteMessageForce bool            `thrift:"deleteMessageForce,7" json:"deleteMessageForce"`
	DefaultTagName     *string         `thrift:"defaultTagName,8" json:"defaultTagName"`
	RedrivePolicy      *RedrivePolicy  `thrift:"redrivePolicy,9" json:"redrivePolicy"`
}

func NewCreateQueueRequest() *CreateQueueRequest {
	return &CreateQueueRequest{
		DeleteMessageForce: true,
	}
}

func (p *CreateQueueRequest) GetQueueName() string {
	return p.QueueName
}

var CreateQueueRequest_QueueAttribute_DEFAULT *QueueAttribute

func (p *CreateQueueRequest) GetQueueAttribute() *QueueAttribute {
	if !p.IsSetQueueAttribute() {
		return CreateQueueRequest_QueueAttribute_DEFAULT
	}
	return p.QueueAttribute
}

var CreateQueueRequest_QueueQuota_DEFAULT *QueueQuota

func (p *CreateQueueRequest) GetQueueQuota() *QueueQuota {
	if !p.IsSetQueueQuota() {
		return CreateQueueRequest_QueueQuota_DEFAULT
	}
	return p.QueueQuota
}

var CreateQueueRequest_DeadLetterQueue_DEFAULT bool

func (p *CreateQueueRequest) GetDeadLetterQueue() bool {
	if !p.IsSetDeadLetterQueue() {
		return CreateQueueRequest_DeadLetterQueue_DEFAULT
	}
	return *p.DeadLetterQueue
}

var CreateQueueRequest_EnablePriority_DEFAULT bool

func (p *CreateQueueRequest) GetEnablePriority() bool {
	if !p.IsSetEnablePriority() {
		return CreateQueueRequest_EnablePriority_DEFAULT
	}
	return *p.EnablePriority
}

var CreateQueueRequest_TopicQueue_DEFAULT bool

func (p *CreateQueueRequest) GetTopicQueue() bool {
	if !p.IsSetTopicQueue() {
		return CreateQueueRequest_TopicQueue_DEFAULT
	}
	return *p.TopicQueue
}

var CreateQueueRequest_DeleteMessageForce_DEFAULT bool = true

func (p *CreateQueueRequest) GetDeleteMessageForce() bool {
	return p.DeleteMessageForce
}

var CreateQueueRequest_DefaultTagName_DEFAULT string

func (p *CreateQueueRequest) GetDefaultTagName() string {
	if !p.IsSetDefaultTagName() {
		return CreateQueueRequest_DefaultTagName_DEFAULT
	}
	return *p.DefaultTagName
}

var CreateQueueRequest_RedrivePolicy_DEFAULT RedrivePolicy

func (p *CreateQueueRequest) GetRedrivePolicy() RedrivePolicy {
	if !p.IsSetRedrivePolicy() {
		return CreateQueueRequest_RedrivePolicy_DEFAULT
	}
	return *p.RedrivePolicy
}
func (p *CreateQueueRequest) IsSetQueueAttribute() bool {
	return p.QueueAttribute != nil
}

func (p *CreateQueueRequest) IsSetQueueQuota() bool {
	return p.QueueQuota != nil
}

func (p *CreateQueueRequest) IsSetDeadLetterQueue() bool {
	return p.DeadLetterQueue != nil
}

func (p *CreateQueueRequest) IsSetEnablePriority() bool {
	return p.EnablePriority != nil
}

func (p *CreateQueueRequest) IsSetTopicQueue() bool {
	return p.TopicQueue != nil
}

func (p *CreateQueueRequest) IsSetDeleteMessageForce() bool {
	return p.DeleteMessageForce != CreateQueueRequest_DeleteMessageForce_DEFAULT
}

func (p *CreateQueueRequest) IsSetDefaultTagName() bool {
	return p.DefaultTagName != nil
}

func (p *CreateQueueRequest) IsSetRedrivePolicy() bool {
	return p.RedrivePolicy != nil
}

func (p *CreateQueueRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateQueueRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *CreateQueueRequest) ReadField2(iprot thrift.TProtocol) error {
	p.QueueAttribute = &QueueAttribute{}
	if err := p.QueueAttribute.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueAttribute, err)
	}
	return nil
}

func (p *CreateQueueRequest) ReadField3(iprot thrift.TProtocol) error {
	p.QueueQuota = &QueueQuota{}
	if err := p.QueueQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueQuota, err)
	}
	return nil
}

func (p *CreateQueueRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeadLetterQueue = &v
	}
	return nil
}

func (p *CreateQueueRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.EnablePriority = &v
	}
	return nil
}

func (p *CreateQueueRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.TopicQueue = &v
	}
	return nil
}

func (p *CreateQueueRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.DeleteMessageForce = v
	}
	return nil
}

func (p *CreateQueueRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.DefaultTagName = &v
	}
	return nil
}

func (p *CreateQueueRequest) ReadField9(iprot thrift.TProtocol) error {
	p.RedrivePolicy = &RedrivePolicy{}
	if err := p.RedrivePolicy.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RedrivePolicy, err)
	}
	return nil
}

func (p *CreateQueueRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateQueueRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateQueueRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *CreateQueueRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueAttribute() {
		if err := oprot.WriteFieldBegin("queueAttribute", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:queueAttribute: %s", p, err)
		}
		if err := p.QueueAttribute.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.QueueAttribute, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:queueAttribute: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueQuota() {
		if err := oprot.WriteFieldBegin("queueQuota", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:queueQuota: %s", p, err)
		}
		if err := p.QueueQuota.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.QueueQuota, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:queueQuota: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeadLetterQueue() {
		if err := oprot.WriteFieldBegin("deadLetterQueue", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:deadLetterQueue: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.DeadLetterQueue)); err != nil {
			return fmt.Errorf("%T.deadLetterQueue (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:deadLetterQueue: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnablePriority() {
		if err := oprot.WriteFieldBegin("enablePriority", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:enablePriority: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.EnablePriority)); err != nil {
			return fmt.Errorf("%T.enablePriority (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:enablePriority: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopicQueue() {
		if err := oprot.WriteFieldBegin("topicQueue", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:topicQueue: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.TopicQueue)); err != nil {
			return fmt.Errorf("%T.topicQueue (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:topicQueue: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteMessageForce() {
		if err := oprot.WriteFieldBegin("deleteMessageForce", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:deleteMessageForce: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.DeleteMessageForce)); err != nil {
			return fmt.Errorf("%T.deleteMessageForce (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:deleteMessageForce: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultTagName() {
		if err := oprot.WriteFieldBegin("defaultTagName", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:defaultTagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DefaultTagName)); err != nil {
			return fmt.Errorf("%T.defaultTagName (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:defaultTagName: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRedrivePolicy() {
		if err := oprot.WriteFieldBegin("redrivePolicy", thrift.STRUCT, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:redrivePolicy: %s", p, err)
		}
		if err := p.RedrivePolicy.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RedrivePolicy, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:redrivePolicy: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateQueueRequest(%+v)", *p)
}

type CreateQueueResponse struct {
	QueueName          string          `thrift:"queueName,1,required" json:"queueName"`
	QueueAttribute     *QueueAttribute `thrift:"queueAttribute,2,required" json:"queueAttribute"`
	QueueQuota         *QueueQuota     `thrift:"queueQuota,3" json:"queueQuota"`
	DeadLetterQueue    *bool           `thrift:"deadLetterQueue,4" json:"deadLetterQueue"`
	EnablePriority     *bool           `thrift:"enablePriority,5" json:"enablePriority"`
	TopicQueue         *bool           `thrift:"topicQueue,6" json:"topicQueue"`
	DeleteMessageForce *bool           `thrift:"deleteMessageForce,7" json:"deleteMessageForce"`
	DefaultTagName     *string         `thrift:"defaultTagName,8" json:"defaultTagName"`
	RedrivePolicy      *RedrivePolicy  `thrift:"redrivePolicy,9" json:"redrivePolicy"`
}

func NewCreateQueueResponse() *CreateQueueResponse {
	return &CreateQueueResponse{}
}

func (p *CreateQueueResponse) GetQueueName() string {
	return p.QueueName
}

var CreateQueueResponse_QueueAttribute_DEFAULT *QueueAttribute

func (p *CreateQueueResponse) GetQueueAttribute() *QueueAttribute {
	if !p.IsSetQueueAttribute() {
		return CreateQueueResponse_QueueAttribute_DEFAULT
	}
	return p.QueueAttribute
}

var CreateQueueResponse_QueueQuota_DEFAULT *QueueQuota

func (p *CreateQueueResponse) GetQueueQuota() *QueueQuota {
	if !p.IsSetQueueQuota() {
		return CreateQueueResponse_QueueQuota_DEFAULT
	}
	return p.QueueQuota
}

var CreateQueueResponse_DeadLetterQueue_DEFAULT bool

func (p *CreateQueueResponse) GetDeadLetterQueue() bool {
	if !p.IsSetDeadLetterQueue() {
		return CreateQueueResponse_DeadLetterQueue_DEFAULT
	}
	return *p.DeadLetterQueue
}

var CreateQueueResponse_EnablePriority_DEFAULT bool

func (p *CreateQueueResponse) GetEnablePriority() bool {
	if !p.IsSetEnablePriority() {
		return CreateQueueResponse_EnablePriority_DEFAULT
	}
	return *p.EnablePriority
}

var CreateQueueResponse_TopicQueue_DEFAULT bool

func (p *CreateQueueResponse) GetTopicQueue() bool {
	if !p.IsSetTopicQueue() {
		return CreateQueueResponse_TopicQueue_DEFAULT
	}
	return *p.TopicQueue
}

var CreateQueueResponse_DeleteMessageForce_DEFAULT bool

func (p *CreateQueueResponse) GetDeleteMessageForce() bool {
	if !p.IsSetDeleteMessageForce() {
		return CreateQueueResponse_DeleteMessageForce_DEFAULT
	}
	return *p.DeleteMessageForce
}

var CreateQueueResponse_DefaultTagName_DEFAULT string

func (p *CreateQueueResponse) GetDefaultTagName() string {
	if !p.IsSetDefaultTagName() {
		return CreateQueueResponse_DefaultTagName_DEFAULT
	}
	return *p.DefaultTagName
}

var CreateQueueResponse_RedrivePolicy_DEFAULT RedrivePolicy

func (p *CreateQueueResponse) GetRedrivePolicy() RedrivePolicy {
	if !p.IsSetRedrivePolicy() {
		return CreateQueueResponse_RedrivePolicy_DEFAULT
	}
	return *p.RedrivePolicy
}
func (p *CreateQueueResponse) IsSetQueueAttribute() bool {
	return p.QueueAttribute != nil
}

func (p *CreateQueueResponse) IsSetQueueQuota() bool {
	return p.QueueQuota != nil
}

func (p *CreateQueueResponse) IsSetDeadLetterQueue() bool {
	return p.DeadLetterQueue != nil
}

func (p *CreateQueueResponse) IsSetEnablePriority() bool {
	return p.EnablePriority != nil
}

func (p *CreateQueueResponse) IsSetTopicQueue() bool {
	return p.TopicQueue != nil
}

func (p *CreateQueueResponse) IsSetDeleteMessageForce() bool {
	return p.DeleteMessageForce != nil
}

func (p *CreateQueueResponse) IsSetDefaultTagName() bool {
	return p.DefaultTagName != nil
}

func (p *CreateQueueResponse) IsSetRedrivePolicy() bool {
	return p.RedrivePolicy != nil
}

func (p *CreateQueueResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateQueueResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *CreateQueueResponse) ReadField2(iprot thrift.TProtocol) error {
	p.QueueAttribute = &QueueAttribute{}
	if err := p.QueueAttribute.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueAttribute, err)
	}
	return nil
}

func (p *CreateQueueResponse) ReadField3(iprot thrift.TProtocol) error {
	p.QueueQuota = &QueueQuota{}
	if err := p.QueueQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueQuota, err)
	}
	return nil
}

func (p *CreateQueueResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeadLetterQueue = &v
	}
	return nil
}

func (p *CreateQueueResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.EnablePriority = &v
	}
	return nil
}

func (p *CreateQueueResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.TopicQueue = &v
	}
	return nil
}

func (p *CreateQueueResponse) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.DeleteMessageForce = &v
	}
	return nil
}

func (p *CreateQueueResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.DefaultTagName = &v
	}
	return nil
}

func (p *CreateQueueResponse) ReadField9(iprot thrift.TProtocol) error {
	p.RedrivePolicy = &RedrivePolicy{}
	if err := p.RedrivePolicy.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RedrivePolicy, err)
	}
	return nil
}

func (p *CreateQueueResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateQueueResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateQueueResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *CreateQueueResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueAttribute", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:queueAttribute: %s", p, err)
	}
	if err := p.QueueAttribute.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QueueAttribute, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:queueAttribute: %s", p, err)
	}
	return err
}

func (p *CreateQueueResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueQuota() {
		if err := oprot.WriteFieldBegin("queueQuota", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:queueQuota: %s", p, err)
		}
		if err := p.QueueQuota.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.QueueQuota, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:queueQuota: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeadLetterQueue() {
		if err := oprot.WriteFieldBegin("deadLetterQueue", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:deadLetterQueue: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.DeadLetterQueue)); err != nil {
			return fmt.Errorf("%T.deadLetterQueue (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:deadLetterQueue: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnablePriority() {
		if err := oprot.WriteFieldBegin("enablePriority", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:enablePriority: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.EnablePriority)); err != nil {
			return fmt.Errorf("%T.enablePriority (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:enablePriority: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopicQueue() {
		if err := oprot.WriteFieldBegin("topicQueue", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:topicQueue: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.TopicQueue)); err != nil {
			return fmt.Errorf("%T.topicQueue (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:topicQueue: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteMessageForce() {
		if err := oprot.WriteFieldBegin("deleteMessageForce", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:deleteMessageForce: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.DeleteMessageForce)); err != nil {
			return fmt.Errorf("%T.deleteMessageForce (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:deleteMessageForce: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultTagName() {
		if err := oprot.WriteFieldBegin("defaultTagName", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:defaultTagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DefaultTagName)); err != nil {
			return fmt.Errorf("%T.defaultTagName (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:defaultTagName: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRedrivePolicy() {
		if err := oprot.WriteFieldBegin("redrivePolicy", thrift.STRUCT, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:redrivePolicy: %s", p, err)
		}
		if err := p.RedrivePolicy.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RedrivePolicy, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:redrivePolicy: %s", p, err)
		}
	}
	return err
}

func (p *CreateQueueResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateQueueResponse(%+v)", *p)
}

type DeleteQueueRequest struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
}

func NewDeleteQueueRequest() *DeleteQueueRequest {
	return &DeleteQueueRequest{}
}

func (p *DeleteQueueRequest) GetQueueName() string {
	return p.QueueName
}
func (p *DeleteQueueRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteQueueRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *DeleteQueueRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteQueueRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteQueueRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *DeleteQueueRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteQueueRequest(%+v)", *p)
}

type PurgeQueueRequest struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
}

func NewPurgeQueueRequest() *PurgeQueueRequest {
	return &PurgeQueueRequest{}
}

func (p *PurgeQueueRequest) GetQueueName() string {
	return p.QueueName
}
func (p *PurgeQueueRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PurgeQueueRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *PurgeQueueRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PurgeQueueRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PurgeQueueRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *PurgeQueueRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PurgeQueueRequest(%+v)", *p)
}

type SetQueueAttributesRequest struct {
	QueueName      string          `thrift:"queueName,1,required" json:"queueName"`
	QueueAttribute *QueueAttribute `thrift:"queueAttribute,2" json:"queueAttribute"`
}

func NewSetQueueAttributesRequest() *SetQueueAttributesRequest {
	return &SetQueueAttributesRequest{}
}

func (p *SetQueueAttributesRequest) GetQueueName() string {
	return p.QueueName
}

var SetQueueAttributesRequest_QueueAttribute_DEFAULT *QueueAttribute

func (p *SetQueueAttributesRequest) GetQueueAttribute() *QueueAttribute {
	if !p.IsSetQueueAttribute() {
		return SetQueueAttributesRequest_QueueAttribute_DEFAULT
	}
	return p.QueueAttribute
}
func (p *SetQueueAttributesRequest) IsSetQueueAttribute() bool {
	return p.QueueAttribute != nil
}

func (p *SetQueueAttributesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueAttributesRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *SetQueueAttributesRequest) ReadField2(iprot thrift.TProtocol) error {
	p.QueueAttribute = &QueueAttribute{}
	if err := p.QueueAttribute.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueAttribute, err)
	}
	return nil
}

func (p *SetQueueAttributesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetQueueAttributesRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueAttributesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *SetQueueAttributesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueAttribute() {
		if err := oprot.WriteFieldBegin("queueAttribute", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:queueAttribute: %s", p, err)
		}
		if err := p.QueueAttribute.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.QueueAttribute, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:queueAttribute: %s", p, err)
		}
	}
	return err
}

func (p *SetQueueAttributesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueAttributesRequest(%+v)", *p)
}

type SetQueueAttributesResponse struct {
	QueueName      string          `thrift:"queueName,1,required" json:"queueName"`
	QueueAttribute *QueueAttribute `thrift:"queueAttribute,2,required" json:"queueAttribute"`
}

func NewSetQueueAttributesResponse() *SetQueueAttributesResponse {
	return &SetQueueAttributesResponse{}
}

func (p *SetQueueAttributesResponse) GetQueueName() string {
	return p.QueueName
}

var SetQueueAttributesResponse_QueueAttribute_DEFAULT *QueueAttribute

func (p *SetQueueAttributesResponse) GetQueueAttribute() *QueueAttribute {
	if !p.IsSetQueueAttribute() {
		return SetQueueAttributesResponse_QueueAttribute_DEFAULT
	}
	return p.QueueAttribute
}
func (p *SetQueueAttributesResponse) IsSetQueueAttribute() bool {
	return p.QueueAttribute != nil
}

func (p *SetQueueAttributesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueAttributesResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *SetQueueAttributesResponse) ReadField2(iprot thrift.TProtocol) error {
	p.QueueAttribute = &QueueAttribute{}
	if err := p.QueueAttribute.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueAttribute, err)
	}
	return nil
}

func (p *SetQueueAttributesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetQueueAttributesResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueAttributesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *SetQueueAttributesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueAttribute", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:queueAttribute: %s", p, err)
	}
	if err := p.QueueAttribute.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QueueAttribute, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:queueAttribute: %s", p, err)
	}
	return err
}

func (p *SetQueueAttributesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueAttributesResponse(%+v)", *p)
}

type SetQueueQuotaRequest struct {
	QueueName  string      `thrift:"queueName,1,required" json:"queueName"`
	QueueQuota *QueueQuota `thrift:"queueQuota,2" json:"queueQuota"`
}

func NewSetQueueQuotaRequest() *SetQueueQuotaRequest {
	return &SetQueueQuotaRequest{}
}

func (p *SetQueueQuotaRequest) GetQueueName() string {
	return p.QueueName
}

var SetQueueQuotaRequest_QueueQuota_DEFAULT *QueueQuota

func (p *SetQueueQuotaRequest) GetQueueQuota() *QueueQuota {
	if !p.IsSetQueueQuota() {
		return SetQueueQuotaRequest_QueueQuota_DEFAULT
	}
	return p.QueueQuota
}
func (p *SetQueueQuotaRequest) IsSetQueueQuota() bool {
	return p.QueueQuota != nil
}

func (p *SetQueueQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *SetQueueQuotaRequest) ReadField2(iprot thrift.TProtocol) error {
	p.QueueQuota = &QueueQuota{}
	if err := p.QueueQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueQuota, err)
	}
	return nil
}

func (p *SetQueueQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetQueueQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *SetQueueQuotaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueQuota() {
		if err := oprot.WriteFieldBegin("queueQuota", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:queueQuota: %s", p, err)
		}
		if err := p.QueueQuota.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.QueueQuota, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:queueQuota: %s", p, err)
		}
	}
	return err
}

func (p *SetQueueQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueQuotaRequest(%+v)", *p)
}

type SetQueueQuotaResponse struct {
	QueueName  string      `thrift:"queueName,1,required" json:"queueName"`
	QueueQuota *QueueQuota `thrift:"queueQuota,2" json:"queueQuota"`
}

func NewSetQueueQuotaResponse() *SetQueueQuotaResponse {
	return &SetQueueQuotaResponse{}
}

func (p *SetQueueQuotaResponse) GetQueueName() string {
	return p.QueueName
}

var SetQueueQuotaResponse_QueueQuota_DEFAULT *QueueQuota

func (p *SetQueueQuotaResponse) GetQueueQuota() *QueueQuota {
	if !p.IsSetQueueQuota() {
		return SetQueueQuotaResponse_QueueQuota_DEFAULT
	}
	return p.QueueQuota
}
func (p *SetQueueQuotaResponse) IsSetQueueQuota() bool {
	return p.QueueQuota != nil
}

func (p *SetQueueQuotaResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueQuotaResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *SetQueueQuotaResponse) ReadField2(iprot thrift.TProtocol) error {
	p.QueueQuota = &QueueQuota{}
	if err := p.QueueQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueQuota, err)
	}
	return nil
}

func (p *SetQueueQuotaResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetQueueQuotaResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueQuotaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *SetQueueQuotaResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueQuota() {
		if err := oprot.WriteFieldBegin("queueQuota", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:queueQuota: %s", p, err)
		}
		if err := p.QueueQuota.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.QueueQuota, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:queueQuota: %s", p, err)
		}
	}
	return err
}

func (p *SetQueueQuotaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueQuotaResponse(%+v)", *p)
}

type RedrivePolicy struct {
	DlqName        string `thrift:"dlqName,1,required" json:"dlqName"`
	MaxReceiveTime int32  `thrift:"maxReceiveTime,2,required" json:"maxReceiveTime"`
}

func NewRedrivePolicy() *RedrivePolicy {
	return &RedrivePolicy{}
}

func (p *RedrivePolicy) GetDlqName() string {
	return p.DlqName
}

func (p *RedrivePolicy) GetMaxReceiveTime() int32 {
	return p.MaxReceiveTime
}
func (p *RedrivePolicy) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RedrivePolicy) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DlqName = v
	}
	return nil
}

func (p *RedrivePolicy) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MaxReceiveTime = v
	}
	return nil
}

func (p *RedrivePolicy) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RedrivePolicy"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RedrivePolicy) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dlqName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dlqName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DlqName)); err != nil {
		return fmt.Errorf("%T.dlqName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dlqName: %s", p, err)
	}
	return err
}

func (p *RedrivePolicy) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxReceiveTime", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:maxReceiveTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxReceiveTime)); err != nil {
		return fmt.Errorf("%T.maxReceiveTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:maxReceiveTime: %s", p, err)
	}
	return err
}

func (p *RedrivePolicy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RedrivePolicy(%+v)", *p)
}

type GetQueueInfoRequest struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
}

func NewGetQueueInfoRequest() *GetQueueInfoRequest {
	return &GetQueueInfoRequest{}
}

func (p *GetQueueInfoRequest) GetQueueName() string {
	return p.QueueName
}
func (p *GetQueueInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueueInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *GetQueueInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetQueueInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueueInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *GetQueueInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueInfoRequest(%+v)", *p)
}

type GetQueueInfoResponse struct {
	QueueName          string          `thrift:"queueName,1,required" json:"queueName"`
	QueueAttribute     *QueueAttribute `thrift:"queueAttribute,2,required" json:"queueAttribute"`
	QueueState         *QueueState     `thrift:"queueState,3,required" json:"queueState"`
	QueueQuota         *QueueQuota     `thrift:"queueQuota,4" json:"queueQuota"`
	IsDeadLetterQueue  *bool           `thrift:"isDeadLetterQueue,5" json:"isDeadLetterQueue"`
	RedrivePolicy      *RedrivePolicy  `thrift:"redrivePolicy,6" json:"redrivePolicy"`
	EnablePriority     *bool           `thrift:"enablePriority,7" json:"enablePriority"`
	TopicQueue         *bool           `thrift:"topicQueue,8" json:"topicQueue"`
	DeleteMessageForce *bool           `thrift:"deleteMessageForce,9" json:"deleteMessageForce"`
	DefaultTagName     *string         `thrift:"defaultTagName,10" json:"defaultTagName"`
	SourceQueues       []string        `thrift:"sourceQueues,11" json:"sourceQueues"`
}

func NewGetQueueInfoResponse() *GetQueueInfoResponse {
	return &GetQueueInfoResponse{}
}

func (p *GetQueueInfoResponse) GetQueueName() string {
	return p.QueueName
}

var GetQueueInfoResponse_QueueAttribute_DEFAULT *QueueAttribute

func (p *GetQueueInfoResponse) GetQueueAttribute() *QueueAttribute {
	if !p.IsSetQueueAttribute() {
		return GetQueueInfoResponse_QueueAttribute_DEFAULT
	}
	return p.QueueAttribute
}

var GetQueueInfoResponse_QueueState_DEFAULT *QueueState

func (p *GetQueueInfoResponse) GetQueueState() *QueueState {
	if !p.IsSetQueueState() {
		return GetQueueInfoResponse_QueueState_DEFAULT
	}
	return p.QueueState
}

var GetQueueInfoResponse_QueueQuota_DEFAULT *QueueQuota

func (p *GetQueueInfoResponse) GetQueueQuota() *QueueQuota {
	if !p.IsSetQueueQuota() {
		return GetQueueInfoResponse_QueueQuota_DEFAULT
	}
	return p.QueueQuota
}

var GetQueueInfoResponse_IsDeadLetterQueue_DEFAULT bool

func (p *GetQueueInfoResponse) GetIsDeadLetterQueue() bool {
	if !p.IsSetIsDeadLetterQueue() {
		return GetQueueInfoResponse_IsDeadLetterQueue_DEFAULT
	}
	return *p.IsDeadLetterQueue
}

var GetQueueInfoResponse_RedrivePolicy_DEFAULT *RedrivePolicy

func (p *GetQueueInfoResponse) GetRedrivePolicy() *RedrivePolicy {
	if !p.IsSetRedrivePolicy() {
		return GetQueueInfoResponse_RedrivePolicy_DEFAULT
	}
	return p.RedrivePolicy
}

var GetQueueInfoResponse_EnablePriority_DEFAULT bool

func (p *GetQueueInfoResponse) GetEnablePriority() bool {
	if !p.IsSetEnablePriority() {
		return GetQueueInfoResponse_EnablePriority_DEFAULT
	}
	return *p.EnablePriority
}

var GetQueueInfoResponse_TopicQueue_DEFAULT bool

func (p *GetQueueInfoResponse) GetTopicQueue() bool {
	if !p.IsSetTopicQueue() {
		return GetQueueInfoResponse_TopicQueue_DEFAULT
	}
	return *p.TopicQueue
}

var GetQueueInfoResponse_DeleteMessageForce_DEFAULT bool

func (p *GetQueueInfoResponse) GetDeleteMessageForce() bool {
	if !p.IsSetDeleteMessageForce() {
		return GetQueueInfoResponse_DeleteMessageForce_DEFAULT
	}
	return *p.DeleteMessageForce
}

var GetQueueInfoResponse_DefaultTagName_DEFAULT string

func (p *GetQueueInfoResponse) GetDefaultTagName() string {
	if !p.IsSetDefaultTagName() {
		return GetQueueInfoResponse_DefaultTagName_DEFAULT
	}
	return *p.DefaultTagName
}

var GetQueueInfoResponse_SourceQueues_DEFAULT []string

func (p *GetQueueInfoResponse) GetSourceQueues() []string {
	return p.SourceQueues
}
func (p *GetQueueInfoResponse) IsSetQueueAttribute() bool {
	return p.QueueAttribute != nil
}

func (p *GetQueueInfoResponse) IsSetQueueState() bool {
	return p.QueueState != nil
}

func (p *GetQueueInfoResponse) IsSetQueueQuota() bool {
	return p.QueueQuota != nil
}

func (p *GetQueueInfoResponse) IsSetIsDeadLetterQueue() bool {
	return p.IsDeadLetterQueue != nil
}

func (p *GetQueueInfoResponse) IsSetRedrivePolicy() bool {
	return p.RedrivePolicy != nil
}

func (p *GetQueueInfoResponse) IsSetEnablePriority() bool {
	return p.EnablePriority != nil
}

func (p *GetQueueInfoResponse) IsSetTopicQueue() bool {
	return p.TopicQueue != nil
}

func (p *GetQueueInfoResponse) IsSetDeleteMessageForce() bool {
	return p.DeleteMessageForce != nil
}

func (p *GetQueueInfoResponse) IsSetDefaultTagName() bool {
	return p.DefaultTagName != nil
}

func (p *GetQueueInfoResponse) IsSetSourceQueues() bool {
	return p.SourceQueues != nil
}

func (p *GetQueueInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueueInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *GetQueueInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	p.QueueAttribute = &QueueAttribute{}
	if err := p.QueueAttribute.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueAttribute, err)
	}
	return nil
}

func (p *GetQueueInfoResponse) ReadField3(iprot thrift.TProtocol) error {
	p.QueueState = &QueueState{}
	if err := p.QueueState.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueState, err)
	}
	return nil
}

func (p *GetQueueInfoResponse) ReadField4(iprot thrift.TProtocol) error {
	p.QueueQuota = &QueueQuota{}
	if err := p.QueueQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueQuota, err)
	}
	return nil
}

func (p *GetQueueInfoResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.IsDeadLetterQueue = &v
	}
	return nil
}

func (p *GetQueueInfoResponse) ReadField6(iprot thrift.TProtocol) error {
	p.RedrivePolicy = &RedrivePolicy{}
	if err := p.RedrivePolicy.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RedrivePolicy, err)
	}
	return nil
}

func (p *GetQueueInfoResponse) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.EnablePriority = &v
	}
	return nil
}

func (p *GetQueueInfoResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.TopicQueue = &v
	}
	return nil
}

func (p *GetQueueInfoResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.DeleteMessageForce = &v
	}
	return nil
}

func (p *GetQueueInfoResponse) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.DefaultTagName = &v
	}
	return nil
}

func (p *GetQueueInfoResponse) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.SourceQueues = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem2 = v
		}
		p.SourceQueues = append(p.SourceQueues, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetQueueInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetQueueInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueueInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *GetQueueInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueAttribute", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:queueAttribute: %s", p, err)
	}
	if err := p.QueueAttribute.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QueueAttribute, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:queueAttribute: %s", p, err)
	}
	return err
}

func (p *GetQueueInfoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueState", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:queueState: %s", p, err)
	}
	if err := p.QueueState.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QueueState, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:queueState: %s", p, err)
	}
	return err
}

func (p *GetQueueInfoResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueQuota() {
		if err := oprot.WriteFieldBegin("queueQuota", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:queueQuota: %s", p, err)
		}
		if err := p.QueueQuota.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.QueueQuota, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:queueQuota: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueInfoResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDeadLetterQueue() {
		if err := oprot.WriteFieldBegin("isDeadLetterQueue", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:isDeadLetterQueue: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.IsDeadLetterQueue)); err != nil {
			return fmt.Errorf("%T.isDeadLetterQueue (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:isDeadLetterQueue: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueInfoResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRedrivePolicy() {
		if err := oprot.WriteFieldBegin("redrivePolicy", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:redrivePolicy: %s", p, err)
		}
		if err := p.RedrivePolicy.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RedrivePolicy, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:redrivePolicy: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueInfoResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnablePriority() {
		if err := oprot.WriteFieldBegin("enablePriority", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:enablePriority: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.EnablePriority)); err != nil {
			return fmt.Errorf("%T.enablePriority (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:enablePriority: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueInfoResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopicQueue() {
		if err := oprot.WriteFieldBegin("topicQueue", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:topicQueue: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.TopicQueue)); err != nil {
			return fmt.Errorf("%T.topicQueue (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:topicQueue: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueInfoResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteMessageForce() {
		if err := oprot.WriteFieldBegin("deleteMessageForce", thrift.BOOL, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:deleteMessageForce: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.DeleteMessageForce)); err != nil {
			return fmt.Errorf("%T.deleteMessageForce (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:deleteMessageForce: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueInfoResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultTagName() {
		if err := oprot.WriteFieldBegin("defaultTagName", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:defaultTagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DefaultTagName)); err != nil {
			return fmt.Errorf("%T.defaultTagName (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:defaultTagName: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueInfoResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceQueues() {
		if err := oprot.WriteFieldBegin("sourceQueues", thrift.LIST, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:sourceQueues: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SourceQueues)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.SourceQueues {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:sourceQueues: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueInfoResponse(%+v)", *p)
}

type SetQueueRedrivePolicyRequest struct {
	QueueName     string         `thrift:"queueName,1,required" json:"queueName"`
	RedrivePolicy *RedrivePolicy `thrift:"redrivePolicy,2,required" json:"redrivePolicy"`
}

func NewSetQueueRedrivePolicyRequest() *SetQueueRedrivePolicyRequest {
	return &SetQueueRedrivePolicyRequest{}
}

func (p *SetQueueRedrivePolicyRequest) GetQueueName() string {
	return p.QueueName
}

var SetQueueRedrivePolicyRequest_RedrivePolicy_DEFAULT *RedrivePolicy

func (p *SetQueueRedrivePolicyRequest) GetRedrivePolicy() *RedrivePolicy {
	if !p.IsSetRedrivePolicy() {
		return SetQueueRedrivePolicyRequest_RedrivePolicy_DEFAULT
	}
	return p.RedrivePolicy
}
func (p *SetQueueRedrivePolicyRequest) IsSetRedrivePolicy() bool {
	return p.RedrivePolicy != nil
}

func (p *SetQueueRedrivePolicyRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *SetQueueRedrivePolicyRequest) ReadField2(iprot thrift.TProtocol) error {
	p.RedrivePolicy = &RedrivePolicy{}
	if err := p.RedrivePolicy.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RedrivePolicy, err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetQueueRedrivePolicyRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *SetQueueRedrivePolicyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("redrivePolicy", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:redrivePolicy: %s", p, err)
	}
	if err := p.RedrivePolicy.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.RedrivePolicy, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:redrivePolicy: %s", p, err)
	}
	return err
}

func (p *SetQueueRedrivePolicyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueRedrivePolicyRequest(%+v)", *p)
}

type SetQueueRedrivePolicyResponse struct {
	QueueName     string         `thrift:"queueName,1,required" json:"queueName"`
	RedrivePolicy *RedrivePolicy `thrift:"redrivePolicy,2,required" json:"redrivePolicy"`
}

func NewSetQueueRedrivePolicyResponse() *SetQueueRedrivePolicyResponse {
	return &SetQueueRedrivePolicyResponse{}
}

func (p *SetQueueRedrivePolicyResponse) GetQueueName() string {
	return p.QueueName
}

var SetQueueRedrivePolicyResponse_RedrivePolicy_DEFAULT *RedrivePolicy

func (p *SetQueueRedrivePolicyResponse) GetRedrivePolicy() *RedrivePolicy {
	if !p.IsSetRedrivePolicy() {
		return SetQueueRedrivePolicyResponse_RedrivePolicy_DEFAULT
	}
	return p.RedrivePolicy
}
func (p *SetQueueRedrivePolicyResponse) IsSetRedrivePolicy() bool {
	return p.RedrivePolicy != nil
}

func (p *SetQueueRedrivePolicyResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *SetQueueRedrivePolicyResponse) ReadField2(iprot thrift.TProtocol) error {
	p.RedrivePolicy = &RedrivePolicy{}
	if err := p.RedrivePolicy.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RedrivePolicy, err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetQueueRedrivePolicyResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueRedrivePolicyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *SetQueueRedrivePolicyResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("redrivePolicy", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:redrivePolicy: %s", p, err)
	}
	if err := p.RedrivePolicy.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.RedrivePolicy, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:redrivePolicy: %s", p, err)
	}
	return err
}

func (p *SetQueueRedrivePolicyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueRedrivePolicyResponse(%+v)", *p)
}

type RemoveQueueRedrivePolicyRequest struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
}

func NewRemoveQueueRedrivePolicyRequest() *RemoveQueueRedrivePolicyRequest {
	return &RemoveQueueRedrivePolicyRequest{}
}

func (p *RemoveQueueRedrivePolicyRequest) GetQueueName() string {
	return p.QueueName
}
func (p *RemoveQueueRedrivePolicyRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveQueueRedrivePolicyRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *RemoveQueueRedrivePolicyRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoveQueueRedrivePolicyRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveQueueRedrivePolicyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *RemoveQueueRedrivePolicyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveQueueRedrivePolicyRequest(%+v)", *p)
}

type ListQueueRequest struct {
	QueueNamePrefix string `thrift:"queueNamePrefix,1" json:"queueNamePrefix"`
}

func NewListQueueRequest() *ListQueueRequest {
	return &ListQueueRequest{}
}

var ListQueueRequest_QueueNamePrefix_DEFAULT string = ""

func (p *ListQueueRequest) GetQueueNamePrefix() string {
	return p.QueueNamePrefix
}
func (p *ListQueueRequest) IsSetQueueNamePrefix() bool {
	return p.QueueNamePrefix != ListQueueRequest_QueueNamePrefix_DEFAULT
}

func (p *ListQueueRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListQueueRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueNamePrefix = v
	}
	return nil
}

func (p *ListQueueRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListQueueRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListQueueRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueNamePrefix() {
		if err := oprot.WriteFieldBegin("queueNamePrefix", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:queueNamePrefix: %s", p, err)
		}
		if err := oprot.WriteString(string(p.QueueNamePrefix)); err != nil {
			return fmt.Errorf("%T.queueNamePrefix (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:queueNamePrefix: %s", p, err)
		}
	}
	return err
}

func (p *ListQueueRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListQueueRequest(%+v)", *p)
}

type ListQueueResponse struct {
	QueueName []string `thrift:"queueName,1,required" json:"queueName"`
}

func NewListQueueResponse() *ListQueueResponse {
	return &ListQueueResponse{}
}

func (p *ListQueueResponse) GetQueueName() []string {
	return p.QueueName
}
func (p *ListQueueResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListQueueResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.QueueName = tSlice
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem3 = v
		}
		p.QueueName = append(p.QueueName, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListQueueResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListQueueResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListQueueResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.QueueName)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.QueueName {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *ListQueueResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListQueueResponse(%+v)", *p)
}

type QueryPrivilegedQueueRequest struct {
	QueueNamePrefix string `thrift:"queueNamePrefix,1" json:"queueNamePrefix"`
}

func NewQueryPrivilegedQueueRequest() *QueryPrivilegedQueueRequest {
	return &QueryPrivilegedQueueRequest{}
}

var QueryPrivilegedQueueRequest_QueueNamePrefix_DEFAULT string = ""

func (p *QueryPrivilegedQueueRequest) GetQueueNamePrefix() string {
	return p.QueueNamePrefix
}
func (p *QueryPrivilegedQueueRequest) IsSetQueueNamePrefix() bool {
	return p.QueueNamePrefix != QueryPrivilegedQueueRequest_QueueNamePrefix_DEFAULT
}

func (p *QueryPrivilegedQueueRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPrivilegedQueueRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueNamePrefix = v
	}
	return nil
}

func (p *QueryPrivilegedQueueRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryPrivilegedQueueRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPrivilegedQueueRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueNamePrefix() {
		if err := oprot.WriteFieldBegin("queueNamePrefix", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:queueNamePrefix: %s", p, err)
		}
		if err := oprot.WriteString(string(p.QueueNamePrefix)); err != nil {
			return fmt.Errorf("%T.queueNamePrefix (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:queueNamePrefix: %s", p, err)
		}
	}
	return err
}

func (p *QueryPrivilegedQueueRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPrivilegedQueueRequest(%+v)", *p)
}

type QueryPrivilegedQueueResponseEntry struct {
	QueueName                            string `thrift:"queueName,1,required" json:"queueName"`
	ApproximateMessageNumber             int64  `thrift:"approximateMessageNumber,2,required" json:"approximateMessageNumber"`
	ApproximateAvailableMessageNumber    int64  `thrift:"approximateAvailableMessageNumber,3,required" json:"approximateAvailableMessageNumber"`
	ApproximateInvisibilityMessageNumber int64  `thrift:"approximateInvisibilityMessageNumber,4,required" json:"approximateInvisibilityMessageNumber"`
}

func NewQueryPrivilegedQueueResponseEntry() *QueryPrivilegedQueueResponseEntry {
	return &QueryPrivilegedQueueResponseEntry{}
}

func (p *QueryPrivilegedQueueResponseEntry) GetQueueName() string {
	return p.QueueName
}

func (p *QueryPrivilegedQueueResponseEntry) GetApproximateMessageNumber() int64 {
	return p.ApproximateMessageNumber
}

func (p *QueryPrivilegedQueueResponseEntry) GetApproximateAvailableMessageNumber() int64 {
	return p.ApproximateAvailableMessageNumber
}

func (p *QueryPrivilegedQueueResponseEntry) GetApproximateInvisibilityMessageNumber() int64 {
	return p.ApproximateInvisibilityMessageNumber
}
func (p *QueryPrivilegedQueueResponseEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPrivilegedQueueResponseEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *QueryPrivilegedQueueResponseEntry) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ApproximateMessageNumber = v
	}
	return nil
}

func (p *QueryPrivilegedQueueResponseEntry) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ApproximateAvailableMessageNumber = v
	}
	return nil
}

func (p *QueryPrivilegedQueueResponseEntry) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ApproximateInvisibilityMessageNumber = v
	}
	return nil
}

func (p *QueryPrivilegedQueueResponseEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryPrivilegedQueueResponseEntry"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPrivilegedQueueResponseEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *QueryPrivilegedQueueResponseEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("approximateMessageNumber", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:approximateMessageNumber: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ApproximateMessageNumber)); err != nil {
		return fmt.Errorf("%T.approximateMessageNumber (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:approximateMessageNumber: %s", p, err)
	}
	return err
}

func (p *QueryPrivilegedQueueResponseEntry) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("approximateAvailableMessageNumber", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:approximateAvailableMessageNumber: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ApproximateAvailableMessageNumber)); err != nil {
		return fmt.Errorf("%T.approximateAvailableMessageNumber (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:approximateAvailableMessageNumber: %s", p, err)
	}
	return err
}

func (p *QueryPrivilegedQueueResponseEntry) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("approximateInvisibilityMessageNumber", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:approximateInvisibilityMessageNumber: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ApproximateInvisibilityMessageNumber)); err != nil {
		return fmt.Errorf("%T.approximateInvisibilityMessageNumber (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:approximateInvisibilityMessageNumber: %s", p, err)
	}
	return err
}

func (p *QueryPrivilegedQueueResponseEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPrivilegedQueueResponseEntry(%+v)", *p)
}

type QueryPrivilegedQueueResponse struct {
	QueueList []*QueryPrivilegedQueueResponseEntry `thrift:"queueList,1,required" json:"queueList"`
}

func NewQueryPrivilegedQueueResponse() *QueryPrivilegedQueueResponse {
	return &QueryPrivilegedQueueResponse{}
}

func (p *QueryPrivilegedQueueResponse) GetQueueList() []*QueryPrivilegedQueueResponseEntry {
	return p.QueueList
}
func (p *QueryPrivilegedQueueResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPrivilegedQueueResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*QueryPrivilegedQueueResponseEntry, 0, size)
	p.QueueList = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &QueryPrivilegedQueueResponseEntry{}
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.QueueList = append(p.QueueList, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *QueryPrivilegedQueueResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryPrivilegedQueueResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPrivilegedQueueResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.QueueList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.QueueList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueList: %s", p, err)
	}
	return err
}

func (p *QueryPrivilegedQueueResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPrivilegedQueueResponse(%+v)", *p)
}

type SetPermissionRequest struct {
	QueueName   string     `thrift:"queueName,1,required" json:"queueName"`
	DeveloperId string     `thrift:"developerId,2,required" json:"developerId"`
	Permission  Permission `thrift:"permission,3,required" json:"permission"`
}

func NewSetPermissionRequest() *SetPermissionRequest {
	return &SetPermissionRequest{}
}

func (p *SetPermissionRequest) GetQueueName() string {
	return p.QueueName
}

func (p *SetPermissionRequest) GetDeveloperId() string {
	return p.DeveloperId
}

func (p *SetPermissionRequest) GetPermission() Permission {
	return p.Permission
}
func (p *SetPermissionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetPermissionRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *SetPermissionRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DeveloperId = v
	}
	return nil
}

func (p *SetPermissionRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := Permission(v)
		p.Permission = temp
	}
	return nil
}

func (p *SetPermissionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetPermissionRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetPermissionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *SetPermissionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:developerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeveloperId)); err != nil {
		return fmt.Errorf("%T.developerId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:developerId: %s", p, err)
	}
	return err
}

func (p *SetPermissionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permission", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:permission: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Permission)); err != nil {
		return fmt.Errorf("%T.permission (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:permission: %s", p, err)
	}
	return err
}

func (p *SetPermissionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetPermissionRequest(%+v)", *p)
}

type RevokePermissionRequest struct {
	QueueName   string `thrift:"queueName,1,required" json:"queueName"`
	DeveloperId string `thrift:"developerId,2,required" json:"developerId"`
}

func NewRevokePermissionRequest() *RevokePermissionRequest {
	return &RevokePermissionRequest{}
}

func (p *RevokePermissionRequest) GetQueueName() string {
	return p.QueueName
}

func (p *RevokePermissionRequest) GetDeveloperId() string {
	return p.DeveloperId
}
func (p *RevokePermissionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePermissionRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *RevokePermissionRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DeveloperId = v
	}
	return nil
}

func (p *RevokePermissionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RevokePermissionRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePermissionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *RevokePermissionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:developerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeveloperId)); err != nil {
		return fmt.Errorf("%T.developerId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:developerId: %s", p, err)
	}
	return err
}

func (p *RevokePermissionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePermissionRequest(%+v)", *p)
}

type QueryPermissionRequest struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
}

func NewQueryPermissionRequest() *QueryPermissionRequest {
	return &QueryPermissionRequest{}
}

func (p *QueryPermissionRequest) GetQueueName() string {
	return p.QueueName
}
func (p *QueryPermissionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPermissionRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *QueryPermissionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryPermissionRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPermissionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *QueryPermissionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPermissionRequest(%+v)", *p)
}

type QueryPermissionResponse struct {
	Permission Permission `thrift:"permission,1,required" json:"permission"`
}

func NewQueryPermissionResponse() *QueryPermissionResponse {
	return &QueryPermissionResponse{}
}

func (p *QueryPermissionResponse) GetPermission() Permission {
	return p.Permission
}
func (p *QueryPermissionResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPermissionResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := Permission(v)
		p.Permission = temp
	}
	return nil
}

func (p *QueryPermissionResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryPermissionResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPermissionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permission", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:permission: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Permission)); err != nil {
		return fmt.Errorf("%T.permission (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:permission: %s", p, err)
	}
	return err
}

func (p *QueryPermissionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPermissionResponse(%+v)", *p)
}

type QueryPermissionForIdRequest struct {
	QueueName   string `thrift:"queueName,1,required" json:"queueName"`
	DeveloperId string `thrift:"developerId,2,required" json:"developerId"`
}

func NewQueryPermissionForIdRequest() *QueryPermissionForIdRequest {
	return &QueryPermissionForIdRequest{}
}

func (p *QueryPermissionForIdRequest) GetQueueName() string {
	return p.QueueName
}

func (p *QueryPermissionForIdRequest) GetDeveloperId() string {
	return p.DeveloperId
}
func (p *QueryPermissionForIdRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPermissionForIdRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *QueryPermissionForIdRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DeveloperId = v
	}
	return nil
}

func (p *QueryPermissionForIdRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryPermissionForIdRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPermissionForIdRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *QueryPermissionForIdRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:developerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeveloperId)); err != nil {
		return fmt.Errorf("%T.developerId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:developerId: %s", p, err)
	}
	return err
}

func (p *QueryPermissionForIdRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPermissionForIdRequest(%+v)", *p)
}

type QueryPermissionForIdResponse struct {
	Permission Permission `thrift:"permission,1,required" json:"permission"`
}

func NewQueryPermissionForIdResponse() *QueryPermissionForIdResponse {
	return &QueryPermissionForIdResponse{}
}

func (p *QueryPermissionForIdResponse) GetPermission() Permission {
	return p.Permission
}
func (p *QueryPermissionForIdResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPermissionForIdResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := Permission(v)
		p.Permission = temp
	}
	return nil
}

func (p *QueryPermissionForIdResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryPermissionForIdResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPermissionForIdResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permission", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:permission: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Permission)); err != nil {
		return fmt.Errorf("%T.permission (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:permission: %s", p, err)
	}
	return err
}

func (p *QueryPermissionForIdResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPermissionForIdResponse(%+v)", *p)
}

type ListPermissionsRequest struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
}

func NewListPermissionsRequest() *ListPermissionsRequest {
	return &ListPermissionsRequest{}
}

func (p *ListPermissionsRequest) GetQueueName() string {
	return p.QueueName
}
func (p *ListPermissionsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPermissionsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *ListPermissionsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListPermissionsRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPermissionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *ListPermissionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPermissionsRequest(%+v)", *p)
}

type ListPermissionsResponse struct {
	PermissionList map[string]Permission `thrift:"permissionList,1" json:"permissionList"`
}

func NewListPermissionsResponse() *ListPermissionsResponse {
	return &ListPermissionsResponse{}
}

func (p *ListPermissionsResponse) GetPermissionList() map[string]Permission {
	return p.PermissionList
}
func (p *ListPermissionsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPermissionsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]Permission, size)
	p.PermissionList = tMap
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key5 = v
		}
		var _val6 Permission
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := Permission(v)
			_val6 = temp
		}
		p.PermissionList[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ListPermissionsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListPermissionsResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPermissionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permissionList", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:permissionList: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.PermissionList)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.PermissionList {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:permissionList: %s", p, err)
	}
	return err
}

func (p *ListPermissionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPermissionsResponse(%+v)", *p)
}

type AttributesFilter struct {
	Attributes      map[string]*message.MessageAttribute `thrift:"attributes,1,required" json:"attributes"`
	LogicalOperator LogicalOperator                      `thrift:"logicalOperator,2,required" json:"logicalOperator"`
}

func NewAttributesFilter() *AttributesFilter {
	return &AttributesFilter{}
}

func (p *AttributesFilter) GetAttributes() map[string]*message.MessageAttribute {
	return p.Attributes
}

func (p *AttributesFilter) GetLogicalOperator() LogicalOperator {
	return p.LogicalOperator
}
func (p *AttributesFilter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AttributesFilter) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*message.MessageAttribute, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key7 = v
		}
		_val8 := &message.MessageAttribute{}
		if err := _val8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val8, err)
		}
		p.Attributes[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *AttributesFilter) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := LogicalOperator(v)
		p.LogicalOperator = temp
	}
	return nil
}

func (p *AttributesFilter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AttributesFilter"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AttributesFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:attributes: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Attributes)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:attributes: %s", p, err)
	}
	return err
}

func (p *AttributesFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("logicalOperator", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:logicalOperator: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LogicalOperator)); err != nil {
		return fmt.Errorf("%T.logicalOperator (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:logicalOperator: %s", p, err)
	}
	return err
}

func (p *AttributesFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttributesFilter(%+v)", *p)
}

type CreateTagRequest struct {
	QueueName        string                    `thrift:"queueName,1,required" json:"queueName"`
	TagName          string                    `thrift:"tagName,2,required" json:"tagName"`
	StartTimestamp   *int64                    `thrift:"startTimestamp,3" json:"startTimestamp"`
	ReadQPSQuota     *int64                    `thrift:"readQPSQuota,4" json:"readQPSQuota"`
	AttributeName    *string                   `thrift:"attributeName,5" json:"attributeName"`
	AttributeValue   *message.MessageAttribute `thrift:"attributeValue,6" json:"attributeValue"`
	UserAttributes   map[string]string         `thrift:"userAttributes,7" json:"userAttributes"`
	AttributesFilter *AttributesFilter         `thrift:"attributesFilter,8" json:"attributesFilter"`
}

func NewCreateTagRequest() *CreateTagRequest {
	return &CreateTagRequest{}
}

func (p *CreateTagRequest) GetQueueName() string {
	return p.QueueName
}

func (p *CreateTagRequest) GetTagName() string {
	return p.TagName
}

var CreateTagRequest_StartTimestamp_DEFAULT int64

func (p *CreateTagRequest) GetStartTimestamp() int64 {
	if !p.IsSetStartTimestamp() {
		return CreateTagRequest_StartTimestamp_DEFAULT
	}
	return *p.StartTimestamp
}

var CreateTagRequest_ReadQPSQuota_DEFAULT int64

func (p *CreateTagRequest) GetReadQPSQuota() int64 {
	if !p.IsSetReadQPSQuota() {
		return CreateTagRequest_ReadQPSQuota_DEFAULT
	}
	return *p.ReadQPSQuota
}

var CreateTagRequest_AttributeName_DEFAULT string

func (p *CreateTagRequest) GetAttributeName() string {
	if !p.IsSetAttributeName() {
		return CreateTagRequest_AttributeName_DEFAULT
	}
	return *p.AttributeName
}

var CreateTagRequest_AttributeValue_DEFAULT *message.MessageAttribute

func (p *CreateTagRequest) GetAttributeValue() *message.MessageAttribute {
	if !p.IsSetAttributeValue() {
		return CreateTagRequest_AttributeValue_DEFAULT
	}
	return p.AttributeValue
}

var CreateTagRequest_UserAttributes_DEFAULT map[string]string

func (p *CreateTagRequest) GetUserAttributes() map[string]string {
	return p.UserAttributes
}

var CreateTagRequest_AttributesFilter_DEFAULT *AttributesFilter

func (p *CreateTagRequest) GetAttributesFilter() *AttributesFilter {
	if !p.IsSetAttributesFilter() {
		return CreateTagRequest_AttributesFilter_DEFAULT
	}
	return p.AttributesFilter
}
func (p *CreateTagRequest) IsSetStartTimestamp() bool {
	return p.StartTimestamp != nil
}

func (p *CreateTagRequest) IsSetReadQPSQuota() bool {
	return p.ReadQPSQuota != nil
}

func (p *CreateTagRequest) IsSetAttributeName() bool {
	return p.AttributeName != nil
}

func (p *CreateTagRequest) IsSetAttributeValue() bool {
	return p.AttributeValue != nil
}

func (p *CreateTagRequest) IsSetUserAttributes() bool {
	return p.UserAttributes != nil
}

func (p *CreateTagRequest) IsSetAttributesFilter() bool {
	return p.AttributesFilter != nil
}

func (p *CreateTagRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTagRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *CreateTagRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TagName = v
	}
	return nil
}

func (p *CreateTagRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.StartTimestamp = &v
	}
	return nil
}

func (p *CreateTagRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ReadQPSQuota = &v
	}
	return nil
}

func (p *CreateTagRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.AttributeName = &v
	}
	return nil
}

func (p *CreateTagRequest) ReadField6(iprot thrift.TProtocol) error {
	p.AttributeValue = &message.MessageAttribute{}
	if err := p.AttributeValue.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AttributeValue, err)
	}
	return nil
}

func (p *CreateTagRequest) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.UserAttributes = tMap
	for i := 0; i < size; i++ {
		var _key9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key9 = v
		}
		var _val10 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val10 = v
		}
		p.UserAttributes[_key9] = _val10
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *CreateTagRequest) ReadField8(iprot thrift.TProtocol) error {
	p.AttributesFilter = &AttributesFilter{}
	if err := p.AttributesFilter.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AttributesFilter, err)
	}
	return nil
}

func (p *CreateTagRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateTagRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTagRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *CreateTagRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TagName)); err != nil {
		return fmt.Errorf("%T.tagName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
	}
	return err
}

func (p *CreateTagRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTimestamp() {
		if err := oprot.WriteFieldBegin("startTimestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:startTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartTimestamp)); err != nil {
			return fmt.Errorf("%T.startTimestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:startTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadQPSQuota() {
		if err := oprot.WriteFieldBegin("readQPSQuota", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:readQPSQuota: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ReadQPSQuota)); err != nil {
			return fmt.Errorf("%T.readQPSQuota (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:readQPSQuota: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributeName() {
		if err := oprot.WriteFieldBegin("attributeName", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:attributeName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.AttributeName)); err != nil {
			return fmt.Errorf("%T.attributeName (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:attributeName: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributeValue() {
		if err := oprot.WriteFieldBegin("attributeValue", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:attributeValue: %s", p, err)
		}
		if err := p.AttributeValue.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AttributeValue, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:attributeValue: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserAttributes() {
		if err := oprot.WriteFieldBegin("userAttributes", thrift.MAP, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:userAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.UserAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.UserAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:userAttributes: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributesFilter() {
		if err := oprot.WriteFieldBegin("attributesFilter", thrift.STRUCT, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:attributesFilter: %s", p, err)
		}
		if err := p.AttributesFilter.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AttributesFilter, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:attributesFilter: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTagRequest(%+v)", *p)
}

type CreateTagResponse struct {
	QueueName      string `thrift:"queueName,1,required" json:"queueName"`
	TagName        string `thrift:"tagName,2,required" json:"tagName"`
	StartTimestamp int64  `thrift:"startTimestamp,3,required" json:"startTimestamp"`
	ReadQPSQuota   *int64 `thrift:"readQPSQuota,4" json:"readQPSQuota"`
}

func NewCreateTagResponse() *CreateTagResponse {
	return &CreateTagResponse{}
}

func (p *CreateTagResponse) GetQueueName() string {
	return p.QueueName
}

func (p *CreateTagResponse) GetTagName() string {
	return p.TagName
}

func (p *CreateTagResponse) GetStartTimestamp() int64 {
	return p.StartTimestamp
}

var CreateTagResponse_ReadQPSQuota_DEFAULT int64

func (p *CreateTagResponse) GetReadQPSQuota() int64 {
	if !p.IsSetReadQPSQuota() {
		return CreateTagResponse_ReadQPSQuota_DEFAULT
	}
	return *p.ReadQPSQuota
}
func (p *CreateTagResponse) IsSetReadQPSQuota() bool {
	return p.ReadQPSQuota != nil
}

func (p *CreateTagResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTagResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *CreateTagResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TagName = v
	}
	return nil
}

func (p *CreateTagResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.StartTimestamp = v
	}
	return nil
}

func (p *CreateTagResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ReadQPSQuota = &v
	}
	return nil
}

func (p *CreateTagResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateTagResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTagResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *CreateTagResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TagName)); err != nil {
		return fmt.Errorf("%T.tagName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
	}
	return err
}

func (p *CreateTagResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTimestamp", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:startTimestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartTimestamp)); err != nil {
		return fmt.Errorf("%T.startTimestamp (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:startTimestamp: %s", p, err)
	}
	return err
}

func (p *CreateTagResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadQPSQuota() {
		if err := oprot.WriteFieldBegin("readQPSQuota", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:readQPSQuota: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ReadQPSQuota)); err != nil {
			return fmt.Errorf("%T.readQPSQuota (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:readQPSQuota: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTagResponse(%+v)", *p)
}

type DeleteTagRequest struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
	TagName   string `thrift:"tagName,2,required" json:"tagName"`
}

func NewDeleteTagRequest() *DeleteTagRequest {
	return &DeleteTagRequest{}
}

func (p *DeleteTagRequest) GetQueueName() string {
	return p.QueueName
}

func (p *DeleteTagRequest) GetTagName() string {
	return p.TagName
}
func (p *DeleteTagRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTagRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *DeleteTagRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TagName = v
	}
	return nil
}

func (p *DeleteTagRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteTagRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTagRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *DeleteTagRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TagName)); err != nil {
		return fmt.Errorf("%T.tagName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
	}
	return err
}

func (p *DeleteTagRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTagRequest(%+v)", *p)
}

type GetTagInfoRequest struct {
	QueueName string  `thrift:"queueName,1,required" json:"queueName"`
	TagName   *string `thrift:"tagName,2" json:"tagName"`
}

func NewGetTagInfoRequest() *GetTagInfoRequest {
	return &GetTagInfoRequest{}
}

func (p *GetTagInfoRequest) GetQueueName() string {
	return p.QueueName
}

var GetTagInfoRequest_TagName_DEFAULT string

func (p *GetTagInfoRequest) GetTagName() string {
	if !p.IsSetTagName() {
		return GetTagInfoRequest_TagName_DEFAULT
	}
	return *p.TagName
}
func (p *GetTagInfoRequest) IsSetTagName() bool {
	return p.TagName != nil
}

func (p *GetTagInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTagInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *GetTagInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TagName = &v
	}
	return nil
}

func (p *GetTagInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTagInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTagInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *GetTagInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagName() {
		if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TagName)); err != nil {
			return fmt.Errorf("%T.tagName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
		}
	}
	return err
}

func (p *GetTagInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagInfoRequest(%+v)", *p)
}

type GetTagInfoResponse struct {
	QueueName        string                    `thrift:"queueName,1,required" json:"queueName"`
	TagName          *string                   `thrift:"tagName,2" json:"tagName"`
	TagState         *QueueState               `thrift:"tagState,3,required" json:"tagState"`
	StartTimestamp   int64                     `thrift:"startTimestamp,4,required" json:"startTimestamp"`
	ReadQPSQuota     *int64                    `thrift:"readQPSQuota,5" json:"readQPSQuota"`
	AttributeName    *string                   `thrift:"attributeName,6" json:"attributeName"`
	AttributeValue   *message.MessageAttribute `thrift:"attributeValue,7" json:"attributeValue"`
	UserAttributes   map[string]string         `thrift:"userAttributes,8" json:"userAttributes"`
	AttributesFilter *AttributesFilter         `thrift:"attributesFilter,9" json:"attributesFilter"`
}

func NewGetTagInfoResponse() *GetTagInfoResponse {
	return &GetTagInfoResponse{}
}

func (p *GetTagInfoResponse) GetQueueName() string {
	return p.QueueName
}

var GetTagInfoResponse_TagName_DEFAULT string

func (p *GetTagInfoResponse) GetTagName() string {
	if !p.IsSetTagName() {
		return GetTagInfoResponse_TagName_DEFAULT
	}
	return *p.TagName
}

var GetTagInfoResponse_TagState_DEFAULT *QueueState

func (p *GetTagInfoResponse) GetTagState() *QueueState {
	if !p.IsSetTagState() {
		return GetTagInfoResponse_TagState_DEFAULT
	}
	return p.TagState
}

func (p *GetTagInfoResponse) GetStartTimestamp() int64 {
	return p.StartTimestamp
}

var GetTagInfoResponse_ReadQPSQuota_DEFAULT int64

func (p *GetTagInfoResponse) GetReadQPSQuota() int64 {
	if !p.IsSetReadQPSQuota() {
		return GetTagInfoResponse_ReadQPSQuota_DEFAULT
	}
	return *p.ReadQPSQuota
}

var GetTagInfoResponse_AttributeName_DEFAULT string

func (p *GetTagInfoResponse) GetAttributeName() string {
	if !p.IsSetAttributeName() {
		return GetTagInfoResponse_AttributeName_DEFAULT
	}
	return *p.AttributeName
}

var GetTagInfoResponse_AttributeValue_DEFAULT *message.MessageAttribute

func (p *GetTagInfoResponse) GetAttributeValue() *message.MessageAttribute {
	if !p.IsSetAttributeValue() {
		return GetTagInfoResponse_AttributeValue_DEFAULT
	}
	return p.AttributeValue
}

var GetTagInfoResponse_UserAttributes_DEFAULT map[string]string

func (p *GetTagInfoResponse) GetUserAttributes() map[string]string {
	return p.UserAttributes
}

var GetTagInfoResponse_AttributesFilter_DEFAULT *AttributesFilter

func (p *GetTagInfoResponse) GetAttributesFilter() *AttributesFilter {
	if !p.IsSetAttributesFilter() {
		return GetTagInfoResponse_AttributesFilter_DEFAULT
	}
	return p.AttributesFilter
}
func (p *GetTagInfoResponse) IsSetTagName() bool {
	return p.TagName != nil
}

func (p *GetTagInfoResponse) IsSetTagState() bool {
	return p.TagState != nil
}

func (p *GetTagInfoResponse) IsSetReadQPSQuota() bool {
	return p.ReadQPSQuota != nil
}

func (p *GetTagInfoResponse) IsSetAttributeName() bool {
	return p.AttributeName != nil
}

func (p *GetTagInfoResponse) IsSetAttributeValue() bool {
	return p.AttributeValue != nil
}

func (p *GetTagInfoResponse) IsSetUserAttributes() bool {
	return p.UserAttributes != nil
}

func (p *GetTagInfoResponse) IsSetAttributesFilter() bool {
	return p.AttributesFilter != nil
}

func (p *GetTagInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTagInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *GetTagInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TagName = &v
	}
	return nil
}

func (p *GetTagInfoResponse) ReadField3(iprot thrift.TProtocol) error {
	p.TagState = &QueueState{}
	if err := p.TagState.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TagState, err)
	}
	return nil
}

func (p *GetTagInfoResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartTimestamp = v
	}
	return nil
}

func (p *GetTagInfoResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ReadQPSQuota = &v
	}
	return nil
}

func (p *GetTagInfoResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.AttributeName = &v
	}
	return nil
}

func (p *GetTagInfoResponse) ReadField7(iprot thrift.TProtocol) error {
	p.AttributeValue = &message.MessageAttribute{}
	if err := p.AttributeValue.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AttributeValue, err)
	}
	return nil
}

func (p *GetTagInfoResponse) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.UserAttributes = tMap
	for i := 0; i < size; i++ {
		var _key11 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key11 = v
		}
		var _val12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val12 = v
		}
		p.UserAttributes[_key11] = _val12
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetTagInfoResponse) ReadField9(iprot thrift.TProtocol) error {
	p.AttributesFilter = &AttributesFilter{}
	if err := p.AttributesFilter.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AttributesFilter, err)
	}
	return nil
}

func (p *GetTagInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTagInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTagInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *GetTagInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagName() {
		if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TagName)); err != nil {
			return fmt.Errorf("%T.tagName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
		}
	}
	return err
}

func (p *GetTagInfoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagState", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:tagState: %s", p, err)
	}
	if err := p.TagState.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TagState, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:tagState: %s", p, err)
	}
	return err
}

func (p *GetTagInfoResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTimestamp", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:startTimestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartTimestamp)); err != nil {
		return fmt.Errorf("%T.startTimestamp (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:startTimestamp: %s", p, err)
	}
	return err
}

func (p *GetTagInfoResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadQPSQuota() {
		if err := oprot.WriteFieldBegin("readQPSQuota", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:readQPSQuota: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ReadQPSQuota)); err != nil {
			return fmt.Errorf("%T.readQPSQuota (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:readQPSQuota: %s", p, err)
		}
	}
	return err
}

func (p *GetTagInfoResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributeName() {
		if err := oprot.WriteFieldBegin("attributeName", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:attributeName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.AttributeName)); err != nil {
			return fmt.Errorf("%T.attributeName (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:attributeName: %s", p, err)
		}
	}
	return err
}

func (p *GetTagInfoResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributeValue() {
		if err := oprot.WriteFieldBegin("attributeValue", thrift.STRUCT, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:attributeValue: %s", p, err)
		}
		if err := p.AttributeValue.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AttributeValue, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:attributeValue: %s", p, err)
		}
	}
	return err
}

func (p *GetTagInfoResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserAttributes() {
		if err := oprot.WriteFieldBegin("userAttributes", thrift.MAP, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:userAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.UserAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.UserAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:userAttributes: %s", p, err)
		}
	}
	return err
}

func (p *GetTagInfoResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributesFilter() {
		if err := oprot.WriteFieldBegin("attributesFilter", thrift.STRUCT, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:attributesFilter: %s", p, err)
		}
		if err := p.AttributesFilter.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AttributesFilter, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:attributesFilter: %s", p, err)
		}
	}
	return err
}

func (p *GetTagInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagInfoResponse(%+v)", *p)
}

type ListTagRequest struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
}

func NewListTagRequest() *ListTagRequest {
	return &ListTagRequest{}
}

func (p *ListTagRequest) GetQueueName() string {
	return p.QueueName
}
func (p *ListTagRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *ListTagRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListTagRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *ListTagRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagRequest(%+v)", *p)
}

type ListTagResponse struct {
	QueueName string   `thrift:"queueName,1,required" json:"queueName"`
	TagName   []string `thrift:"tagName,2,required" json:"tagName"`
}

func NewListTagResponse() *ListTagResponse {
	return &ListTagResponse{}
}

func (p *ListTagResponse) GetQueueName() string {
	return p.QueueName
}

func (p *ListTagResponse) GetTagName() []string {
	return p.TagName
}
func (p *ListTagResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *ListTagResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.TagName = tSlice
	for i := 0; i < size; i++ {
		var _elem13 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem13 = v
		}
		p.TagName = append(p.TagName, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListTagResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListTagResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *ListTagResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagName", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.TagName)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.TagName {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
	}
	return err
}

func (p *ListTagResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagResponse(%+v)", *p)
}

type QueryMetricRequest struct {
	QueueName            *string           `thrift:"queueName,1" json:"queueName"`
	StartTime            *int64            `thrift:"startTime,2" json:"startTime"`
	EndTime              *int64            `thrift:"endTime,3" json:"endTime"`
	Metrics              *string           `thrift:"metrics,4" json:"metrics"`
	Tags                 map[string]string `thrift:"tags,5" json:"tags"`
	Aggregator           *string           `thrift:"aggregator,6" json:"aggregator"`
	DownsampleAggregator *string           `thrift:"downsampleAggregator,7" json:"downsampleAggregator"`
	DownsampleInterval   *int32            `thrift:"downsampleInterval,8" json:"downsampleInterval"`
	DownsampleTimeUnit   *string           `thrift:"downsampleTimeUnit,9" json:"downsampleTimeUnit"`
	CalRate              *bool             `thrift:"calRate,10" json:"calRate"`
	TagName              *string           `thrift:"tagName,11" json:"tagName"`
}

func NewQueryMetricRequest() *QueryMetricRequest {
	return &QueryMetricRequest{}
}

var QueryMetricRequest_QueueName_DEFAULT string

func (p *QueryMetricRequest) GetQueueName() string {
	if !p.IsSetQueueName() {
		return QueryMetricRequest_QueueName_DEFAULT
	}
	return *p.QueueName
}

var QueryMetricRequest_StartTime_DEFAULT int64

func (p *QueryMetricRequest) GetStartTime() int64 {
	if !p.IsSetStartTime() {
		return QueryMetricRequest_StartTime_DEFAULT
	}
	return *p.StartTime
}

var QueryMetricRequest_EndTime_DEFAULT int64

func (p *QueryMetricRequest) GetEndTime() int64 {
	if !p.IsSetEndTime() {
		return QueryMetricRequest_EndTime_DEFAULT
	}
	return *p.EndTime
}

var QueryMetricRequest_Metrics_DEFAULT string

func (p *QueryMetricRequest) GetMetrics() string {
	if !p.IsSetMetrics() {
		return QueryMetricRequest_Metrics_DEFAULT
	}
	return *p.Metrics
}

var QueryMetricRequest_Tags_DEFAULT map[string]string

func (p *QueryMetricRequest) GetTags() map[string]string {
	return p.Tags
}

var QueryMetricRequest_Aggregator_DEFAULT string

func (p *QueryMetricRequest) GetAggregator() string {
	if !p.IsSetAggregator() {
		return QueryMetricRequest_Aggregator_DEFAULT
	}
	return *p.Aggregator
}

var QueryMetricRequest_DownsampleAggregator_DEFAULT string

func (p *QueryMetricRequest) GetDownsampleAggregator() string {
	if !p.IsSetDownsampleAggregator() {
		return QueryMetricRequest_DownsampleAggregator_DEFAULT
	}
	return *p.DownsampleAggregator
}

var QueryMetricRequest_DownsampleInterval_DEFAULT int32

func (p *QueryMetricRequest) GetDownsampleInterval() int32 {
	if !p.IsSetDownsampleInterval() {
		return QueryMetricRequest_DownsampleInterval_DEFAULT
	}
	return *p.DownsampleInterval
}

var QueryMetricRequest_DownsampleTimeUnit_DEFAULT string

func (p *QueryMetricRequest) GetDownsampleTimeUnit() string {
	if !p.IsSetDownsampleTimeUnit() {
		return QueryMetricRequest_DownsampleTimeUnit_DEFAULT
	}
	return *p.DownsampleTimeUnit
}

var QueryMetricRequest_CalRate_DEFAULT bool

func (p *QueryMetricRequest) GetCalRate() bool {
	if !p.IsSetCalRate() {
		return QueryMetricRequest_CalRate_DEFAULT
	}
	return *p.CalRate
}

var QueryMetricRequest_TagName_DEFAULT string

func (p *QueryMetricRequest) GetTagName() string {
	if !p.IsSetTagName() {
		return QueryMetricRequest_TagName_DEFAULT
	}
	return *p.TagName
}
func (p *QueryMetricRequest) IsSetQueueName() bool {
	return p.QueueName != nil
}

func (p *QueryMetricRequest) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *QueryMetricRequest) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *QueryMetricRequest) IsSetMetrics() bool {
	return p.Metrics != nil
}

func (p *QueryMetricRequest) IsSetTags() bool {
	return p.Tags != nil
}

func (p *QueryMetricRequest) IsSetAggregator() bool {
	return p.Aggregator != nil
}

func (p *QueryMetricRequest) IsSetDownsampleAggregator() bool {
	return p.DownsampleAggregator != nil
}

func (p *QueryMetricRequest) IsSetDownsampleInterval() bool {
	return p.DownsampleInterval != nil
}

func (p *QueryMetricRequest) IsSetDownsampleTimeUnit() bool {
	return p.DownsampleTimeUnit != nil
}

func (p *QueryMetricRequest) IsSetCalRate() bool {
	return p.CalRate != nil
}

func (p *QueryMetricRequest) IsSetTagName() bool {
	return p.TagName != nil
}

func (p *QueryMetricRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMetricRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = &v
	}
	return nil
}

func (p *QueryMetricRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *QueryMetricRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.EndTime = &v
	}
	return nil
}

func (p *QueryMetricRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Metrics = &v
	}
	return nil
}

func (p *QueryMetricRequest) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Tags = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key14 = v
		}
		var _val15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val15 = v
		}
		p.Tags[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *QueryMetricRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Aggregator = &v
	}
	return nil
}

func (p *QueryMetricRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.DownsampleAggregator = &v
	}
	return nil
}

func (p *QueryMetricRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.DownsampleInterval = &v
	}
	return nil
}

func (p *QueryMetricRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.DownsampleTimeUnit = &v
	}
	return nil
}

func (p *QueryMetricRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.CalRate = &v
	}
	return nil
}

func (p *QueryMetricRequest) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.TagName = &v
	}
	return nil
}

func (p *QueryMetricRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryMetricRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueName() {
		if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.QueueName)); err != nil {
			return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("startTime", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:startTime: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.startTime (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:startTime: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err := oprot.WriteFieldBegin("endTime", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:endTime: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EndTime)); err != nil {
			return fmt.Errorf("%T.endTime (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:endTime: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetrics() {
		if err := oprot.WriteFieldBegin("metrics", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:metrics: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Metrics)); err != nil {
			return fmt.Errorf("%T.metrics (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:metrics: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err := oprot.WriteFieldBegin("tags", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:tags: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Tags)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Tags {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:tags: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggregator() {
		if err := oprot.WriteFieldBegin("aggregator", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:aggregator: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Aggregator)); err != nil {
			return fmt.Errorf("%T.aggregator (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:aggregator: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownsampleAggregator() {
		if err := oprot.WriteFieldBegin("downsampleAggregator", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:downsampleAggregator: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DownsampleAggregator)); err != nil {
			return fmt.Errorf("%T.downsampleAggregator (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:downsampleAggregator: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownsampleInterval() {
		if err := oprot.WriteFieldBegin("downsampleInterval", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:downsampleInterval: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.DownsampleInterval)); err != nil {
			return fmt.Errorf("%T.downsampleInterval (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:downsampleInterval: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownsampleTimeUnit() {
		if err := oprot.WriteFieldBegin("downsampleTimeUnit", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:downsampleTimeUnit: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DownsampleTimeUnit)); err != nil {
			return fmt.Errorf("%T.downsampleTimeUnit (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:downsampleTimeUnit: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCalRate() {
		if err := oprot.WriteFieldBegin("calRate", thrift.BOOL, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:calRate: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.CalRate)); err != nil {
			return fmt.Errorf("%T.calRate (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:calRate: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagName() {
		if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:tagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TagName)); err != nil {
			return fmt.Errorf("%T.tagName (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:tagName: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMetricRequest(%+v)", *p)
}

type TimeSeriesData struct {
	Metric *string           `thrift:"metric,1" json:"metric"`
	Tags   map[string]string `thrift:"tags,2" json:"tags"`
	Data   map[int64]float64 `thrift:"data,3" json:"data"`
}

func NewTimeSeriesData() *TimeSeriesData {
	return &TimeSeriesData{}
}

var TimeSeriesData_Metric_DEFAULT string

func (p *TimeSeriesData) GetMetric() string {
	if !p.IsSetMetric() {
		return TimeSeriesData_Metric_DEFAULT
	}
	return *p.Metric
}

var TimeSeriesData_Tags_DEFAULT map[string]string

func (p *TimeSeriesData) GetTags() map[string]string {
	return p.Tags
}

var TimeSeriesData_Data_DEFAULT map[int64]float64

func (p *TimeSeriesData) GetData() map[int64]float64 {
	return p.Data
}
func (p *TimeSeriesData) IsSetMetric() bool {
	return p.Metric != nil
}

func (p *TimeSeriesData) IsSetTags() bool {
	return p.Tags != nil
}

func (p *TimeSeriesData) IsSetData() bool {
	return p.Data != nil
}

func (p *TimeSeriesData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TimeSeriesData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Metric = &v
	}
	return nil
}

func (p *TimeSeriesData) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Tags = tMap
	for i := 0; i < size; i++ {
		var _key16 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key16 = v
		}
		var _val17 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val17 = v
		}
		p.Tags[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TimeSeriesData) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int64]float64, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key18 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key18 = v
		}
		var _val19 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val19 = v
		}
		p.Data[_key18] = _val19
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TimeSeriesData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TimeSeriesData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TimeSeriesData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetric() {
		if err := oprot.WriteFieldBegin("metric", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:metric: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Metric)); err != nil {
			return fmt.Errorf("%T.metric (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:metric: %s", p, err)
		}
	}
	return err
}

func (p *TimeSeriesData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err := oprot.WriteFieldBegin("tags", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:tags: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Tags)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Tags {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:tags: %s", p, err)
		}
	}
	return err
}

func (p *TimeSeriesData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:data: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.DOUBLE, len(p.Data)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Data {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteDouble(float64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:data: %s", p, err)
		}
	}
	return err
}

func (p *TimeSeriesData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeSeriesData(%+v)", *p)
}

type VerifyEMQAdminResponse struct {
	Prefix string `thrift:"prefix,1,required" json:"prefix"`
}

func NewVerifyEMQAdminResponse() *VerifyEMQAdminResponse {
	return &VerifyEMQAdminResponse{}
}

func (p *VerifyEMQAdminResponse) GetPrefix() string {
	return p.Prefix
}
func (p *VerifyEMQAdminResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyEMQAdminResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Prefix = v
	}
	return nil
}

func (p *VerifyEMQAdminResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VerifyEMQAdminResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyEMQAdminResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("prefix", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:prefix: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Prefix)); err != nil {
		return fmt.Errorf("%T.prefix (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:prefix: %s", p, err)
	}
	return err
}

func (p *VerifyEMQAdminResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyEMQAdminResponse(%+v)", *p)
}

type VerifyEMQAdminRoleRequest struct {
	GranteeId *string `thrift:"granteeId,1" json:"granteeId"`
}

func NewVerifyEMQAdminRoleRequest() *VerifyEMQAdminRoleRequest {
	return &VerifyEMQAdminRoleRequest{}
}

var VerifyEMQAdminRoleRequest_GranteeId_DEFAULT string

func (p *VerifyEMQAdminRoleRequest) GetGranteeId() string {
	if !p.IsSetGranteeId() {
		return VerifyEMQAdminRoleRequest_GranteeId_DEFAULT
	}
	return *p.GranteeId
}
func (p *VerifyEMQAdminRoleRequest) IsSetGranteeId() bool {
	return p.GranteeId != nil
}

func (p *VerifyEMQAdminRoleRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyEMQAdminRoleRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.GranteeId = &v
	}
	return nil
}

func (p *VerifyEMQAdminRoleRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VerifyEMQAdminRoleRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyEMQAdminRoleRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGranteeId() {
		if err := oprot.WriteFieldBegin("granteeId", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:granteeId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.GranteeId)); err != nil {
			return fmt.Errorf("%T.granteeId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:granteeId: %s", p, err)
		}
	}
	return err
}

func (p *VerifyEMQAdminRoleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyEMQAdminRoleRequest(%+v)", *p)
}

type VerifyEMQAdminRoleResponse struct {
	IsAdminRole bool `thrift:"isAdminRole,1,required" json:"isAdminRole"`
}

func NewVerifyEMQAdminRoleResponse() *VerifyEMQAdminRoleResponse {
	return &VerifyEMQAdminRoleResponse{}
}

func (p *VerifyEMQAdminRoleResponse) GetIsAdminRole() bool {
	return p.IsAdminRole
}
func (p *VerifyEMQAdminRoleResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyEMQAdminRoleResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.IsAdminRole = v
	}
	return nil
}

func (p *VerifyEMQAdminRoleResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VerifyEMQAdminRoleResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyEMQAdminRoleResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isAdminRole", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:isAdminRole: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsAdminRole)); err != nil {
		return fmt.Errorf("%T.isAdminRole (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:isAdminRole: %s", p, err)
	}
	return err
}

func (p *VerifyEMQAdminRoleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyEMQAdminRoleResponse(%+v)", *p)
}

type QueueTag struct {
	QueueName       string                    `thrift:"queueName,1,required" json:"queueName"`
	TagName         string                    `thrift:"tagName,2,required" json:"tagName"`
	TagId           int32                     `thrift:"tagId,3,required" json:"tagId"`
	StartTimestamp  *int64                    `thrift:"startTimestamp,4" json:"startTimestamp"`
	CreateTimestamp *int64                    `thrift:"createTimestamp,5" json:"createTimestamp"`
	AttributeName   *string                   `thrift:"attributeName,6" json:"attributeName"`
	AttributeValue  *message.MessageAttribute `thrift:"attributeValue,7" json:"attributeValue"`
	UserAttributes  map[string]string         `thrift:"userAttributes,8" json:"userAttributes"`
}

func NewQueueTag() *QueueTag {
	return &QueueTag{}
}

func (p *QueueTag) GetQueueName() string {
	return p.QueueName
}

func (p *QueueTag) GetTagName() string {
	return p.TagName
}

func (p *QueueTag) GetTagId() int32 {
	return p.TagId
}

var QueueTag_StartTimestamp_DEFAULT int64

func (p *QueueTag) GetStartTimestamp() int64 {
	if !p.IsSetStartTimestamp() {
		return QueueTag_StartTimestamp_DEFAULT
	}
	return *p.StartTimestamp
}

var QueueTag_CreateTimestamp_DEFAULT int64

func (p *QueueTag) GetCreateTimestamp() int64 {
	if !p.IsSetCreateTimestamp() {
		return QueueTag_CreateTimestamp_DEFAULT
	}
	return *p.CreateTimestamp
}

var QueueTag_AttributeName_DEFAULT string

func (p *QueueTag) GetAttributeName() string {
	if !p.IsSetAttributeName() {
		return QueueTag_AttributeName_DEFAULT
	}
	return *p.AttributeName
}

var QueueTag_AttributeValue_DEFAULT *message.MessageAttribute

func (p *QueueTag) GetAttributeValue() *message.MessageAttribute {
	if !p.IsSetAttributeValue() {
		return QueueTag_AttributeValue_DEFAULT
	}
	return p.AttributeValue
}

var QueueTag_UserAttributes_DEFAULT map[string]string

func (p *QueueTag) GetUserAttributes() map[string]string {
	return p.UserAttributes
}
func (p *QueueTag) IsSetStartTimestamp() bool {
	return p.StartTimestamp != nil
}

func (p *QueueTag) IsSetCreateTimestamp() bool {
	return p.CreateTimestamp != nil
}

func (p *QueueTag) IsSetAttributeName() bool {
	return p.AttributeName != nil
}

func (p *QueueTag) IsSetAttributeValue() bool {
	return p.AttributeValue != nil
}

func (p *QueueTag) IsSetUserAttributes() bool {
	return p.UserAttributes != nil
}

func (p *QueueTag) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueueTag) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *QueueTag) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TagName = v
	}
	return nil
}

func (p *QueueTag) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TagId = v
	}
	return nil
}

func (p *QueueTag) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartTimestamp = &v
	}
	return nil
}

func (p *QueueTag) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CreateTimestamp = &v
	}
	return nil
}

func (p *QueueTag) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.AttributeName = &v
	}
	return nil
}

func (p *QueueTag) ReadField7(iprot thrift.TProtocol) error {
	p.AttributeValue = &message.MessageAttribute{}
	if err := p.AttributeValue.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AttributeValue, err)
	}
	return nil
}

func (p *QueueTag) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.UserAttributes = tMap
	for i := 0; i < size; i++ {
		var _key20 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key20 = v
		}
		var _val21 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val21 = v
		}
		p.UserAttributes[_key20] = _val21
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *QueueTag) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueueTag"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueueTag) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *QueueTag) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TagName)); err != nil {
		return fmt.Errorf("%T.tagName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
	}
	return err
}

func (p *QueueTag) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagId", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:tagId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TagId)); err != nil {
		return fmt.Errorf("%T.tagId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:tagId: %s", p, err)
	}
	return err
}

func (p *QueueTag) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTimestamp() {
		if err := oprot.WriteFieldBegin("startTimestamp", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:startTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartTimestamp)); err != nil {
			return fmt.Errorf("%T.startTimestamp (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:startTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *QueueTag) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTimestamp() {
		if err := oprot.WriteFieldBegin("createTimestamp", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:createTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTimestamp)); err != nil {
			return fmt.Errorf("%T.createTimestamp (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:createTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *QueueTag) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributeName() {
		if err := oprot.WriteFieldBegin("attributeName", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:attributeName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.AttributeName)); err != nil {
			return fmt.Errorf("%T.attributeName (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:attributeName: %s", p, err)
		}
	}
	return err
}

func (p *QueueTag) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributeValue() {
		if err := oprot.WriteFieldBegin("attributeValue", thrift.STRUCT, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:attributeValue: %s", p, err)
		}
		if err := p.AttributeValue.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AttributeValue, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:attributeValue: %s", p, err)
		}
	}
	return err
}

func (p *QueueTag) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserAttributes() {
		if err := oprot.WriteFieldBegin("userAttributes", thrift.MAP, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:userAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.UserAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.UserAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:userAttributes: %s", p, err)
		}
	}
	return err
}

func (p *QueueTag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueueTag(%+v)", *p)
}

type QueueMeta struct {
	QueueName             string                `thrift:"queueName,1,required" json:"queueName"`
	QueueAttribute        *QueueAttribute       `thrift:"queueAttribute,2,required" json:"queueAttribute"`
	QueueQuota            *QueueQuota           `thrift:"queueQuota,3" json:"queueQuota"`
	EnablePriority        *bool                 `thrift:"enablePriority,4" json:"enablePriority"`
	TopicQueue            *bool                 `thrift:"topicQueue,5" json:"topicQueue"`
	DeleteMessageForce    bool                  `thrift:"deleteMessageForce,6" json:"deleteMessageForce"`
	DefaultTagName        *string               `thrift:"defaultTagName,7" json:"defaultTagName"`
	PermissionList        map[string]Permission `thrift:"permissionList,8" json:"permissionList"`
	RedrivePolicy         *RedrivePolicy        `thrift:"redrivePolicy,9" json:"redrivePolicy"`
	SourceQueues          []string              `thrift:"sourceQueues,10" json:"sourceQueues"`
	CreateTimestamp       *int64                `thrift:"createTimestamp,11" json:"createTimestamp"`
	LastModifiedTimestamp *int64                `thrift:"lastModifiedTimestamp,12" json:"lastModifiedTimestamp"`
	QueueTagMap           map[string]*QueueTag  `thrift:"queueTagMap,13" json:"queueTagMap"`
}

func NewQueueMeta() *QueueMeta {
	return &QueueMeta{
		DeleteMessageForce: true,
	}
}

func (p *QueueMeta) GetQueueName() string {
	return p.QueueName
}

var QueueMeta_QueueAttribute_DEFAULT *QueueAttribute

func (p *QueueMeta) GetQueueAttribute() *QueueAttribute {
	if !p.IsSetQueueAttribute() {
		return QueueMeta_QueueAttribute_DEFAULT
	}
	return p.QueueAttribute
}

var QueueMeta_QueueQuota_DEFAULT *QueueQuota

func (p *QueueMeta) GetQueueQuota() *QueueQuota {
	if !p.IsSetQueueQuota() {
		return QueueMeta_QueueQuota_DEFAULT
	}
	return p.QueueQuota
}

var QueueMeta_EnablePriority_DEFAULT bool

func (p *QueueMeta) GetEnablePriority() bool {
	if !p.IsSetEnablePriority() {
		return QueueMeta_EnablePriority_DEFAULT
	}
	return *p.EnablePriority
}

var QueueMeta_TopicQueue_DEFAULT bool

func (p *QueueMeta) GetTopicQueue() bool {
	if !p.IsSetTopicQueue() {
		return QueueMeta_TopicQueue_DEFAULT
	}
	return *p.TopicQueue
}

var QueueMeta_DeleteMessageForce_DEFAULT bool = true

func (p *QueueMeta) GetDeleteMessageForce() bool {
	return p.DeleteMessageForce
}

var QueueMeta_DefaultTagName_DEFAULT string

func (p *QueueMeta) GetDefaultTagName() string {
	if !p.IsSetDefaultTagName() {
		return QueueMeta_DefaultTagName_DEFAULT
	}
	return *p.DefaultTagName
}

var QueueMeta_PermissionList_DEFAULT map[string]Permission

func (p *QueueMeta) GetPermissionList() map[string]Permission {
	return p.PermissionList
}

var QueueMeta_RedrivePolicy_DEFAULT *RedrivePolicy

func (p *QueueMeta) GetRedrivePolicy() *RedrivePolicy {
	if !p.IsSetRedrivePolicy() {
		return QueueMeta_RedrivePolicy_DEFAULT
	}
	return p.RedrivePolicy
}

var QueueMeta_SourceQueues_DEFAULT []string

func (p *QueueMeta) GetSourceQueues() []string {
	return p.SourceQueues
}

var QueueMeta_CreateTimestamp_DEFAULT int64

func (p *QueueMeta) GetCreateTimestamp() int64 {
	if !p.IsSetCreateTimestamp() {
		return QueueMeta_CreateTimestamp_DEFAULT
	}
	return *p.CreateTimestamp
}

var QueueMeta_LastModifiedTimestamp_DEFAULT int64

func (p *QueueMeta) GetLastModifiedTimestamp() int64 {
	if !p.IsSetLastModifiedTimestamp() {
		return QueueMeta_LastModifiedTimestamp_DEFAULT
	}
	return *p.LastModifiedTimestamp
}

var QueueMeta_QueueTagMap_DEFAULT map[string]*QueueTag

func (p *QueueMeta) GetQueueTagMap() map[string]*QueueTag {
	return p.QueueTagMap
}
func (p *QueueMeta) IsSetQueueAttribute() bool {
	return p.QueueAttribute != nil
}

func (p *QueueMeta) IsSetQueueQuota() bool {
	return p.QueueQuota != nil
}

func (p *QueueMeta) IsSetEnablePriority() bool {
	return p.EnablePriority != nil
}

func (p *QueueMeta) IsSetTopicQueue() bool {
	return p.TopicQueue != nil
}

func (p *QueueMeta) IsSetDeleteMessageForce() bool {
	return p.DeleteMessageForce != QueueMeta_DeleteMessageForce_DEFAULT
}

func (p *QueueMeta) IsSetDefaultTagName() bool {
	return p.DefaultTagName != nil
}

func (p *QueueMeta) IsSetPermissionList() bool {
	return p.PermissionList != nil
}

func (p *QueueMeta) IsSetRedrivePolicy() bool {
	return p.RedrivePolicy != nil
}

func (p *QueueMeta) IsSetSourceQueues() bool {
	return p.SourceQueues != nil
}

func (p *QueueMeta) IsSetCreateTimestamp() bool {
	return p.CreateTimestamp != nil
}

func (p *QueueMeta) IsSetLastModifiedTimestamp() bool {
	return p.LastModifiedTimestamp != nil
}

func (p *QueueMeta) IsSetQueueTagMap() bool {
	return p.QueueTagMap != nil
}

func (p *QueueMeta) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueueMeta) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *QueueMeta) ReadField2(iprot thrift.TProtocol) error {
	p.QueueAttribute = &QueueAttribute{}
	if err := p.QueueAttribute.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueAttribute, err)
	}
	return nil
}

func (p *QueueMeta) ReadField3(iprot thrift.TProtocol) error {
	p.QueueQuota = &QueueQuota{}
	if err := p.QueueQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueQuota, err)
	}
	return nil
}

func (p *QueueMeta) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.EnablePriority = &v
	}
	return nil
}

func (p *QueueMeta) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.TopicQueue = &v
	}
	return nil
}

func (p *QueueMeta) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.DeleteMessageForce = v
	}
	return nil
}

func (p *QueueMeta) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.DefaultTagName = &v
	}
	return nil
}

func (p *QueueMeta) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]Permission, size)
	p.PermissionList = tMap
	for i := 0; i < size; i++ {
		var _key22 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key22 = v
		}
		var _val23 Permission
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := Permission(v)
			_val23 = temp
		}
		p.PermissionList[_key22] = _val23
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *QueueMeta) ReadField9(iprot thrift.TProtocol) error {
	p.RedrivePolicy = &RedrivePolicy{}
	if err := p.RedrivePolicy.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RedrivePolicy, err)
	}
	return nil
}

func (p *QueueMeta) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.SourceQueues = tSlice
	for i := 0; i < size; i++ {
		var _elem24 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem24 = v
		}
		p.SourceQueues = append(p.SourceQueues, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *QueueMeta) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.CreateTimestamp = &v
	}
	return nil
}

func (p *QueueMeta) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.LastModifiedTimestamp = &v
	}
	return nil
}

func (p *QueueMeta) ReadField13(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*QueueTag, size)
	p.QueueTagMap = tMap
	for i := 0; i < size; i++ {
		var _key25 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key25 = v
		}
		_val26 := &QueueTag{}
		if err := _val26.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val26, err)
		}
		p.QueueTagMap[_key25] = _val26
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *QueueMeta) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueueMeta"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueueMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *QueueMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueAttribute", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:queueAttribute: %s", p, err)
	}
	if err := p.QueueAttribute.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QueueAttribute, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:queueAttribute: %s", p, err)
	}
	return err
}

func (p *QueueMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueQuota() {
		if err := oprot.WriteFieldBegin("queueQuota", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:queueQuota: %s", p, err)
		}
		if err := p.QueueQuota.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.QueueQuota, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:queueQuota: %s", p, err)
		}
	}
	return err
}

func (p *QueueMeta) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnablePriority() {
		if err := oprot.WriteFieldBegin("enablePriority", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:enablePriority: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.EnablePriority)); err != nil {
			return fmt.Errorf("%T.enablePriority (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:enablePriority: %s", p, err)
		}
	}
	return err
}

func (p *QueueMeta) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopicQueue() {
		if err := oprot.WriteFieldBegin("topicQueue", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:topicQueue: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.TopicQueue)); err != nil {
			return fmt.Errorf("%T.topicQueue (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:topicQueue: %s", p, err)
		}
	}
	return err
}

func (p *QueueMeta) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteMessageForce() {
		if err := oprot.WriteFieldBegin("deleteMessageForce", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:deleteMessageForce: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.DeleteMessageForce)); err != nil {
			return fmt.Errorf("%T.deleteMessageForce (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:deleteMessageForce: %s", p, err)
		}
	}
	return err
}

func (p *QueueMeta) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultTagName() {
		if err := oprot.WriteFieldBegin("defaultTagName", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:defaultTagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DefaultTagName)); err != nil {
			return fmt.Errorf("%T.defaultTagName (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:defaultTagName: %s", p, err)
		}
	}
	return err
}

func (p *QueueMeta) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPermissionList() {
		if err := oprot.WriteFieldBegin("permissionList", thrift.MAP, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:permissionList: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.PermissionList)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.PermissionList {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:permissionList: %s", p, err)
		}
	}
	return err
}

func (p *QueueMeta) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRedrivePolicy() {
		if err := oprot.WriteFieldBegin("redrivePolicy", thrift.STRUCT, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:redrivePolicy: %s", p, err)
		}
		if err := p.RedrivePolicy.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RedrivePolicy, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:redrivePolicy: %s", p, err)
		}
	}
	return err
}

func (p *QueueMeta) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceQueues() {
		if err := oprot.WriteFieldBegin("sourceQueues", thrift.LIST, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:sourceQueues: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SourceQueues)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.SourceQueues {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:sourceQueues: %s", p, err)
		}
	}
	return err
}

func (p *QueueMeta) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTimestamp() {
		if err := oprot.WriteFieldBegin("createTimestamp", thrift.I64, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:createTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTimestamp)); err != nil {
			return fmt.Errorf("%T.createTimestamp (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:createTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *QueueMeta) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastModifiedTimestamp() {
		if err := oprot.WriteFieldBegin("lastModifiedTimestamp", thrift.I64, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:lastModifiedTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.LastModifiedTimestamp)); err != nil {
			return fmt.Errorf("%T.lastModifiedTimestamp (12) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:lastModifiedTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *QueueMeta) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueTagMap() {
		if err := oprot.WriteFieldBegin("queueTagMap", thrift.MAP, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:queueTagMap: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.QueueTagMap)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.QueueTagMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:queueTagMap: %s", p, err)
		}
	}
	return err
}

func (p *QueueMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueueMeta(%+v)", *p)
}

type GetQueueMetaResponse struct {
	QueueMeta *QueueMeta `thrift:"queueMeta,1,required" json:"queueMeta"`
}

func NewGetQueueMetaResponse() *GetQueueMetaResponse {
	return &GetQueueMetaResponse{}
}

var GetQueueMetaResponse_QueueMeta_DEFAULT *QueueMeta

func (p *GetQueueMetaResponse) GetQueueMeta() *QueueMeta {
	if !p.IsSetQueueMeta() {
		return GetQueueMetaResponse_QueueMeta_DEFAULT
	}
	return p.QueueMeta
}
func (p *GetQueueMetaResponse) IsSetQueueMeta() bool {
	return p.QueueMeta != nil
}

func (p *GetQueueMetaResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueueMetaResponse) ReadField1(iprot thrift.TProtocol) error {
	p.QueueMeta = &QueueMeta{
		DeleteMessageForce: true,
	}
	if err := p.QueueMeta.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueMeta, err)
	}
	return nil
}

func (p *GetQueueMetaResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetQueueMetaResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueueMetaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueMeta", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueMeta: %s", p, err)
	}
	if err := p.QueueMeta.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QueueMeta, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueMeta: %s", p, err)
	}
	return err
}

func (p *GetQueueMetaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueMetaResponse(%+v)", *p)
}

type CopyQueueRequest struct {
	QueueMeta *QueueMeta `thrift:"queueMeta,1,required" json:"queueMeta"`
}

func NewCopyQueueRequest() *CopyQueueRequest {
	return &CopyQueueRequest{}
}

var CopyQueueRequest_QueueMeta_DEFAULT *QueueMeta

func (p *CopyQueueRequest) GetQueueMeta() *QueueMeta {
	if !p.IsSetQueueMeta() {
		return CopyQueueRequest_QueueMeta_DEFAULT
	}
	return p.QueueMeta
}
func (p *CopyQueueRequest) IsSetQueueMeta() bool {
	return p.QueueMeta != nil
}

func (p *CopyQueueRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CopyQueueRequest) ReadField1(iprot thrift.TProtocol) error {
	p.QueueMeta = &QueueMeta{
		DeleteMessageForce: true,
	}
	if err := p.QueueMeta.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QueueMeta, err)
	}
	return nil
}

func (p *CopyQueueRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CopyQueueRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CopyQueueRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueMeta", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueMeta: %s", p, err)
	}
	if err := p.QueueMeta.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QueueMeta, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueMeta: %s", p, err)
	}
	return err
}

func (p *CopyQueueRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CopyQueueRequest(%+v)", *p)
}
