// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"emq/statistics"
	"flag"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void setUserQuota(SetUserQuotaRequest request)")
	fmt.Fprintln(os.Stderr, "  GetUserQuotaResponse getUserQuota(GetUserQuotaRequest request)")
	fmt.Fprintln(os.Stderr, "  GetUserQuotaResponse getUserUsedQuota(GetUserUsedQuotaRequest request)")
	fmt.Fprintln(os.Stderr, "  void setUserInfo(SetUserInfoRequest request)")
	fmt.Fprintln(os.Stderr, "  GetUserInfoResponse getUserInfo(GetUserInfoRequest request)")
	fmt.Fprintln(os.Stderr, "  void addQueueAlertPolicy(AddQueueAlertPolicyRequest request)")
	fmt.Fprintln(os.Stderr, "  void addTagAlertPolicy(AddTagAlertPolicyRequest request)")
	fmt.Fprintln(os.Stderr, "  void deleteQueueAlertPolicy(DeleteQueueAlertPolicyRequest request)")
	fmt.Fprintln(os.Stderr, "  void deleteTagAlertPolicy(DeleteTagAlertPolicyRequest request)")
	fmt.Fprintln(os.Stderr, "  ListQueueAlertPoliciesResponse listQueueAlertPolicies(ListQueueAlertPoliciesRequest request)")
	fmt.Fprintln(os.Stderr, "  ListTagAlertPoliciesResponse listTagAlertPolicies(ListTagAlertPoliciesRequest request)")
	fmt.Fprintln(os.Stderr, "  void setQueueDailyStatisticsState(SetQueueDailyStatisticsStateRequest request)")
	fmt.Fprintln(os.Stderr, "  GetQueueDailyStatisticsStateResponse getQueueDailyStatisticsState(GetQueueDailyStatisticsStateRequest request)")
	fmt.Fprintln(os.Stderr, "  Version getServiceVersion()")
	fmt.Fprintln(os.Stderr, "  void validClientVersion(Version clientVersion)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := statistics.NewStatisticsServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "setUserQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetUserQuota requires 1 args")
			flag.Usage()
		}
		arg29 := flag.Arg(1)
		mbTrans30 := thrift.NewTMemoryBufferLen(len(arg29))
		defer mbTrans30.Close()
		_, err31 := mbTrans30.WriteString(arg29)
		if err31 != nil {
			Usage()
			return
		}
		factory32 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt33 := factory32.GetProtocol(mbTrans30)
		argvalue0 := statistics.NewSetUserQuotaRequest()
		err34 := argvalue0.Read(jsProt33)
		if err34 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetUserQuota(value0))
		fmt.Print("\n")
		break
	case "getUserQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserQuota requires 1 args")
			flag.Usage()
		}
		arg35 := flag.Arg(1)
		mbTrans36 := thrift.NewTMemoryBufferLen(len(arg35))
		defer mbTrans36.Close()
		_, err37 := mbTrans36.WriteString(arg35)
		if err37 != nil {
			Usage()
			return
		}
		factory38 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt39 := factory38.GetProtocol(mbTrans36)
		argvalue0 := statistics.NewGetUserQuotaRequest()
		err40 := argvalue0.Read(jsProt39)
		if err40 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUserQuota(value0))
		fmt.Print("\n")
		break
	case "getUserUsedQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserUsedQuota requires 1 args")
			flag.Usage()
		}
		arg41 := flag.Arg(1)
		mbTrans42 := thrift.NewTMemoryBufferLen(len(arg41))
		defer mbTrans42.Close()
		_, err43 := mbTrans42.WriteString(arg41)
		if err43 != nil {
			Usage()
			return
		}
		factory44 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt45 := factory44.GetProtocol(mbTrans42)
		argvalue0 := statistics.NewGetUserUsedQuotaRequest()
		err46 := argvalue0.Read(jsProt45)
		if err46 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUserUsedQuota(value0))
		fmt.Print("\n")
		break
	case "setUserInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetUserInfo requires 1 args")
			flag.Usage()
		}
		arg47 := flag.Arg(1)
		mbTrans48 := thrift.NewTMemoryBufferLen(len(arg47))
		defer mbTrans48.Close()
		_, err49 := mbTrans48.WriteString(arg47)
		if err49 != nil {
			Usage()
			return
		}
		factory50 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt51 := factory50.GetProtocol(mbTrans48)
		argvalue0 := statistics.NewSetUserInfoRequest()
		err52 := argvalue0.Read(jsProt51)
		if err52 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetUserInfo(value0))
		fmt.Print("\n")
		break
	case "getUserInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserInfo requires 1 args")
			flag.Usage()
		}
		arg53 := flag.Arg(1)
		mbTrans54 := thrift.NewTMemoryBufferLen(len(arg53))
		defer mbTrans54.Close()
		_, err55 := mbTrans54.WriteString(arg53)
		if err55 != nil {
			Usage()
			return
		}
		factory56 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt57 := factory56.GetProtocol(mbTrans54)
		argvalue0 := statistics.NewGetUserInfoRequest()
		err58 := argvalue0.Read(jsProt57)
		if err58 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUserInfo(value0))
		fmt.Print("\n")
		break
	case "addQueueAlertPolicy":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddQueueAlertPolicy requires 1 args")
			flag.Usage()
		}
		arg59 := flag.Arg(1)
		mbTrans60 := thrift.NewTMemoryBufferLen(len(arg59))
		defer mbTrans60.Close()
		_, err61 := mbTrans60.WriteString(arg59)
		if err61 != nil {
			Usage()
			return
		}
		factory62 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt63 := factory62.GetProtocol(mbTrans60)
		argvalue0 := statistics.NewAddQueueAlertPolicyRequest()
		err64 := argvalue0.Read(jsProt63)
		if err64 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddQueueAlertPolicy(value0))
		fmt.Print("\n")
		break
	case "addTagAlertPolicy":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddTagAlertPolicy requires 1 args")
			flag.Usage()
		}
		arg65 := flag.Arg(1)
		mbTrans66 := thrift.NewTMemoryBufferLen(len(arg65))
		defer mbTrans66.Close()
		_, err67 := mbTrans66.WriteString(arg65)
		if err67 != nil {
			Usage()
			return
		}
		factory68 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt69 := factory68.GetProtocol(mbTrans66)
		argvalue0 := statistics.NewAddTagAlertPolicyRequest()
		err70 := argvalue0.Read(jsProt69)
		if err70 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddTagAlertPolicy(value0))
		fmt.Print("\n")
		break
	case "deleteQueueAlertPolicy":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteQueueAlertPolicy requires 1 args")
			flag.Usage()
		}
		arg71 := flag.Arg(1)
		mbTrans72 := thrift.NewTMemoryBufferLen(len(arg71))
		defer mbTrans72.Close()
		_, err73 := mbTrans72.WriteString(arg71)
		if err73 != nil {
			Usage()
			return
		}
		factory74 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt75 := factory74.GetProtocol(mbTrans72)
		argvalue0 := statistics.NewDeleteQueueAlertPolicyRequest()
		err76 := argvalue0.Read(jsProt75)
		if err76 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteQueueAlertPolicy(value0))
		fmt.Print("\n")
		break
	case "deleteTagAlertPolicy":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteTagAlertPolicy requires 1 args")
			flag.Usage()
		}
		arg77 := flag.Arg(1)
		mbTrans78 := thrift.NewTMemoryBufferLen(len(arg77))
		defer mbTrans78.Close()
		_, err79 := mbTrans78.WriteString(arg77)
		if err79 != nil {
			Usage()
			return
		}
		factory80 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt81 := factory80.GetProtocol(mbTrans78)
		argvalue0 := statistics.NewDeleteTagAlertPolicyRequest()
		err82 := argvalue0.Read(jsProt81)
		if err82 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteTagAlertPolicy(value0))
		fmt.Print("\n")
		break
	case "listQueueAlertPolicies":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListQueueAlertPolicies requires 1 args")
			flag.Usage()
		}
		arg83 := flag.Arg(1)
		mbTrans84 := thrift.NewTMemoryBufferLen(len(arg83))
		defer mbTrans84.Close()
		_, err85 := mbTrans84.WriteString(arg83)
		if err85 != nil {
			Usage()
			return
		}
		factory86 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt87 := factory86.GetProtocol(mbTrans84)
		argvalue0 := statistics.NewListQueueAlertPoliciesRequest()
		err88 := argvalue0.Read(jsProt87)
		if err88 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ListQueueAlertPolicies(value0))
		fmt.Print("\n")
		break
	case "listTagAlertPolicies":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListTagAlertPolicies requires 1 args")
			flag.Usage()
		}
		arg89 := flag.Arg(1)
		mbTrans90 := thrift.NewTMemoryBufferLen(len(arg89))
		defer mbTrans90.Close()
		_, err91 := mbTrans90.WriteString(arg89)
		if err91 != nil {
			Usage()
			return
		}
		factory92 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt93 := factory92.GetProtocol(mbTrans90)
		argvalue0 := statistics.NewListTagAlertPoliciesRequest()
		err94 := argvalue0.Read(jsProt93)
		if err94 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ListTagAlertPolicies(value0))
		fmt.Print("\n")
		break
	case "setQueueDailyStatisticsState":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetQueueDailyStatisticsState requires 1 args")
			flag.Usage()
		}
		arg95 := flag.Arg(1)
		mbTrans96 := thrift.NewTMemoryBufferLen(len(arg95))
		defer mbTrans96.Close()
		_, err97 := mbTrans96.WriteString(arg95)
		if err97 != nil {
			Usage()
			return
		}
		factory98 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt99 := factory98.GetProtocol(mbTrans96)
		argvalue0 := statistics.NewSetQueueDailyStatisticsStateRequest()
		err100 := argvalue0.Read(jsProt99)
		if err100 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetQueueDailyStatisticsState(value0))
		fmt.Print("\n")
		break
	case "getQueueDailyStatisticsState":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetQueueDailyStatisticsState requires 1 args")
			flag.Usage()
		}
		arg101 := flag.Arg(1)
		mbTrans102 := thrift.NewTMemoryBufferLen(len(arg101))
		defer mbTrans102.Close()
		_, err103 := mbTrans102.WriteString(arg101)
		if err103 != nil {
			Usage()
			return
		}
		factory104 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt105 := factory104.GetProtocol(mbTrans102)
		argvalue0 := statistics.NewGetQueueDailyStatisticsStateRequest()
		err106 := argvalue0.Read(jsProt105)
		if err106 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetQueueDailyStatisticsState(value0))
		fmt.Print("\n")
		break
	case "getServiceVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServiceVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServiceVersion())
		fmt.Print("\n")
		break
	case "validClientVersion":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidClientVersion requires 1 args")
			flag.Usage()
		}
		arg107 := flag.Arg(1)
		mbTrans108 := thrift.NewTMemoryBufferLen(len(arg107))
		defer mbTrans108.Close()
		_, err109 := mbTrans108.WriteString(arg107)
		if err109 != nil {
			Usage()
			return
		}
		factory110 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt111 := factory110.GetProtocol(mbTrans108)
		argvalue0 := statistics.NewVersion()
		err112 := argvalue0.Read(jsProt111)
		if err112 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidClientVersion(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
