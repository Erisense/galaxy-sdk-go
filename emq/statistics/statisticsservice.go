// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package statistics

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/emq/common"
	"github.com/XiaoMi/galaxy-sdk-go/emq/queue"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = queue.GoUnusedProtection__

type StatisticsService interface {
	common.EMQBaseService

	// Set user quota, must be ADMIN user;
	//
	//
	// Parameters:
	//  - Request
	SetUserQuota(request *SetUserQuotaRequest) (err error)
	// Get user quota;
	//
	//
	// Parameters:
	//  - Request
	GetUserQuota(request *GetUserQuotaRequest) (r *GetUserQuotaResponse, err error)
	// Get user used quota;
	//
	//
	// Parameters:
	//  - Request
	GetUserUsedQuota(request *GetUserUsedQuotaRequest) (r *GetUserQuotaResponse, err error)
	// Set user info;
	//
	//
	// Parameters:
	//  - Request
	SetUserInfo(request *SetUserInfoRequest) (err error)
	// Get user info;
	//
	//
	// Parameters:
	//  - Request
	GetUserInfo(request *GetUserInfoRequest) (r *GetUserInfoResponse, err error)
	// Add an alert policy for queue;
	//
	//
	// Parameters:
	//  - Request
	AddQueueAlertPolicy(request *AddQueueAlertPolicyRequest) (err error)
	// Add an alert policy for tag;
	//
	//
	// Parameters:
	//  - Request
	AddTagAlertPolicy(request *AddTagAlertPolicyRequest) (err error)
	// Delete an alert policy for queue;
	//
	//
	// Parameters:
	//  - Request
	DeleteQueueAlertPolicy(request *DeleteQueueAlertPolicyRequest) (err error)
	// Delete an alert policy for tag
	//
	//
	// Parameters:
	//  - Request
	DeleteTagAlertPolicy(request *DeleteTagAlertPolicyRequest) (err error)
	// Clear alert policies for queue;
	//
	//
	// Parameters:
	//  - Request
	ListQueueAlertPolicies(request *ListQueueAlertPoliciesRequest) (r *ListQueueAlertPoliciesResponse, err error)
	// Clear alert policies for tag;
	//
	//
	// Parameters:
	//  - Request
	ListTagAlertPolicies(request *ListTagAlertPoliciesRequest) (r *ListTagAlertPoliciesResponse, err error)
	// Set daily statistics state for queue;
	//
	//
	// Parameters:
	//  - Request
	SetQueueDailyStatisticsState(request *SetQueueDailyStatisticsStateRequest) (err error)
	// Get daily statistics state of queue;
	//
	//
	// Parameters:
	//  - Request
	GetQueueDailyStatisticsState(request *GetQueueDailyStatisticsStateRequest) (r *GetQueueDailyStatisticsStateResponse, err error)
}

type StatisticsServiceClient struct {
	*common.EMQBaseServiceClient
}

func NewStatisticsServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StatisticsServiceClient {
	return &StatisticsServiceClient{EMQBaseServiceClient: common.NewEMQBaseServiceClientFactory(t, f)}
}

func NewStatisticsServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StatisticsServiceClient {
	return &StatisticsServiceClient{EMQBaseServiceClient: common.NewEMQBaseServiceClientProtocol(t, iprot, oprot)}
}

// Set user quota, must be ADMIN user;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) SetUserQuota(request *SetUserQuotaRequest) (err error) {
	if err = p.sendSetUserQuota(request); err != nil {
		return
	}
	return p.recvSetUserQuota()
}

func (p *StatisticsServiceClient) sendSetUserQuota(request *SetUserQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setUserQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetUserQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvSetUserQuota() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setUserQuota failed: out of sequence response")
		return
	}
	result := SetUserQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Get user quota;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) GetUserQuota(request *GetUserQuotaRequest) (r *GetUserQuotaResponse, err error) {
	if err = p.sendGetUserQuota(request); err != nil {
		return
	}
	return p.recvGetUserQuota()
}

func (p *StatisticsServiceClient) sendGetUserQuota(request *GetUserQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetUserQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvGetUserQuota() (value *GetUserQuotaResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserQuota failed: out of sequence response")
		return
	}
	result := GetUserQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Get user used quota;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) GetUserUsedQuota(request *GetUserUsedQuotaRequest) (r *GetUserQuotaResponse, err error) {
	if err = p.sendGetUserUsedQuota(request); err != nil {
		return
	}
	return p.recvGetUserUsedQuota()
}

func (p *StatisticsServiceClient) sendGetUserUsedQuota(request *GetUserUsedQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserUsedQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetUserUsedQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvGetUserUsedQuota() (value *GetUserQuotaResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserUsedQuota failed: out of sequence response")
		return
	}
	result := GetUserUsedQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Set user info;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) SetUserInfo(request *SetUserInfoRequest) (err error) {
	if err = p.sendSetUserInfo(request); err != nil {
		return
	}
	return p.recvSetUserInfo()
}

func (p *StatisticsServiceClient) sendSetUserInfo(request *SetUserInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setUserInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetUserInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvSetUserInfo() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setUserInfo failed: out of sequence response")
		return
	}
	result := SetUserInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Get user info;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) GetUserInfo(request *GetUserInfoRequest) (r *GetUserInfoResponse, err error) {
	if err = p.sendGetUserInfo(request); err != nil {
		return
	}
	return p.recvGetUserInfo()
}

func (p *StatisticsServiceClient) sendGetUserInfo(request *GetUserInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetUserInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvGetUserInfo() (value *GetUserInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInfo failed: out of sequence response")
		return
	}
	result := GetUserInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Add an alert policy for queue;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) AddQueueAlertPolicy(request *AddQueueAlertPolicyRequest) (err error) {
	if err = p.sendAddQueueAlertPolicy(request); err != nil {
		return
	}
	return p.recvAddQueueAlertPolicy()
}

func (p *StatisticsServiceClient) sendAddQueueAlertPolicy(request *AddQueueAlertPolicyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addQueueAlertPolicy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AddQueueAlertPolicyArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvAddQueueAlertPolicy() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addQueueAlertPolicy failed: out of sequence response")
		return
	}
	result := AddQueueAlertPolicyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Add an alert policy for tag;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) AddTagAlertPolicy(request *AddTagAlertPolicyRequest) (err error) {
	if err = p.sendAddTagAlertPolicy(request); err != nil {
		return
	}
	return p.recvAddTagAlertPolicy()
}

func (p *StatisticsServiceClient) sendAddTagAlertPolicy(request *AddTagAlertPolicyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addTagAlertPolicy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AddTagAlertPolicyArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvAddTagAlertPolicy() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addTagAlertPolicy failed: out of sequence response")
		return
	}
	result := AddTagAlertPolicyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Delete an alert policy for queue;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) DeleteQueueAlertPolicy(request *DeleteQueueAlertPolicyRequest) (err error) {
	if err = p.sendDeleteQueueAlertPolicy(request); err != nil {
		return
	}
	return p.recvDeleteQueueAlertPolicy()
}

func (p *StatisticsServiceClient) sendDeleteQueueAlertPolicy(request *DeleteQueueAlertPolicyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteQueueAlertPolicy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteQueueAlertPolicyArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvDeleteQueueAlertPolicy() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteQueueAlertPolicy failed: out of sequence response")
		return
	}
	result := DeleteQueueAlertPolicyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Delete an alert policy for tag
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) DeleteTagAlertPolicy(request *DeleteTagAlertPolicyRequest) (err error) {
	if err = p.sendDeleteTagAlertPolicy(request); err != nil {
		return
	}
	return p.recvDeleteTagAlertPolicy()
}

func (p *StatisticsServiceClient) sendDeleteTagAlertPolicy(request *DeleteTagAlertPolicyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteTagAlertPolicy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteTagAlertPolicyArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvDeleteTagAlertPolicy() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteTagAlertPolicy failed: out of sequence response")
		return
	}
	result := DeleteTagAlertPolicyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Clear alert policies for queue;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) ListQueueAlertPolicies(request *ListQueueAlertPoliciesRequest) (r *ListQueueAlertPoliciesResponse, err error) {
	if err = p.sendListQueueAlertPolicies(request); err != nil {
		return
	}
	return p.recvListQueueAlertPolicies()
}

func (p *StatisticsServiceClient) sendListQueueAlertPolicies(request *ListQueueAlertPoliciesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listQueueAlertPolicies", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListQueueAlertPoliciesArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvListQueueAlertPolicies() (value *ListQueueAlertPoliciesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listQueueAlertPolicies failed: out of sequence response")
		return
	}
	result := ListQueueAlertPoliciesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Clear alert policies for tag;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) ListTagAlertPolicies(request *ListTagAlertPoliciesRequest) (r *ListTagAlertPoliciesResponse, err error) {
	if err = p.sendListTagAlertPolicies(request); err != nil {
		return
	}
	return p.recvListTagAlertPolicies()
}

func (p *StatisticsServiceClient) sendListTagAlertPolicies(request *ListTagAlertPoliciesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listTagAlertPolicies", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListTagAlertPoliciesArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvListTagAlertPolicies() (value *ListTagAlertPoliciesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listTagAlertPolicies failed: out of sequence response")
		return
	}
	result := ListTagAlertPoliciesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Set daily statistics state for queue;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) SetQueueDailyStatisticsState(request *SetQueueDailyStatisticsStateRequest) (err error) {
	if err = p.sendSetQueueDailyStatisticsState(request); err != nil {
		return
	}
	return p.recvSetQueueDailyStatisticsState()
}

func (p *StatisticsServiceClient) sendSetQueueDailyStatisticsState(request *SetQueueDailyStatisticsStateRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setQueueDailyStatisticsState", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetQueueDailyStatisticsStateArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvSetQueueDailyStatisticsState() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setQueueDailyStatisticsState failed: out of sequence response")
		return
	}
	result := SetQueueDailyStatisticsStateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Get daily statistics state of queue;
//
//
// Parameters:
//  - Request
func (p *StatisticsServiceClient) GetQueueDailyStatisticsState(request *GetQueueDailyStatisticsStateRequest) (r *GetQueueDailyStatisticsStateResponse, err error) {
	if err = p.sendGetQueueDailyStatisticsState(request); err != nil {
		return
	}
	return p.recvGetQueueDailyStatisticsState()
}

func (p *StatisticsServiceClient) sendGetQueueDailyStatisticsState(request *GetQueueDailyStatisticsStateRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getQueueDailyStatisticsState", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetQueueDailyStatisticsStateArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *StatisticsServiceClient) recvGetQueueDailyStatisticsState() (value *GetQueueDailyStatisticsStateResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getQueueDailyStatisticsState failed: out of sequence response")
		return
	}
	result := GetQueueDailyStatisticsStateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type StatisticsServiceProcessor struct {
	*common.EMQBaseServiceProcessor
}

func NewStatisticsServiceProcessor(handler StatisticsService) *StatisticsServiceProcessor {
	self28 := &StatisticsServiceProcessor{common.NewEMQBaseServiceProcessor(handler)}
	self28.AddToProcessorMap("setUserQuota", &statisticsServiceProcessorSetUserQuota{handler: handler})
	self28.AddToProcessorMap("getUserQuota", &statisticsServiceProcessorGetUserQuota{handler: handler})
	self28.AddToProcessorMap("getUserUsedQuota", &statisticsServiceProcessorGetUserUsedQuota{handler: handler})
	self28.AddToProcessorMap("setUserInfo", &statisticsServiceProcessorSetUserInfo{handler: handler})
	self28.AddToProcessorMap("getUserInfo", &statisticsServiceProcessorGetUserInfo{handler: handler})
	self28.AddToProcessorMap("addQueueAlertPolicy", &statisticsServiceProcessorAddQueueAlertPolicy{handler: handler})
	self28.AddToProcessorMap("addTagAlertPolicy", &statisticsServiceProcessorAddTagAlertPolicy{handler: handler})
	self28.AddToProcessorMap("deleteQueueAlertPolicy", &statisticsServiceProcessorDeleteQueueAlertPolicy{handler: handler})
	self28.AddToProcessorMap("deleteTagAlertPolicy", &statisticsServiceProcessorDeleteTagAlertPolicy{handler: handler})
	self28.AddToProcessorMap("listQueueAlertPolicies", &statisticsServiceProcessorListQueueAlertPolicies{handler: handler})
	self28.AddToProcessorMap("listTagAlertPolicies", &statisticsServiceProcessorListTagAlertPolicies{handler: handler})
	self28.AddToProcessorMap("setQueueDailyStatisticsState", &statisticsServiceProcessorSetQueueDailyStatisticsState{handler: handler})
	self28.AddToProcessorMap("getQueueDailyStatisticsState", &statisticsServiceProcessorGetQueueDailyStatisticsState{handler: handler})
	return self28
}

type statisticsServiceProcessorSetUserQuota struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorSetUserQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetUserQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setUserQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetUserQuotaResult{}
	var err2 error
	if err2 = p.handler.SetUserQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setUserQuota: "+err2.Error())
			oprot.WriteMessageBegin("setUserQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setUserQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorGetUserQuota struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorGetUserQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetUserQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetUserQuotaResult{}
	var retval *GetUserQuotaResponse
	var err2 error
	if retval, err2 = p.handler.GetUserQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserQuota: "+err2.Error())
			oprot.WriteMessageBegin("getUserQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getUserQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorGetUserUsedQuota struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorGetUserUsedQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetUserUsedQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserUsedQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetUserUsedQuotaResult{}
	var retval *GetUserQuotaResponse
	var err2 error
	if retval, err2 = p.handler.GetUserUsedQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserUsedQuota: "+err2.Error())
			oprot.WriteMessageBegin("getUserUsedQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getUserUsedQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorSetUserInfo struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorSetUserInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetUserInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setUserInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetUserInfoResult{}
	var err2 error
	if err2 = p.handler.SetUserInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setUserInfo: "+err2.Error())
			oprot.WriteMessageBegin("setUserInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setUserInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorGetUserInfo struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorGetUserInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetUserInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetUserInfoResult{}
	var retval *GetUserInfoResponse
	var err2 error
	if retval, err2 = p.handler.GetUserInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfo: "+err2.Error())
			oprot.WriteMessageBegin("getUserInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorAddQueueAlertPolicy struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorAddQueueAlertPolicy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AddQueueAlertPolicyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addQueueAlertPolicy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AddQueueAlertPolicyResult{}
	var err2 error
	if err2 = p.handler.AddQueueAlertPolicy(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addQueueAlertPolicy: "+err2.Error())
			oprot.WriteMessageBegin("addQueueAlertPolicy", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("addQueueAlertPolicy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorAddTagAlertPolicy struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorAddTagAlertPolicy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AddTagAlertPolicyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addTagAlertPolicy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AddTagAlertPolicyResult{}
	var err2 error
	if err2 = p.handler.AddTagAlertPolicy(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addTagAlertPolicy: "+err2.Error())
			oprot.WriteMessageBegin("addTagAlertPolicy", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("addTagAlertPolicy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorDeleteQueueAlertPolicy struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorDeleteQueueAlertPolicy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteQueueAlertPolicyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteQueueAlertPolicy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteQueueAlertPolicyResult{}
	var err2 error
	if err2 = p.handler.DeleteQueueAlertPolicy(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteQueueAlertPolicy: "+err2.Error())
			oprot.WriteMessageBegin("deleteQueueAlertPolicy", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteQueueAlertPolicy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorDeleteTagAlertPolicy struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorDeleteTagAlertPolicy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteTagAlertPolicyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTagAlertPolicy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteTagAlertPolicyResult{}
	var err2 error
	if err2 = p.handler.DeleteTagAlertPolicy(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTagAlertPolicy: "+err2.Error())
			oprot.WriteMessageBegin("deleteTagAlertPolicy", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteTagAlertPolicy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorListQueueAlertPolicies struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorListQueueAlertPolicies) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListQueueAlertPoliciesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listQueueAlertPolicies", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListQueueAlertPoliciesResult{}
	var retval *ListQueueAlertPoliciesResponse
	var err2 error
	if retval, err2 = p.handler.ListQueueAlertPolicies(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listQueueAlertPolicies: "+err2.Error())
			oprot.WriteMessageBegin("listQueueAlertPolicies", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listQueueAlertPolicies", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorListTagAlertPolicies struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorListTagAlertPolicies) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListTagAlertPoliciesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTagAlertPolicies", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListTagAlertPoliciesResult{}
	var retval *ListTagAlertPoliciesResponse
	var err2 error
	if retval, err2 = p.handler.ListTagAlertPolicies(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTagAlertPolicies: "+err2.Error())
			oprot.WriteMessageBegin("listTagAlertPolicies", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTagAlertPolicies", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorSetQueueDailyStatisticsState struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorSetQueueDailyStatisticsState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetQueueDailyStatisticsStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setQueueDailyStatisticsState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetQueueDailyStatisticsStateResult{}
	var err2 error
	if err2 = p.handler.SetQueueDailyStatisticsState(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setQueueDailyStatisticsState: "+err2.Error())
			oprot.WriteMessageBegin("setQueueDailyStatisticsState", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setQueueDailyStatisticsState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type statisticsServiceProcessorGetQueueDailyStatisticsState struct {
	handler StatisticsService
}

func (p *statisticsServiceProcessorGetQueueDailyStatisticsState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetQueueDailyStatisticsStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getQueueDailyStatisticsState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetQueueDailyStatisticsStateResult{}
	var retval *GetQueueDailyStatisticsStateResponse
	var err2 error
	if retval, err2 = p.handler.GetQueueDailyStatisticsState(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyEmqServiceException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueueDailyStatisticsState: "+err2.Error())
			oprot.WriteMessageBegin("getQueueDailyStatisticsState", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getQueueDailyStatisticsState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type SetUserQuotaArgs struct {
	Request *SetUserQuotaRequest `thrift:"request,1" json:"request"`
}

func NewSetUserQuotaArgs() *SetUserQuotaArgs {
	return &SetUserQuotaArgs{}
}

var SetUserQuotaArgs_Request_DEFAULT *SetUserQuotaRequest

func (p *SetUserQuotaArgs) GetRequest() *SetUserQuotaRequest {
	if !p.IsSetRequest() {
		return SetUserQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SetUserQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SetUserQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetUserQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &SetUserQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *SetUserQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setUserQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetUserQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *SetUserQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserQuotaArgs(%+v)", *p)
}

type SetUserQuotaResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewSetUserQuotaResult() *SetUserQuotaResult {
	return &SetUserQuotaResult{}
}

var SetUserQuotaResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *SetUserQuotaResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return SetUserQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *SetUserQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetUserQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetUserQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetUserQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setUserQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetUserQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetUserQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserQuotaResult(%+v)", *p)
}

type GetUserQuotaArgs struct {
	Request *GetUserQuotaRequest `thrift:"request,1" json:"request"`
}

func NewGetUserQuotaArgs() *GetUserQuotaArgs {
	return &GetUserQuotaArgs{}
}

var GetUserQuotaArgs_Request_DEFAULT *GetUserQuotaRequest

func (p *GetUserQuotaArgs) GetRequest() *GetUserQuotaRequest {
	if !p.IsSetRequest() {
		return GetUserQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetUserQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetUserQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetUserQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetUserQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetUserQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserQuotaArgs(%+v)", *p)
}

type GetUserQuotaResult struct {
	Success *GetUserQuotaResponse             `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewGetUserQuotaResult() *GetUserQuotaResult {
	return &GetUserQuotaResult{}
}

var GetUserQuotaResult_Success_DEFAULT *GetUserQuotaResponse

func (p *GetUserQuotaResult) GetSuccess() *GetUserQuotaResponse {
	if !p.IsSetSuccess() {
		return GetUserQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var GetUserQuotaResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *GetUserQuotaResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return GetUserQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *GetUserQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetUserQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetUserQuotaResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetUserQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetUserQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetUserQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetUserQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserQuotaResult(%+v)", *p)
}

type GetUserUsedQuotaArgs struct {
	Request *GetUserUsedQuotaRequest `thrift:"request,1" json:"request"`
}

func NewGetUserUsedQuotaArgs() *GetUserUsedQuotaArgs {
	return &GetUserUsedQuotaArgs{}
}

var GetUserUsedQuotaArgs_Request_DEFAULT *GetUserUsedQuotaRequest

func (p *GetUserUsedQuotaArgs) GetRequest() *GetUserUsedQuotaRequest {
	if !p.IsSetRequest() {
		return GetUserUsedQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetUserUsedQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetUserUsedQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserUsedQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetUserUsedQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetUserUsedQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserUsedQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserUsedQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetUserUsedQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserUsedQuotaArgs(%+v)", *p)
}

type GetUserUsedQuotaResult struct {
	Success *GetUserQuotaResponse             `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewGetUserUsedQuotaResult() *GetUserUsedQuotaResult {
	return &GetUserUsedQuotaResult{}
}

var GetUserUsedQuotaResult_Success_DEFAULT *GetUserQuotaResponse

func (p *GetUserUsedQuotaResult) GetSuccess() *GetUserQuotaResponse {
	if !p.IsSetSuccess() {
		return GetUserUsedQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var GetUserUsedQuotaResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *GetUserUsedQuotaResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return GetUserUsedQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *GetUserUsedQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserUsedQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetUserUsedQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserUsedQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetUserQuotaResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetUserUsedQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetUserUsedQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserUsedQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserUsedQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetUserUsedQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetUserUsedQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserUsedQuotaResult(%+v)", *p)
}

type SetUserInfoArgs struct {
	Request *SetUserInfoRequest `thrift:"request,1" json:"request"`
}

func NewSetUserInfoArgs() *SetUserInfoArgs {
	return &SetUserInfoArgs{}
}

var SetUserInfoArgs_Request_DEFAULT *SetUserInfoRequest

func (p *SetUserInfoArgs) GetRequest() *SetUserInfoRequest {
	if !p.IsSetRequest() {
		return SetUserInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SetUserInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SetUserInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetUserInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &SetUserInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *SetUserInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setUserInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *SetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserInfoArgs(%+v)", *p)
}

type SetUserInfoResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewSetUserInfoResult() *SetUserInfoResult {
	return &SetUserInfoResult{}
}

var SetUserInfoResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *SetUserInfoResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return SetUserInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *SetUserInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetUserInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetUserInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetUserInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setUserInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetUserInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserInfoResult(%+v)", *p)
}

type GetUserInfoArgs struct {
	Request *GetUserInfoRequest `thrift:"request,1" json:"request"`
}

func NewGetUserInfoArgs() *GetUserInfoArgs {
	return &GetUserInfoArgs{}
}

var GetUserInfoArgs_Request_DEFAULT *GetUserInfoRequest

func (p *GetUserInfoArgs) GetRequest() *GetUserInfoRequest {
	if !p.IsSetRequest() {
		return GetUserInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetUserInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetUserInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetUserInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetUserInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoArgs(%+v)", *p)
}

type GetUserInfoResult struct {
	Success *GetUserInfoResponse              `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewGetUserInfoResult() *GetUserInfoResult {
	return &GetUserInfoResult{}
}

var GetUserInfoResult_Success_DEFAULT *GetUserInfoResponse

func (p *GetUserInfoResult) GetSuccess() *GetUserInfoResponse {
	if !p.IsSetSuccess() {
		return GetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

var GetUserInfoResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *GetUserInfoResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return GetUserInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *GetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetUserInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetUserInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetUserInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetUserInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetUserInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoResult(%+v)", *p)
}

type AddQueueAlertPolicyArgs struct {
	Request *AddQueueAlertPolicyRequest `thrift:"request,1" json:"request"`
}

func NewAddQueueAlertPolicyArgs() *AddQueueAlertPolicyArgs {
	return &AddQueueAlertPolicyArgs{}
}

var AddQueueAlertPolicyArgs_Request_DEFAULT *AddQueueAlertPolicyRequest

func (p *AddQueueAlertPolicyArgs) GetRequest() *AddQueueAlertPolicyRequest {
	if !p.IsSetRequest() {
		return AddQueueAlertPolicyArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *AddQueueAlertPolicyArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *AddQueueAlertPolicyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddQueueAlertPolicyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &AddQueueAlertPolicyRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *AddQueueAlertPolicyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addQueueAlertPolicy_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddQueueAlertPolicyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *AddQueueAlertPolicyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddQueueAlertPolicyArgs(%+v)", *p)
}

type AddQueueAlertPolicyResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewAddQueueAlertPolicyResult() *AddQueueAlertPolicyResult {
	return &AddQueueAlertPolicyResult{}
}

var AddQueueAlertPolicyResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *AddQueueAlertPolicyResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return AddQueueAlertPolicyResult_E_DEFAULT
	}
	return p.E
}
func (p *AddQueueAlertPolicyResult) IsSetE() bool {
	return p.E != nil
}

func (p *AddQueueAlertPolicyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddQueueAlertPolicyResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *AddQueueAlertPolicyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addQueueAlertPolicy_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddQueueAlertPolicyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *AddQueueAlertPolicyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddQueueAlertPolicyResult(%+v)", *p)
}

type AddTagAlertPolicyArgs struct {
	Request *AddTagAlertPolicyRequest `thrift:"request,1" json:"request"`
}

func NewAddTagAlertPolicyArgs() *AddTagAlertPolicyArgs {
	return &AddTagAlertPolicyArgs{}
}

var AddTagAlertPolicyArgs_Request_DEFAULT *AddTagAlertPolicyRequest

func (p *AddTagAlertPolicyArgs) GetRequest() *AddTagAlertPolicyRequest {
	if !p.IsSetRequest() {
		return AddTagAlertPolicyArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *AddTagAlertPolicyArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *AddTagAlertPolicyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddTagAlertPolicyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &AddTagAlertPolicyRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *AddTagAlertPolicyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addTagAlertPolicy_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddTagAlertPolicyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *AddTagAlertPolicyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddTagAlertPolicyArgs(%+v)", *p)
}

type AddTagAlertPolicyResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewAddTagAlertPolicyResult() *AddTagAlertPolicyResult {
	return &AddTagAlertPolicyResult{}
}

var AddTagAlertPolicyResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *AddTagAlertPolicyResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return AddTagAlertPolicyResult_E_DEFAULT
	}
	return p.E
}
func (p *AddTagAlertPolicyResult) IsSetE() bool {
	return p.E != nil
}

func (p *AddTagAlertPolicyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddTagAlertPolicyResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *AddTagAlertPolicyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addTagAlertPolicy_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddTagAlertPolicyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *AddTagAlertPolicyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddTagAlertPolicyResult(%+v)", *p)
}

type DeleteQueueAlertPolicyArgs struct {
	Request *DeleteQueueAlertPolicyRequest `thrift:"request,1" json:"request"`
}

func NewDeleteQueueAlertPolicyArgs() *DeleteQueueAlertPolicyArgs {
	return &DeleteQueueAlertPolicyArgs{}
}

var DeleteQueueAlertPolicyArgs_Request_DEFAULT *DeleteQueueAlertPolicyRequest

func (p *DeleteQueueAlertPolicyArgs) GetRequest() *DeleteQueueAlertPolicyRequest {
	if !p.IsSetRequest() {
		return DeleteQueueAlertPolicyArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DeleteQueueAlertPolicyArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DeleteQueueAlertPolicyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteQueueAlertPolicyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteQueueAlertPolicyRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DeleteQueueAlertPolicyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteQueueAlertPolicy_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteQueueAlertPolicyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DeleteQueueAlertPolicyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteQueueAlertPolicyArgs(%+v)", *p)
}

type DeleteQueueAlertPolicyResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewDeleteQueueAlertPolicyResult() *DeleteQueueAlertPolicyResult {
	return &DeleteQueueAlertPolicyResult{}
}

var DeleteQueueAlertPolicyResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *DeleteQueueAlertPolicyResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return DeleteQueueAlertPolicyResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteQueueAlertPolicyResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteQueueAlertPolicyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteQueueAlertPolicyResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteQueueAlertPolicyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteQueueAlertPolicy_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteQueueAlertPolicyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteQueueAlertPolicyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteQueueAlertPolicyResult(%+v)", *p)
}

type DeleteTagAlertPolicyArgs struct {
	Request *DeleteTagAlertPolicyRequest `thrift:"request,1" json:"request"`
}

func NewDeleteTagAlertPolicyArgs() *DeleteTagAlertPolicyArgs {
	return &DeleteTagAlertPolicyArgs{}
}

var DeleteTagAlertPolicyArgs_Request_DEFAULT *DeleteTagAlertPolicyRequest

func (p *DeleteTagAlertPolicyArgs) GetRequest() *DeleteTagAlertPolicyRequest {
	if !p.IsSetRequest() {
		return DeleteTagAlertPolicyArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DeleteTagAlertPolicyArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DeleteTagAlertPolicyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTagAlertPolicyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteTagAlertPolicyRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DeleteTagAlertPolicyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTagAlertPolicy_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTagAlertPolicyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DeleteTagAlertPolicyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTagAlertPolicyArgs(%+v)", *p)
}

type DeleteTagAlertPolicyResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewDeleteTagAlertPolicyResult() *DeleteTagAlertPolicyResult {
	return &DeleteTagAlertPolicyResult{}
}

var DeleteTagAlertPolicyResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *DeleteTagAlertPolicyResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return DeleteTagAlertPolicyResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteTagAlertPolicyResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteTagAlertPolicyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTagAlertPolicyResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteTagAlertPolicyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTagAlertPolicy_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTagAlertPolicyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTagAlertPolicyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTagAlertPolicyResult(%+v)", *p)
}

type ListQueueAlertPoliciesArgs struct {
	Request *ListQueueAlertPoliciesRequest `thrift:"request,1" json:"request"`
}

func NewListQueueAlertPoliciesArgs() *ListQueueAlertPoliciesArgs {
	return &ListQueueAlertPoliciesArgs{}
}

var ListQueueAlertPoliciesArgs_Request_DEFAULT *ListQueueAlertPoliciesRequest

func (p *ListQueueAlertPoliciesArgs) GetRequest() *ListQueueAlertPoliciesRequest {
	if !p.IsSetRequest() {
		return ListQueueAlertPoliciesArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ListQueueAlertPoliciesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ListQueueAlertPoliciesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ListQueueAlertPoliciesRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listQueueAlertPolicies_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *ListQueueAlertPoliciesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListQueueAlertPoliciesArgs(%+v)", *p)
}

type ListQueueAlertPoliciesResult struct {
	Success *ListQueueAlertPoliciesResponse   `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewListQueueAlertPoliciesResult() *ListQueueAlertPoliciesResult {
	return &ListQueueAlertPoliciesResult{}
}

var ListQueueAlertPoliciesResult_Success_DEFAULT *ListQueueAlertPoliciesResponse

func (p *ListQueueAlertPoliciesResult) GetSuccess() *ListQueueAlertPoliciesResponse {
	if !p.IsSetSuccess() {
		return ListQueueAlertPoliciesResult_Success_DEFAULT
	}
	return p.Success
}

var ListQueueAlertPoliciesResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *ListQueueAlertPoliciesResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return ListQueueAlertPoliciesResult_E_DEFAULT
	}
	return p.E
}
func (p *ListQueueAlertPoliciesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListQueueAlertPoliciesResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListQueueAlertPoliciesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListQueueAlertPoliciesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listQueueAlertPolicies_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListQueueAlertPoliciesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListQueueAlertPoliciesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListQueueAlertPoliciesResult(%+v)", *p)
}

type ListTagAlertPoliciesArgs struct {
	Request *ListTagAlertPoliciesRequest `thrift:"request,1" json:"request"`
}

func NewListTagAlertPoliciesArgs() *ListTagAlertPoliciesArgs {
	return &ListTagAlertPoliciesArgs{}
}

var ListTagAlertPoliciesArgs_Request_DEFAULT *ListTagAlertPoliciesRequest

func (p *ListTagAlertPoliciesArgs) GetRequest() *ListTagAlertPoliciesRequest {
	if !p.IsSetRequest() {
		return ListTagAlertPoliciesArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ListTagAlertPoliciesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ListTagAlertPoliciesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagAlertPoliciesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ListTagAlertPoliciesRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ListTagAlertPoliciesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTagAlertPolicies_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagAlertPoliciesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *ListTagAlertPoliciesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagAlertPoliciesArgs(%+v)", *p)
}

type ListTagAlertPoliciesResult struct {
	Success *ListTagAlertPoliciesResponse     `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewListTagAlertPoliciesResult() *ListTagAlertPoliciesResult {
	return &ListTagAlertPoliciesResult{}
}

var ListTagAlertPoliciesResult_Success_DEFAULT *ListTagAlertPoliciesResponse

func (p *ListTagAlertPoliciesResult) GetSuccess() *ListTagAlertPoliciesResponse {
	if !p.IsSetSuccess() {
		return ListTagAlertPoliciesResult_Success_DEFAULT
	}
	return p.Success
}

var ListTagAlertPoliciesResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *ListTagAlertPoliciesResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return ListTagAlertPoliciesResult_E_DEFAULT
	}
	return p.E
}
func (p *ListTagAlertPoliciesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListTagAlertPoliciesResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListTagAlertPoliciesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagAlertPoliciesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListTagAlertPoliciesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListTagAlertPoliciesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListTagAlertPoliciesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTagAlertPolicies_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagAlertPoliciesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListTagAlertPoliciesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListTagAlertPoliciesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagAlertPoliciesResult(%+v)", *p)
}

type SetQueueDailyStatisticsStateArgs struct {
	Request *SetQueueDailyStatisticsStateRequest `thrift:"request,1" json:"request"`
}

func NewSetQueueDailyStatisticsStateArgs() *SetQueueDailyStatisticsStateArgs {
	return &SetQueueDailyStatisticsStateArgs{}
}

var SetQueueDailyStatisticsStateArgs_Request_DEFAULT *SetQueueDailyStatisticsStateRequest

func (p *SetQueueDailyStatisticsStateArgs) GetRequest() *SetQueueDailyStatisticsStateRequest {
	if !p.IsSetRequest() {
		return SetQueueDailyStatisticsStateArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SetQueueDailyStatisticsStateArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SetQueueDailyStatisticsStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueDailyStatisticsStateArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &SetQueueDailyStatisticsStateRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *SetQueueDailyStatisticsStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setQueueDailyStatisticsState_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueDailyStatisticsStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *SetQueueDailyStatisticsStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueDailyStatisticsStateArgs(%+v)", *p)
}

type SetQueueDailyStatisticsStateResult struct {
	E *common.GalaxyEmqServiceException `thrift:"e,1" json:"e"`
}

func NewSetQueueDailyStatisticsStateResult() *SetQueueDailyStatisticsStateResult {
	return &SetQueueDailyStatisticsStateResult{}
}

var SetQueueDailyStatisticsStateResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *SetQueueDailyStatisticsStateResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return SetQueueDailyStatisticsStateResult_E_DEFAULT
	}
	return p.E
}
func (p *SetQueueDailyStatisticsStateResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetQueueDailyStatisticsStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueDailyStatisticsStateResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetQueueDailyStatisticsStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setQueueDailyStatisticsState_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueDailyStatisticsStateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetQueueDailyStatisticsStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueDailyStatisticsStateResult(%+v)", *p)
}

type GetQueueDailyStatisticsStateArgs struct {
	Request *GetQueueDailyStatisticsStateRequest `thrift:"request,1" json:"request"`
}

func NewGetQueueDailyStatisticsStateArgs() *GetQueueDailyStatisticsStateArgs {
	return &GetQueueDailyStatisticsStateArgs{}
}

var GetQueueDailyStatisticsStateArgs_Request_DEFAULT *GetQueueDailyStatisticsStateRequest

func (p *GetQueueDailyStatisticsStateArgs) GetRequest() *GetQueueDailyStatisticsStateRequest {
	if !p.IsSetRequest() {
		return GetQueueDailyStatisticsStateArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetQueueDailyStatisticsStateArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetQueueDailyStatisticsStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetQueueDailyStatisticsStateRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueueDailyStatisticsState_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetQueueDailyStatisticsStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueDailyStatisticsStateArgs(%+v)", *p)
}

type GetQueueDailyStatisticsStateResult struct {
	Success *GetQueueDailyStatisticsStateResponse `thrift:"success,0" json:"success"`
	E       *common.GalaxyEmqServiceException     `thrift:"e,1" json:"e"`
}

func NewGetQueueDailyStatisticsStateResult() *GetQueueDailyStatisticsStateResult {
	return &GetQueueDailyStatisticsStateResult{}
}

var GetQueueDailyStatisticsStateResult_Success_DEFAULT *GetQueueDailyStatisticsStateResponse

func (p *GetQueueDailyStatisticsStateResult) GetSuccess() *GetQueueDailyStatisticsStateResponse {
	if !p.IsSetSuccess() {
		return GetQueueDailyStatisticsStateResult_Success_DEFAULT
	}
	return p.Success
}

var GetQueueDailyStatisticsStateResult_E_DEFAULT *common.GalaxyEmqServiceException

func (p *GetQueueDailyStatisticsStateResult) GetE() *common.GalaxyEmqServiceException {
	if !p.IsSetE() {
		return GetQueueDailyStatisticsStateResult_E_DEFAULT
	}
	return p.E
}
func (p *GetQueueDailyStatisticsStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetQueueDailyStatisticsStateResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetQueueDailyStatisticsStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetQueueDailyStatisticsStateResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyEmqServiceException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueueDailyStatisticsState_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueDailyStatisticsStateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetQueueDailyStatisticsStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueDailyStatisticsStateResult(%+v)", *p)
}
