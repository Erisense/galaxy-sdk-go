// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package statistics

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/emq/common"
	"github.com/XiaoMi/galaxy-sdk-go/emq/queue"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = queue.GoUnusedProtection__
var GoUnusedProtection__ int

type ALERT_TYPE int64

const (
	ALERT_TYPE_SEND_REQUEST          ALERT_TYPE = 0
	ALERT_TYPE_RECEIVE_REQUEST       ALERT_TYPE = 1
	ALERT_TYPE_CHANGE_REQUEST        ALERT_TYPE = 2
	ALERT_TYPE_DELETE_REQUEST        ALERT_TYPE = 3
	ALERT_TYPE_SINGLE_SEND_REQUEST   ALERT_TYPE = 4
	ALERT_TYPE_BATCH_SEND_REQUEST    ALERT_TYPE = 5
	ALERT_TYPE_SHORT_RECEIVE_REQUEST ALERT_TYPE = 6
	ALERT_TYPE_LONG_RECEIVE_REQUEST  ALERT_TYPE = 7
	ALERT_TYPE_QUEUE_MESSAGE_NUMBER  ALERT_TYPE = 8
)

func (p ALERT_TYPE) String() string {
	switch p {
	case ALERT_TYPE_SEND_REQUEST:
		return "ALERT_TYPE_SEND_REQUEST"
	case ALERT_TYPE_RECEIVE_REQUEST:
		return "ALERT_TYPE_RECEIVE_REQUEST"
	case ALERT_TYPE_CHANGE_REQUEST:
		return "ALERT_TYPE_CHANGE_REQUEST"
	case ALERT_TYPE_DELETE_REQUEST:
		return "ALERT_TYPE_DELETE_REQUEST"
	case ALERT_TYPE_SINGLE_SEND_REQUEST:
		return "ALERT_TYPE_SINGLE_SEND_REQUEST"
	case ALERT_TYPE_BATCH_SEND_REQUEST:
		return "ALERT_TYPE_BATCH_SEND_REQUEST"
	case ALERT_TYPE_SHORT_RECEIVE_REQUEST:
		return "ALERT_TYPE_SHORT_RECEIVE_REQUEST"
	case ALERT_TYPE_LONG_RECEIVE_REQUEST:
		return "ALERT_TYPE_LONG_RECEIVE_REQUEST"
	case ALERT_TYPE_QUEUE_MESSAGE_NUMBER:
		return "ALERT_TYPE_QUEUE_MESSAGE_NUMBER"
	}
	return "<UNSET>"
}

func ALERT_TYPEFromString(s string) (ALERT_TYPE, error) {
	switch s {
	case "ALERT_TYPE_SEND_REQUEST":
		return ALERT_TYPE_SEND_REQUEST, nil
	case "ALERT_TYPE_RECEIVE_REQUEST":
		return ALERT_TYPE_RECEIVE_REQUEST, nil
	case "ALERT_TYPE_CHANGE_REQUEST":
		return ALERT_TYPE_CHANGE_REQUEST, nil
	case "ALERT_TYPE_DELETE_REQUEST":
		return ALERT_TYPE_DELETE_REQUEST, nil
	case "ALERT_TYPE_SINGLE_SEND_REQUEST":
		return ALERT_TYPE_SINGLE_SEND_REQUEST, nil
	case "ALERT_TYPE_BATCH_SEND_REQUEST":
		return ALERT_TYPE_BATCH_SEND_REQUEST, nil
	case "ALERT_TYPE_SHORT_RECEIVE_REQUEST":
		return ALERT_TYPE_SHORT_RECEIVE_REQUEST, nil
	case "ALERT_TYPE_LONG_RECEIVE_REQUEST":
		return ALERT_TYPE_LONG_RECEIVE_REQUEST, nil
	case "ALERT_TYPE_QUEUE_MESSAGE_NUMBER":
		return ALERT_TYPE_QUEUE_MESSAGE_NUMBER, nil
	}
	return ALERT_TYPE(0), fmt.Errorf("not a valid ALERT_TYPE string")
}

func ALERT_TYPEPtr(v ALERT_TYPE) *ALERT_TYPE { return &v }

type MEASUREMENT int64

const (
	MEASUREMENT_LATENCY      MEASUREMENT = 0
	MEASUREMENT_LATENCY_P999 MEASUREMENT = 1
	MEASUREMENT_COUNT        MEASUREMENT = 2
)

func (p MEASUREMENT) String() string {
	switch p {
	case MEASUREMENT_LATENCY:
		return "MEASUREMENT_LATENCY"
	case MEASUREMENT_LATENCY_P999:
		return "MEASUREMENT_LATENCY_P999"
	case MEASUREMENT_COUNT:
		return "MEASUREMENT_COUNT"
	}
	return "<UNSET>"
}

func MEASUREMENTFromString(s string) (MEASUREMENT, error) {
	switch s {
	case "MEASUREMENT_LATENCY":
		return MEASUREMENT_LATENCY, nil
	case "MEASUREMENT_LATENCY_P999":
		return MEASUREMENT_LATENCY_P999, nil
	case "MEASUREMENT_COUNT":
		return MEASUREMENT_COUNT, nil
	}
	return MEASUREMENT(0), fmt.Errorf("not a valid MEASUREMENT string")
}

func MEASUREMENTPtr(v MEASUREMENT) *MEASUREMENT { return &v }

type UserQuota struct {
	Throughput  *queue.Throughput `thrift:"throughput,1" json:"throughput"`
	QueueNumber *int64            `thrift:"queueNumber,2" json:"queueNumber"`
}

func NewUserQuota() *UserQuota {
	return &UserQuota{}
}

var UserQuota_Throughput_DEFAULT *queue.Throughput

func (p *UserQuota) GetThroughput() *queue.Throughput {
	if !p.IsSetThroughput() {
		return UserQuota_Throughput_DEFAULT
	}
	return p.Throughput
}

var UserQuota_QueueNumber_DEFAULT int64

func (p *UserQuota) GetQueueNumber() int64 {
	if !p.IsSetQueueNumber() {
		return UserQuota_QueueNumber_DEFAULT
	}
	return *p.QueueNumber
}
func (p *UserQuota) IsSetThroughput() bool {
	return p.Throughput != nil
}

func (p *UserQuota) IsSetQueueNumber() bool {
	return p.QueueNumber != nil
}

func (p *UserQuota) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UserQuota) ReadField1(iprot thrift.TProtocol) error {
	p.Throughput = &queue.Throughput{}
	if err := p.Throughput.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Throughput, err)
	}
	return nil
}

func (p *UserQuota) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.QueueNumber = &v
	}
	return nil
}

func (p *UserQuota) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserQuota"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UserQuota) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetThroughput() {
		if err := oprot.WriteFieldBegin("throughput", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:throughput: %s", p, err)
		}
		if err := p.Throughput.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Throughput, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:throughput: %s", p, err)
		}
	}
	return err
}

func (p *UserQuota) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueueNumber() {
		if err := oprot.WriteFieldBegin("queueNumber", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:queueNumber: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.QueueNumber)); err != nil {
			return fmt.Errorf("%T.queueNumber (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:queueNumber: %s", p, err)
		}
	}
	return err
}

func (p *UserQuota) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserQuota(%+v)", *p)
}

type SetUserQuotaRequest struct {
	DeveloperId string     `thrift:"developerId,1,required" json:"developerId"`
	UserQuota   *UserQuota `thrift:"userQuota,2,required" json:"userQuota"`
}

func NewSetUserQuotaRequest() *SetUserQuotaRequest {
	return &SetUserQuotaRequest{}
}

func (p *SetUserQuotaRequest) GetDeveloperId() string {
	return p.DeveloperId
}

var SetUserQuotaRequest_UserQuota_DEFAULT *UserQuota

func (p *SetUserQuotaRequest) GetUserQuota() *UserQuota {
	if !p.IsSetUserQuota() {
		return SetUserQuotaRequest_UserQuota_DEFAULT
	}
	return p.UserQuota
}
func (p *SetUserQuotaRequest) IsSetUserQuota() bool {
	return p.UserQuota != nil
}

func (p *SetUserQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetUserQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DeveloperId = v
	}
	return nil
}

func (p *SetUserQuotaRequest) ReadField2(iprot thrift.TProtocol) error {
	p.UserQuota = &UserQuota{}
	if err := p.UserQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserQuota, err)
	}
	return nil
}

func (p *SetUserQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetUserQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetUserQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:developerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeveloperId)); err != nil {
		return fmt.Errorf("%T.developerId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:developerId: %s", p, err)
	}
	return err
}

func (p *SetUserQuotaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userQuota", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userQuota: %s", p, err)
	}
	if err := p.UserQuota.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.UserQuota, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userQuota: %s", p, err)
	}
	return err
}

func (p *SetUserQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserQuotaRequest(%+v)", *p)
}

type GetUserQuotaRequest struct {
	DeveloperId *string `thrift:"developerId,1" json:"developerId"`
}

func NewGetUserQuotaRequest() *GetUserQuotaRequest {
	return &GetUserQuotaRequest{}
}

var GetUserQuotaRequest_DeveloperId_DEFAULT string

func (p *GetUserQuotaRequest) GetDeveloperId() string {
	if !p.IsSetDeveloperId() {
		return GetUserQuotaRequest_DeveloperId_DEFAULT
	}
	return *p.DeveloperId
}
func (p *GetUserQuotaRequest) IsSetDeveloperId() bool {
	return p.DeveloperId != nil
}

func (p *GetUserQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DeveloperId = &v
	}
	return nil
}

func (p *GetUserQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetUserQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeveloperId() {
		if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:developerId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DeveloperId)); err != nil {
			return fmt.Errorf("%T.developerId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:developerId: %s", p, err)
		}
	}
	return err
}

func (p *GetUserQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserQuotaRequest(%+v)", *p)
}

type GetUserQuotaResponse struct {
	DeveloperId string     `thrift:"developerId,1,required" json:"developerId"`
	UserQuota   *UserQuota `thrift:"userQuota,2,required" json:"userQuota"`
}

func NewGetUserQuotaResponse() *GetUserQuotaResponse {
	return &GetUserQuotaResponse{}
}

func (p *GetUserQuotaResponse) GetDeveloperId() string {
	return p.DeveloperId
}

var GetUserQuotaResponse_UserQuota_DEFAULT *UserQuota

func (p *GetUserQuotaResponse) GetUserQuota() *UserQuota {
	if !p.IsSetUserQuota() {
		return GetUserQuotaResponse_UserQuota_DEFAULT
	}
	return p.UserQuota
}
func (p *GetUserQuotaResponse) IsSetUserQuota() bool {
	return p.UserQuota != nil
}

func (p *GetUserQuotaResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserQuotaResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DeveloperId = v
	}
	return nil
}

func (p *GetUserQuotaResponse) ReadField2(iprot thrift.TProtocol) error {
	p.UserQuota = &UserQuota{}
	if err := p.UserQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserQuota, err)
	}
	return nil
}

func (p *GetUserQuotaResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetUserQuotaResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserQuotaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:developerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeveloperId)); err != nil {
		return fmt.Errorf("%T.developerId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:developerId: %s", p, err)
	}
	return err
}

func (p *GetUserQuotaResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userQuota", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userQuota: %s", p, err)
	}
	if err := p.UserQuota.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.UserQuota, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userQuota: %s", p, err)
	}
	return err
}

func (p *GetUserQuotaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserQuotaResponse(%+v)", *p)
}

type GetUserUsedQuotaRequest struct {
	DeveloperId *string `thrift:"developerId,1" json:"developerId"`
}

func NewGetUserUsedQuotaRequest() *GetUserUsedQuotaRequest {
	return &GetUserUsedQuotaRequest{}
}

var GetUserUsedQuotaRequest_DeveloperId_DEFAULT string

func (p *GetUserUsedQuotaRequest) GetDeveloperId() string {
	if !p.IsSetDeveloperId() {
		return GetUserUsedQuotaRequest_DeveloperId_DEFAULT
	}
	return *p.DeveloperId
}
func (p *GetUserUsedQuotaRequest) IsSetDeveloperId() bool {
	return p.DeveloperId != nil
}

func (p *GetUserUsedQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserUsedQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DeveloperId = &v
	}
	return nil
}

func (p *GetUserUsedQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetUserUsedQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserUsedQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeveloperId() {
		if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:developerId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DeveloperId)); err != nil {
			return fmt.Errorf("%T.developerId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:developerId: %s", p, err)
		}
	}
	return err
}

func (p *GetUserUsedQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserUsedQuotaRequest(%+v)", *p)
}

type SetUserInfoRequest struct {
	DeveloperId *string `thrift:"developerId,1" json:"developerId"`
	UserName    *string `thrift:"userName,2" json:"userName"`
	Email       *string `thrift:"email,3" json:"email"`
	Sms         *string `thrift:"sms,4" json:"sms"`
}

func NewSetUserInfoRequest() *SetUserInfoRequest {
	return &SetUserInfoRequest{}
}

var SetUserInfoRequest_DeveloperId_DEFAULT string

func (p *SetUserInfoRequest) GetDeveloperId() string {
	if !p.IsSetDeveloperId() {
		return SetUserInfoRequest_DeveloperId_DEFAULT
	}
	return *p.DeveloperId
}

var SetUserInfoRequest_UserName_DEFAULT string

func (p *SetUserInfoRequest) GetUserName() string {
	if !p.IsSetUserName() {
		return SetUserInfoRequest_UserName_DEFAULT
	}
	return *p.UserName
}

var SetUserInfoRequest_Email_DEFAULT string

func (p *SetUserInfoRequest) GetEmail() string {
	if !p.IsSetEmail() {
		return SetUserInfoRequest_Email_DEFAULT
	}
	return *p.Email
}

var SetUserInfoRequest_Sms_DEFAULT string

func (p *SetUserInfoRequest) GetSms() string {
	if !p.IsSetSms() {
		return SetUserInfoRequest_Sms_DEFAULT
	}
	return *p.Sms
}
func (p *SetUserInfoRequest) IsSetDeveloperId() bool {
	return p.DeveloperId != nil
}

func (p *SetUserInfoRequest) IsSetUserName() bool {
	return p.UserName != nil
}

func (p *SetUserInfoRequest) IsSetEmail() bool {
	return p.Email != nil
}

func (p *SetUserInfoRequest) IsSetSms() bool {
	return p.Sms != nil
}

func (p *SetUserInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetUserInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DeveloperId = &v
	}
	return nil
}

func (p *SetUserInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserName = &v
	}
	return nil
}

func (p *SetUserInfoRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Email = &v
	}
	return nil
}

func (p *SetUserInfoRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Sms = &v
	}
	return nil
}

func (p *SetUserInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetUserInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetUserInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeveloperId() {
		if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:developerId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DeveloperId)); err != nil {
			return fmt.Errorf("%T.developerId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:developerId: %s", p, err)
		}
	}
	return err
}

func (p *SetUserInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserName() {
		if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:userName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.UserName)); err != nil {
			return fmt.Errorf("%T.userName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:userName: %s", p, err)
		}
	}
	return err
}

func (p *SetUserInfoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:email: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Email)); err != nil {
			return fmt.Errorf("%T.email (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:email: %s", p, err)
		}
	}
	return err
}

func (p *SetUserInfoRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSms() {
		if err := oprot.WriteFieldBegin("sms", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:sms: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Sms)); err != nil {
			return fmt.Errorf("%T.sms (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:sms: %s", p, err)
		}
	}
	return err
}

func (p *SetUserInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserInfoRequest(%+v)", *p)
}

type GetUserInfoRequest struct {
	DeveloperId *string `thrift:"developerId,1" json:"developerId"`
}

func NewGetUserInfoRequest() *GetUserInfoRequest {
	return &GetUserInfoRequest{}
}

var GetUserInfoRequest_DeveloperId_DEFAULT string

func (p *GetUserInfoRequest) GetDeveloperId() string {
	if !p.IsSetDeveloperId() {
		return GetUserInfoRequest_DeveloperId_DEFAULT
	}
	return *p.DeveloperId
}
func (p *GetUserInfoRequest) IsSetDeveloperId() bool {
	return p.DeveloperId != nil
}

func (p *GetUserInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DeveloperId = &v
	}
	return nil
}

func (p *GetUserInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetUserInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeveloperId() {
		if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:developerId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DeveloperId)); err != nil {
			return fmt.Errorf("%T.developerId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:developerId: %s", p, err)
		}
	}
	return err
}

func (p *GetUserInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoRequest(%+v)", *p)
}

type GetUserInfoResponse struct {
	DeveloperId string  `thrift:"developerId,1,required" json:"developerId"`
	UserName    *string `thrift:"userName,2" json:"userName"`
	Email       *string `thrift:"email,3" json:"email"`
	Sms         *string `thrift:"sms,4" json:"sms"`
}

func NewGetUserInfoResponse() *GetUserInfoResponse {
	return &GetUserInfoResponse{}
}

func (p *GetUserInfoResponse) GetDeveloperId() string {
	return p.DeveloperId
}

var GetUserInfoResponse_UserName_DEFAULT string

func (p *GetUserInfoResponse) GetUserName() string {
	if !p.IsSetUserName() {
		return GetUserInfoResponse_UserName_DEFAULT
	}
	return *p.UserName
}

var GetUserInfoResponse_Email_DEFAULT string

func (p *GetUserInfoResponse) GetEmail() string {
	if !p.IsSetEmail() {
		return GetUserInfoResponse_Email_DEFAULT
	}
	return *p.Email
}

var GetUserInfoResponse_Sms_DEFAULT string

func (p *GetUserInfoResponse) GetSms() string {
	if !p.IsSetSms() {
		return GetUserInfoResponse_Sms_DEFAULT
	}
	return *p.Sms
}
func (p *GetUserInfoResponse) IsSetUserName() bool {
	return p.UserName != nil
}

func (p *GetUserInfoResponse) IsSetEmail() bool {
	return p.Email != nil
}

func (p *GetUserInfoResponse) IsSetSms() bool {
	return p.Sms != nil
}

func (p *GetUserInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DeveloperId = v
	}
	return nil
}

func (p *GetUserInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserName = &v
	}
	return nil
}

func (p *GetUserInfoResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Email = &v
	}
	return nil
}

func (p *GetUserInfoResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Sms = &v
	}
	return nil
}

func (p *GetUserInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetUserInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:developerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeveloperId)); err != nil {
		return fmt.Errorf("%T.developerId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:developerId: %s", p, err)
	}
	return err
}

func (p *GetUserInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserName() {
		if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:userName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.UserName)); err != nil {
			return fmt.Errorf("%T.userName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:userName: %s", p, err)
		}
	}
	return err
}

func (p *GetUserInfoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:email: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Email)); err != nil {
			return fmt.Errorf("%T.email (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:email: %s", p, err)
		}
	}
	return err
}

func (p *GetUserInfoResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSms() {
		if err := oprot.WriteFieldBegin("sms", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:sms: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Sms)); err != nil {
			return fmt.Errorf("%T.sms (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:sms: %s", p, err)
		}
	}
	return err
}

func (p *GetUserInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoResponse(%+v)", *p)
}

type AlertPolicy struct {
	TypeA1      ALERT_TYPE  `thrift:"type,1,required" json:"type"`
	Measurement MEASUREMENT `thrift:"measurement,2,required" json:"measurement"`
	Threshold   *float64    `thrift:"threshold,3" json:"threshold"`
}

func NewAlertPolicy() *AlertPolicy {
	return &AlertPolicy{}
}

func (p *AlertPolicy) GetTypeA1() ALERT_TYPE {
	return p.TypeA1
}

func (p *AlertPolicy) GetMeasurement() MEASUREMENT {
	return p.Measurement
}

var AlertPolicy_Threshold_DEFAULT float64

func (p *AlertPolicy) GetThreshold() float64 {
	if !p.IsSetThreshold() {
		return AlertPolicy_Threshold_DEFAULT
	}
	return *p.Threshold
}
func (p *AlertPolicy) IsSetThreshold() bool {
	return p.Threshold != nil
}

func (p *AlertPolicy) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlertPolicy) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := ALERT_TYPE(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *AlertPolicy) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := MEASUREMENT(v)
		p.Measurement = temp
	}
	return nil
}

func (p *AlertPolicy) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Threshold = &v
	}
	return nil
}

func (p *AlertPolicy) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AlertPolicy"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlertPolicy) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *AlertPolicy) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("measurement", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:measurement: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Measurement)); err != nil {
		return fmt.Errorf("%T.measurement (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:measurement: %s", p, err)
	}
	return err
}

func (p *AlertPolicy) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetThreshold() {
		if err := oprot.WriteFieldBegin("threshold", thrift.DOUBLE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:threshold: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.Threshold)); err != nil {
			return fmt.Errorf("%T.threshold (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:threshold: %s", p, err)
		}
	}
	return err
}

func (p *AlertPolicy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlertPolicy(%+v)", *p)
}

type AddQueueAlertPolicyRequest struct {
	QueueName   string       `thrift:"queueName,1,required" json:"queueName"`
	AlertPolicy *AlertPolicy `thrift:"alertPolicy,2,required" json:"alertPolicy"`
}

func NewAddQueueAlertPolicyRequest() *AddQueueAlertPolicyRequest {
	return &AddQueueAlertPolicyRequest{}
}

func (p *AddQueueAlertPolicyRequest) GetQueueName() string {
	return p.QueueName
}

var AddQueueAlertPolicyRequest_AlertPolicy_DEFAULT *AlertPolicy

func (p *AddQueueAlertPolicyRequest) GetAlertPolicy() *AlertPolicy {
	if !p.IsSetAlertPolicy() {
		return AddQueueAlertPolicyRequest_AlertPolicy_DEFAULT
	}
	return p.AlertPolicy
}
func (p *AddQueueAlertPolicyRequest) IsSetAlertPolicy() bool {
	return p.AlertPolicy != nil
}

func (p *AddQueueAlertPolicyRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddQueueAlertPolicyRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *AddQueueAlertPolicyRequest) ReadField2(iprot thrift.TProtocol) error {
	p.AlertPolicy = &AlertPolicy{}
	if err := p.AlertPolicy.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AlertPolicy, err)
	}
	return nil
}

func (p *AddQueueAlertPolicyRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddQueueAlertPolicyRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddQueueAlertPolicyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *AddQueueAlertPolicyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("alertPolicy", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:alertPolicy: %s", p, err)
	}
	if err := p.AlertPolicy.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AlertPolicy, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:alertPolicy: %s", p, err)
	}
	return err
}

func (p *AddQueueAlertPolicyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddQueueAlertPolicyRequest(%+v)", *p)
}

type AddTagAlertPolicyRequest struct {
	QueueName   string       `thrift:"queueName,1,required" json:"queueName"`
	TagName     *string      `thrift:"tagName,2" json:"tagName"`
	AlertPolicy *AlertPolicy `thrift:"alertPolicy,3,required" json:"alertPolicy"`
}

func NewAddTagAlertPolicyRequest() *AddTagAlertPolicyRequest {
	return &AddTagAlertPolicyRequest{}
}

func (p *AddTagAlertPolicyRequest) GetQueueName() string {
	return p.QueueName
}

var AddTagAlertPolicyRequest_TagName_DEFAULT string

func (p *AddTagAlertPolicyRequest) GetTagName() string {
	if !p.IsSetTagName() {
		return AddTagAlertPolicyRequest_TagName_DEFAULT
	}
	return *p.TagName
}

var AddTagAlertPolicyRequest_AlertPolicy_DEFAULT *AlertPolicy

func (p *AddTagAlertPolicyRequest) GetAlertPolicy() *AlertPolicy {
	if !p.IsSetAlertPolicy() {
		return AddTagAlertPolicyRequest_AlertPolicy_DEFAULT
	}
	return p.AlertPolicy
}
func (p *AddTagAlertPolicyRequest) IsSetTagName() bool {
	return p.TagName != nil
}

func (p *AddTagAlertPolicyRequest) IsSetAlertPolicy() bool {
	return p.AlertPolicy != nil
}

func (p *AddTagAlertPolicyRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddTagAlertPolicyRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *AddTagAlertPolicyRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TagName = &v
	}
	return nil
}

func (p *AddTagAlertPolicyRequest) ReadField3(iprot thrift.TProtocol) error {
	p.AlertPolicy = &AlertPolicy{}
	if err := p.AlertPolicy.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AlertPolicy, err)
	}
	return nil
}

func (p *AddTagAlertPolicyRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddTagAlertPolicyRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddTagAlertPolicyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *AddTagAlertPolicyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagName() {
		if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TagName)); err != nil {
			return fmt.Errorf("%T.tagName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
		}
	}
	return err
}

func (p *AddTagAlertPolicyRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("alertPolicy", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:alertPolicy: %s", p, err)
	}
	if err := p.AlertPolicy.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AlertPolicy, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:alertPolicy: %s", p, err)
	}
	return err
}

func (p *AddTagAlertPolicyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddTagAlertPolicyRequest(%+v)", *p)
}

type DeleteQueueAlertPolicyRequest struct {
	QueueName   string       `thrift:"queueName,1,required" json:"queueName"`
	AlertPolicy *AlertPolicy `thrift:"alertPolicy,2,required" json:"alertPolicy"`
}

func NewDeleteQueueAlertPolicyRequest() *DeleteQueueAlertPolicyRequest {
	return &DeleteQueueAlertPolicyRequest{}
}

func (p *DeleteQueueAlertPolicyRequest) GetQueueName() string {
	return p.QueueName
}

var DeleteQueueAlertPolicyRequest_AlertPolicy_DEFAULT *AlertPolicy

func (p *DeleteQueueAlertPolicyRequest) GetAlertPolicy() *AlertPolicy {
	if !p.IsSetAlertPolicy() {
		return DeleteQueueAlertPolicyRequest_AlertPolicy_DEFAULT
	}
	return p.AlertPolicy
}
func (p *DeleteQueueAlertPolicyRequest) IsSetAlertPolicy() bool {
	return p.AlertPolicy != nil
}

func (p *DeleteQueueAlertPolicyRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteQueueAlertPolicyRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *DeleteQueueAlertPolicyRequest) ReadField2(iprot thrift.TProtocol) error {
	p.AlertPolicy = &AlertPolicy{}
	if err := p.AlertPolicy.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AlertPolicy, err)
	}
	return nil
}

func (p *DeleteQueueAlertPolicyRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteQueueAlertPolicyRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteQueueAlertPolicyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *DeleteQueueAlertPolicyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("alertPolicy", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:alertPolicy: %s", p, err)
	}
	if err := p.AlertPolicy.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AlertPolicy, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:alertPolicy: %s", p, err)
	}
	return err
}

func (p *DeleteQueueAlertPolicyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteQueueAlertPolicyRequest(%+v)", *p)
}

type DeleteTagAlertPolicyRequest struct {
	QueueName   string       `thrift:"queueName,1,required" json:"queueName"`
	TagName     *string      `thrift:"tagName,2" json:"tagName"`
	AlertPolicy *AlertPolicy `thrift:"alertPolicy,3,required" json:"alertPolicy"`
}

func NewDeleteTagAlertPolicyRequest() *DeleteTagAlertPolicyRequest {
	return &DeleteTagAlertPolicyRequest{}
}

func (p *DeleteTagAlertPolicyRequest) GetQueueName() string {
	return p.QueueName
}

var DeleteTagAlertPolicyRequest_TagName_DEFAULT string

func (p *DeleteTagAlertPolicyRequest) GetTagName() string {
	if !p.IsSetTagName() {
		return DeleteTagAlertPolicyRequest_TagName_DEFAULT
	}
	return *p.TagName
}

var DeleteTagAlertPolicyRequest_AlertPolicy_DEFAULT *AlertPolicy

func (p *DeleteTagAlertPolicyRequest) GetAlertPolicy() *AlertPolicy {
	if !p.IsSetAlertPolicy() {
		return DeleteTagAlertPolicyRequest_AlertPolicy_DEFAULT
	}
	return p.AlertPolicy
}
func (p *DeleteTagAlertPolicyRequest) IsSetTagName() bool {
	return p.TagName != nil
}

func (p *DeleteTagAlertPolicyRequest) IsSetAlertPolicy() bool {
	return p.AlertPolicy != nil
}

func (p *DeleteTagAlertPolicyRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTagAlertPolicyRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *DeleteTagAlertPolicyRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TagName = &v
	}
	return nil
}

func (p *DeleteTagAlertPolicyRequest) ReadField3(iprot thrift.TProtocol) error {
	p.AlertPolicy = &AlertPolicy{}
	if err := p.AlertPolicy.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AlertPolicy, err)
	}
	return nil
}

func (p *DeleteTagAlertPolicyRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteTagAlertPolicyRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTagAlertPolicyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *DeleteTagAlertPolicyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagName() {
		if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TagName)); err != nil {
			return fmt.Errorf("%T.tagName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTagAlertPolicyRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("alertPolicy", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:alertPolicy: %s", p, err)
	}
	if err := p.AlertPolicy.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AlertPolicy, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:alertPolicy: %s", p, err)
	}
	return err
}

func (p *DeleteTagAlertPolicyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTagAlertPolicyRequest(%+v)", *p)
}

type ListQueueAlertPoliciesRequest struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
}

func NewListQueueAlertPoliciesRequest() *ListQueueAlertPoliciesRequest {
	return &ListQueueAlertPoliciesRequest{}
}

func (p *ListQueueAlertPoliciesRequest) GetQueueName() string {
	return p.QueueName
}
func (p *ListQueueAlertPoliciesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *ListQueueAlertPoliciesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListQueueAlertPoliciesRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *ListQueueAlertPoliciesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListQueueAlertPoliciesRequest(%+v)", *p)
}

type ListTagAlertPoliciesRequest struct {
	QueueName string  `thrift:"queueName,1,required" json:"queueName"`
	TagName   *string `thrift:"tagName,2" json:"tagName"`
}

func NewListTagAlertPoliciesRequest() *ListTagAlertPoliciesRequest {
	return &ListTagAlertPoliciesRequest{}
}

func (p *ListTagAlertPoliciesRequest) GetQueueName() string {
	return p.QueueName
}

var ListTagAlertPoliciesRequest_TagName_DEFAULT string

func (p *ListTagAlertPoliciesRequest) GetTagName() string {
	if !p.IsSetTagName() {
		return ListTagAlertPoliciesRequest_TagName_DEFAULT
	}
	return *p.TagName
}
func (p *ListTagAlertPoliciesRequest) IsSetTagName() bool {
	return p.TagName != nil
}

func (p *ListTagAlertPoliciesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagAlertPoliciesRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *ListTagAlertPoliciesRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TagName = &v
	}
	return nil
}

func (p *ListTagAlertPoliciesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListTagAlertPoliciesRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagAlertPoliciesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *ListTagAlertPoliciesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagName() {
		if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TagName)); err != nil {
			return fmt.Errorf("%T.tagName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
		}
	}
	return err
}

func (p *ListTagAlertPoliciesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagAlertPoliciesRequest(%+v)", *p)
}

type ListQueueAlertPoliciesResponse struct {
	QueueName     string         `thrift:"queueName,1,required" json:"queueName"`
	AlertPolicies []*AlertPolicy `thrift:"alertPolicies,2,required" json:"alertPolicies"`
}

func NewListQueueAlertPoliciesResponse() *ListQueueAlertPoliciesResponse {
	return &ListQueueAlertPoliciesResponse{}
}

func (p *ListQueueAlertPoliciesResponse) GetQueueName() string {
	return p.QueueName
}

func (p *ListQueueAlertPoliciesResponse) GetAlertPolicies() []*AlertPolicy {
	return p.AlertPolicies
}
func (p *ListQueueAlertPoliciesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *ListQueueAlertPoliciesResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*AlertPolicy, 0, size)
	p.AlertPolicies = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &AlertPolicy{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.AlertPolicies = append(p.AlertPolicies, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListQueueAlertPoliciesResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListQueueAlertPoliciesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *ListQueueAlertPoliciesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("alertPolicies", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:alertPolicies: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AlertPolicies)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.AlertPolicies {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:alertPolicies: %s", p, err)
	}
	return err
}

func (p *ListQueueAlertPoliciesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListQueueAlertPoliciesResponse(%+v)", *p)
}

type ListTagAlertPoliciesResponse struct {
	QueueName     string         `thrift:"queueName,1,required" json:"queueName"`
	TagName       *string        `thrift:"tagName,2" json:"tagName"`
	AlertPolicies []*AlertPolicy `thrift:"alertPolicies,3,required" json:"alertPolicies"`
}

func NewListTagAlertPoliciesResponse() *ListTagAlertPoliciesResponse {
	return &ListTagAlertPoliciesResponse{}
}

func (p *ListTagAlertPoliciesResponse) GetQueueName() string {
	return p.QueueName
}

var ListTagAlertPoliciesResponse_TagName_DEFAULT string

func (p *ListTagAlertPoliciesResponse) GetTagName() string {
	if !p.IsSetTagName() {
		return ListTagAlertPoliciesResponse_TagName_DEFAULT
	}
	return *p.TagName
}

func (p *ListTagAlertPoliciesResponse) GetAlertPolicies() []*AlertPolicy {
	return p.AlertPolicies
}
func (p *ListTagAlertPoliciesResponse) IsSetTagName() bool {
	return p.TagName != nil
}

func (p *ListTagAlertPoliciesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagAlertPoliciesResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *ListTagAlertPoliciesResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TagName = &v
	}
	return nil
}

func (p *ListTagAlertPoliciesResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*AlertPolicy, 0, size)
	p.AlertPolicies = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &AlertPolicy{}
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		p.AlertPolicies = append(p.AlertPolicies, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListTagAlertPoliciesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListTagAlertPoliciesResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagAlertPoliciesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *ListTagAlertPoliciesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagName() {
		if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TagName)); err != nil {
			return fmt.Errorf("%T.tagName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
		}
	}
	return err
}

func (p *ListTagAlertPoliciesResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("alertPolicies", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:alertPolicies: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AlertPolicies)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.AlertPolicies {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:alertPolicies: %s", p, err)
	}
	return err
}

func (p *ListTagAlertPoliciesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagAlertPoliciesResponse(%+v)", *p)
}

type SetQueueDailyStatisticsStateRequest struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
	Enabled   bool   `thrift:"enabled,2,required" json:"enabled"`
}

func NewSetQueueDailyStatisticsStateRequest() *SetQueueDailyStatisticsStateRequest {
	return &SetQueueDailyStatisticsStateRequest{}
}

func (p *SetQueueDailyStatisticsStateRequest) GetQueueName() string {
	return p.QueueName
}

func (p *SetQueueDailyStatisticsStateRequest) GetEnabled() bool {
	return p.Enabled
}
func (p *SetQueueDailyStatisticsStateRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetQueueDailyStatisticsStateRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *SetQueueDailyStatisticsStateRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Enabled = v
	}
	return nil
}

func (p *SetQueueDailyStatisticsStateRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetQueueDailyStatisticsStateRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetQueueDailyStatisticsStateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *SetQueueDailyStatisticsStateRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("enabled", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:enabled: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Enabled)); err != nil {
		return fmt.Errorf("%T.enabled (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:enabled: %s", p, err)
	}
	return err
}

func (p *SetQueueDailyStatisticsStateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetQueueDailyStatisticsStateRequest(%+v)", *p)
}

type GetQueueDailyStatisticsStateRequest struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
}

func NewGetQueueDailyStatisticsStateRequest() *GetQueueDailyStatisticsStateRequest {
	return &GetQueueDailyStatisticsStateRequest{}
}

func (p *GetQueueDailyStatisticsStateRequest) GetQueueName() string {
	return p.QueueName
}
func (p *GetQueueDailyStatisticsStateRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetQueueDailyStatisticsStateRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *GetQueueDailyStatisticsStateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueDailyStatisticsStateRequest(%+v)", *p)
}

type GetQueueDailyStatisticsStateResponse struct {
	QueueName string `thrift:"queueName,1,required" json:"queueName"`
	Enabled   bool   `thrift:"enabled,2,required" json:"enabled"`
}

func NewGetQueueDailyStatisticsStateResponse() *GetQueueDailyStatisticsStateResponse {
	return &GetQueueDailyStatisticsStateResponse{}
}

func (p *GetQueueDailyStatisticsStateResponse) GetQueueName() string {
	return p.QueueName
}

func (p *GetQueueDailyStatisticsStateResponse) GetEnabled() bool {
	return p.Enabled
}
func (p *GetQueueDailyStatisticsStateResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QueueName = v
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Enabled = v
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetQueueDailyStatisticsStateResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueueDailyStatisticsStateResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queueName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueueName)); err != nil {
		return fmt.Errorf("%T.queueName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queueName: %s", p, err)
	}
	return err
}

func (p *GetQueueDailyStatisticsStateResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("enabled", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:enabled: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Enabled)); err != nil {
		return fmt.Errorf("%T.enabled (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:enabled: %s", p, err)
	}
	return err
}

func (p *GetQueueDailyStatisticsStateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueueDailyStatisticsStateResponse(%+v)", *p)
}
