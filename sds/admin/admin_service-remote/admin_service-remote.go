// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"sds/admin"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void saveAppInfo(AppInfo appInfo)")
	fmt.Fprintln(os.Stderr, "  AppInfo getAppInfo(string appId)")
	fmt.Fprintln(os.Stderr, "   findAllApps()")
	fmt.Fprintln(os.Stderr, "   findAllTables()")
	fmt.Fprintln(os.Stderr, "  TableInfo createTable(string tableName, TableSpec tableSpec)")
	fmt.Fprintln(os.Stderr, "  void dropTable(string tableName)")
	fmt.Fprintln(os.Stderr, "  void alterTable(string tableName, TableSpec tableSpec)")
	fmt.Fprintln(os.Stderr, "  void cloneTable(string srcName, string destTable, bool flushTable)")
	fmt.Fprintln(os.Stderr, "  void disableTable(string tableName)")
	fmt.Fprintln(os.Stderr, "  void enableTable(string tableName)")
	fmt.Fprintln(os.Stderr, "  TableSpec describeTable(string tableName)")
	fmt.Fprintln(os.Stderr, "  TableStatus getTableStatus(string tableName)")
	fmt.Fprintln(os.Stderr, "  TableState getTableState(string tableName)")
	fmt.Fprintln(os.Stderr, "   getTableSplits(string tableName, Dictionary startKey, Dictionary stopKey)")
	fmt.Fprintln(os.Stderr, "  TimeSeriesData queryMetric(MetricQueryRequest query)")
	fmt.Fprintln(os.Stderr, "   queryMetrics( queries)")
	fmt.Fprintln(os.Stderr, "   findAllAppInfo()")
	fmt.Fprintln(os.Stderr, "  i64 getTableSize(string tableName)")
	fmt.Fprintln(os.Stderr, "  void putClientMetrics(ClientMetrics clientMetrics)")
	fmt.Fprintln(os.Stderr, "  void subscribePhoneAlert(string tableName, string phoneNumber)")
	fmt.Fprintln(os.Stderr, "  void unsubscribePhoneAlert(string tableName, string phoneNumber)")
	fmt.Fprintln(os.Stderr, "  void subscribeEmailAlert(string tableName, string email)")
	fmt.Fprintln(os.Stderr, "  void unsubscribeEmailAlert(string tableName, string email)")
	fmt.Fprintln(os.Stderr, "   listSubscribedPhone(string tableName)")
	fmt.Fprintln(os.Stderr, "   listSubscribedEmail(string tableName)")
	fmt.Fprintln(os.Stderr, "   getTableHistorySize(string tableName, i64 startDate, i64 stopDate)")
	fmt.Fprintln(os.Stderr, "  Subscriber createSubscriber(string tableName, string subscriberName)")
	fmt.Fprintln(os.Stderr, "  void deleteSubscriber(string tableName, string subscriberName)")
	fmt.Fprintln(os.Stderr, "  Subscriber getSubscriber(string tableName, string subscriberName)")
	fmt.Fprintln(os.Stderr, "   getSubscribers(string tableName)")
	fmt.Fprintln(os.Stderr, "   getPartitions(string tableName)")
	fmt.Fprintln(os.Stderr, "  Partition getPartition(string tableName, i32 partitionId)")
	fmt.Fprintln(os.Stderr, "  ConsumedOffset getPartitionConsumedOffset(string tableName, i32 partitionId, string subscriberName)")
	fmt.Fprintln(os.Stderr, "  CommittedOffset getPartitionCommittedOffset(string tableName, i32 partitionId, string subscriberName)")
	fmt.Fprintln(os.Stderr, "  Sinker createSinker(string subscribedTableName, string subscriberName, string sinkedTableName, string endpoint)")
	fmt.Fprintln(os.Stderr, "  void deleteSinker(string tableName)")
	fmt.Fprintln(os.Stderr, "  Sinker getSinker(string tableName)")
	fmt.Fprintln(os.Stderr, "  PartitionStatistics getPartitionStatistics(string tableName, i32 partitionId)")
	fmt.Fprintln(os.Stderr, "  SubscriberStatistics getSubscriberStatistics(string tableName, i32 partitionId, string subscriberName)")
	fmt.Fprintln(os.Stderr, "  void renameTable(string srcName, string destName)")
	fmt.Fprintln(os.Stderr, "  TableSnapshots listSnapshots(string tableName)")
	fmt.Fprintln(os.Stderr, "  void snapshotTable(string tableName, string snapshotName)")
	fmt.Fprintln(os.Stderr, "  void deleteSnapshot(string tableName, string snapshotName)")
	fmt.Fprintln(os.Stderr, "  void restoreSnapshot(string tableName, string snapshotName, string destTableName, bool isSystem)")
	fmt.Fprintln(os.Stderr, "   listAllSnapshots()")
	fmt.Fprintln(os.Stderr, "  void cancelSnapshotTable(string tableName, string snapshotName)")
	fmt.Fprintln(os.Stderr, "  SnapshotState getSnapshotState(string tableName, string snapshotName)")
	fmt.Fprintln(os.Stderr, "  Version getServerVersion()")
	fmt.Fprintln(os.Stderr, "  void validateClientVersion(Version clientVersion)")
	fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := admin.NewAdminServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "saveAppInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SaveAppInfo requires 1 args")
			flag.Usage()
		}
		arg121 := flag.Arg(1)
		mbTrans122 := thrift.NewTMemoryBufferLen(len(arg121))
		defer mbTrans122.Close()
		_, err123 := mbTrans122.WriteString(arg121)
		if err123 != nil {
			Usage()
			return
		}
		factory124 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt125 := factory124.GetProtocol(mbTrans122)
		argvalue0 := admin.NewAppInfo()
		err126 := argvalue0.Read(jsProt125)
		if err126 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SaveAppInfo(value0))
		fmt.Print("\n")
		break
	case "getAppInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAppInfo requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAppInfo(value0))
		fmt.Print("\n")
		break
	case "findAllApps":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "FindAllApps requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.FindAllApps())
		fmt.Print("\n")
		break
	case "findAllTables":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "FindAllTables requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.FindAllTables())
		fmt.Print("\n")
		break
	case "createTable":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg129 := flag.Arg(2)
		mbTrans130 := thrift.NewTMemoryBufferLen(len(arg129))
		defer mbTrans130.Close()
		_, err131 := mbTrans130.WriteString(arg129)
		if err131 != nil {
			Usage()
			return
		}
		factory132 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt133 := factory132.GetProtocol(mbTrans130)
		argvalue1 := admin.NewTableSpec()
		err134 := argvalue1.Read(jsProt133)
		if err134 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateTable(value0, value1))
		fmt.Print("\n")
		break
	case "dropTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropTable requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropTable(value0))
		fmt.Print("\n")
		break
	case "alterTable":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AlterTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg137 := flag.Arg(2)
		mbTrans138 := thrift.NewTMemoryBufferLen(len(arg137))
		defer mbTrans138.Close()
		_, err139 := mbTrans138.WriteString(arg137)
		if err139 != nil {
			Usage()
			return
		}
		factory140 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt141 := factory140.GetProtocol(mbTrans138)
		argvalue1 := admin.NewTableSpec()
		err142 := argvalue1.Read(jsProt141)
		if err142 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AlterTable(value0, value1))
		fmt.Print("\n")
		break
	case "cloneTable":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CloneTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.CloneTable(value0, value1, value2))
		fmt.Print("\n")
		break
	case "disableTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DisableTable requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DisableTable(value0))
		fmt.Print("\n")
		break
	case "enableTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "EnableTable requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.EnableTable(value0))
		fmt.Print("\n")
		break
	case "describeTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DescribeTable requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DescribeTable(value0))
		fmt.Print("\n")
		break
	case "getTableStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableStatus requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTableStatus(value0))
		fmt.Print("\n")
		break
	case "getTableState":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableState requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTableState(value0))
		fmt.Print("\n")
		break
	case "getTableSplits":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableSplits requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg152 := flag.Arg(2)
		mbTrans153 := thrift.NewTMemoryBufferLen(len(arg152))
		defer mbTrans153.Close()
		_, err154 := mbTrans153.WriteString(arg152)
		if err154 != nil {
			Usage()
			return
		}
		factory155 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt156 := factory155.GetProtocol(mbTrans153)
		containerStruct1 := admin.NewGetTableSplitsArgs()
		err157 := containerStruct1.ReadField2(jsProt156)
		if err157 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.StartKey
		value1 := admin.Dictionary(argvalue1)
		arg158 := flag.Arg(3)
		mbTrans159 := thrift.NewTMemoryBufferLen(len(arg158))
		defer mbTrans159.Close()
		_, err160 := mbTrans159.WriteString(arg158)
		if err160 != nil {
			Usage()
			return
		}
		factory161 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt162 := factory161.GetProtocol(mbTrans159)
		containerStruct2 := admin.NewGetTableSplitsArgs()
		err163 := containerStruct2.ReadField3(jsProt162)
		if err163 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.StopKey
		value2 := admin.Dictionary(argvalue2)
		fmt.Print(client.GetTableSplits(value0, value1, value2))
		fmt.Print("\n")
		break
	case "queryMetric":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryMetric requires 1 args")
			flag.Usage()
		}
		arg164 := flag.Arg(1)
		mbTrans165 := thrift.NewTMemoryBufferLen(len(arg164))
		defer mbTrans165.Close()
		_, err166 := mbTrans165.WriteString(arg164)
		if err166 != nil {
			Usage()
			return
		}
		factory167 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt168 := factory167.GetProtocol(mbTrans165)
		argvalue0 := admin.NewMetricQueryRequest()
		err169 := argvalue0.Read(jsProt168)
		if err169 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryMetric(value0))
		fmt.Print("\n")
		break
	case "queryMetrics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryMetrics requires 1 args")
			flag.Usage()
		}
		arg170 := flag.Arg(1)
		mbTrans171 := thrift.NewTMemoryBufferLen(len(arg170))
		defer mbTrans171.Close()
		_, err172 := mbTrans171.WriteString(arg170)
		if err172 != nil {
			Usage()
			return
		}
		factory173 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt174 := factory173.GetProtocol(mbTrans171)
		containerStruct0 := admin.NewQueryMetricsArgs()
		err175 := containerStruct0.ReadField1(jsProt174)
		if err175 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Queries
		value0 := argvalue0
		fmt.Print(client.QueryMetrics(value0))
		fmt.Print("\n")
		break
	case "findAllAppInfo":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "FindAllAppInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.FindAllAppInfo())
		fmt.Print("\n")
		break
	case "getTableSize":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableSize requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTableSize(value0))
		fmt.Print("\n")
		break
	case "putClientMetrics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PutClientMetrics requires 1 args")
			flag.Usage()
		}
		arg177 := flag.Arg(1)
		mbTrans178 := thrift.NewTMemoryBufferLen(len(arg177))
		defer mbTrans178.Close()
		_, err179 := mbTrans178.WriteString(arg177)
		if err179 != nil {
			Usage()
			return
		}
		factory180 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt181 := factory180.GetProtocol(mbTrans178)
		argvalue0 := admin.NewClientMetrics()
		err182 := argvalue0.Read(jsProt181)
		if err182 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PutClientMetrics(value0))
		fmt.Print("\n")
		break
	case "subscribePhoneAlert":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SubscribePhoneAlert requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SubscribePhoneAlert(value0, value1))
		fmt.Print("\n")
		break
	case "unsubscribePhoneAlert":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UnsubscribePhoneAlert requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UnsubscribePhoneAlert(value0, value1))
		fmt.Print("\n")
		break
	case "subscribeEmailAlert":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SubscribeEmailAlert requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SubscribeEmailAlert(value0, value1))
		fmt.Print("\n")
		break
	case "unsubscribeEmailAlert":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UnsubscribeEmailAlert requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UnsubscribeEmailAlert(value0, value1))
		fmt.Print("\n")
		break
	case "listSubscribedPhone":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListSubscribedPhone requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListSubscribedPhone(value0))
		fmt.Print("\n")
		break
	case "listSubscribedEmail":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListSubscribedEmail requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListSubscribedEmail(value0))
		fmt.Print("\n")
		break
	case "getTableHistorySize":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableHistorySize requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1, err194 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err194 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err195 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err195 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetTableHistorySize(value0, value1, value2))
		fmt.Print("\n")
		break
	case "createSubscriber":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateSubscriber requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.CreateSubscriber(value0, value1))
		fmt.Print("\n")
		break
	case "deleteSubscriber":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeleteSubscriber requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DeleteSubscriber(value0, value1))
		fmt.Print("\n")
		break
	case "getSubscriber":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSubscriber requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSubscriber(value0, value1))
		fmt.Print("\n")
		break
	case "getSubscribers":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSubscribers requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetSubscribers(value0))
		fmt.Print("\n")
		break
	case "getPartitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitions requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetPartitions(value0))
		fmt.Print("\n")
		break
	case "getPartition":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetPartition requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err205 := (strconv.Atoi(flag.Arg(2)))
		if err205 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetPartition(value0, value1))
		fmt.Print("\n")
		break
	case "getPartitionConsumedOffset":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionConsumedOffset requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err207 := (strconv.Atoi(flag.Arg(2)))
		if err207 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetPartitionConsumedOffset(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getPartitionCommittedOffset":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionCommittedOffset requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err210 := (strconv.Atoi(flag.Arg(2)))
		if err210 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetPartitionCommittedOffset(value0, value1, value2))
		fmt.Print("\n")
		break
	case "createSinker":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "CreateSinker requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.CreateSinker(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "deleteSinker":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteSinker requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DeleteSinker(value0))
		fmt.Print("\n")
		break
	case "getSinker":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSinker requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetSinker(value0))
		fmt.Print("\n")
		break
	case "getPartitionStatistics":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetPartitionStatistics requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err219 := (strconv.Atoi(flag.Arg(2)))
		if err219 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetPartitionStatistics(value0, value1))
		fmt.Print("\n")
		break
	case "getSubscriberStatistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetSubscriberStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err221 := (strconv.Atoi(flag.Arg(2)))
		if err221 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetSubscriberStatistics(value0, value1, value2))
		fmt.Print("\n")
		break
	case "renameTable":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RenameTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RenameTable(value0, value1))
		fmt.Print("\n")
		break
	case "listSnapshots":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListSnapshots requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListSnapshots(value0))
		fmt.Print("\n")
		break
	case "snapshotTable":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SnapshotTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SnapshotTable(value0, value1))
		fmt.Print("\n")
		break
	case "deleteSnapshot":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeleteSnapshot requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DeleteSnapshot(value0, value1))
		fmt.Print("\n")
		break
	case "restoreSnapshot":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "RestoreSnapshot requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.RestoreSnapshot(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "listAllSnapshots":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ListAllSnapshots requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ListAllSnapshots())
		fmt.Print("\n")
		break
	case "cancelSnapshotTable":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CancelSnapshotTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.CancelSnapshotTable(value0, value1))
		fmt.Print("\n")
		break
	case "getSnapshotState":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSnapshotState requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSnapshotState(value0, value1))
		fmt.Print("\n")
		break
	case "getServerVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServerVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServerVersion())
		fmt.Print("\n")
		break
	case "validateClientVersion":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidateClientVersion requires 1 args")
			flag.Usage()
		}
		arg238 := flag.Arg(1)
		mbTrans239 := thrift.NewTMemoryBufferLen(len(arg238))
		defer mbTrans239.Close()
		_, err240 := mbTrans239.WriteString(arg238)
		if err240 != nil {
			Usage()
			return
		}
		factory241 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt242 := factory241.GetProtocol(mbTrans239)
		argvalue0 := admin.NewVersion()
		err243 := argvalue0.Read(jsProt242)
		if err243 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidateClientVersion(value0))
		fmt.Print("\n")
		break
	case "getServerTime":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServerTime())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
