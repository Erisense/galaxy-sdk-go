// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package admin

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/sds/auth"
	"github.com/XiaoMi/galaxy-sdk-go/sds/common"
	"github.com/XiaoMi/galaxy-sdk-go/sds/errors"
	"github.com/XiaoMi/galaxy-sdk-go/sds/table"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = errors.GoUnusedProtection__
var _ = common.GoUnusedProtection__
var _ = auth.GoUnusedProtection__
var _ = table.GoUnusedProtection__

type AdminService interface {
	common.BaseService
	//结构化存储管理接口

	// 保存应用信息，用于注册第三方应用OAuth信息
	//
	// Parameters:
	//  - AppInfo
	SaveAppInfo(appInfo *AppInfo) (err error)
	// 查询应用信息
	//
	// Parameters:
	//  - AppId
	GetAppInfo(appId string) (r *AppInfo, err error)
	// 查询指定用户所有应用信息
	FindAllApps() (r []*AppInfo, err error)
	// 获取指定用户所有表信息
	FindAllTables() (r []*table.TableInfo, err error)
	// 创建表
	//
	// Parameters:
	//  - TableName
	//  - TableSpec
	CreateTable(tableName string, tableSpec *table.TableSpec) (r *table.TableInfo, err error)
	// 删除表
	//
	// Parameters:
	//  - TableName
	DropTable(tableName string) (err error)
	// 延迟删除表
	//
	// Parameters:
	//  - TableName
	LazyDropTable(tableName string) (err error)
	// 修改表
	//
	// Parameters:
	//  - TableName
	//  - TableSpec
	AlterTable(tableName string, tableSpec *table.TableSpec) (err error)
	// 克隆表
	//
	// Parameters:
	//  - SrcName
	//  - DestTable
	//  - FlushTable
	CloneTable(srcName string, destTable string, flushTable bool) (err error)
	// 关闭表读写操作
	//
	// Parameters:
	//  - TableName
	DisableTable(tableName string) (err error)
	// 打开表读写操作
	//
	// Parameters:
	//  - TableName
	EnableTable(tableName string) (err error)
	// 获取表定义
	//
	// Parameters:
	//  - TableName
	DescribeTable(tableName string) (r *table.TableSpec, err error)
	// 获取表状态等元信息
	//
	// Parameters:
	//  - TableName
	GetTableStatus(tableName string) (r *table.TableStatus, err error)
	// 获取表状态
	//
	// Parameters:
	//  - TableName
	GetTableState(tableName string) (r table.TableState, err error)
	// 获取表分布信息，如用于MapReduce应用
	//
	// Parameters:
	//  - TableName
	//  - StartKey
	//  - StopKey
	GetTableSplits(tableName string, startKey table.Dictionary, stopKey table.Dictionary) (r []*table.TableSplit, err error)
	// 查询表统计指标
	//
	// Parameters:
	//  - Query
	QueryMetric(query *MetricQueryRequest) (r *TimeSeriesData, err error)
	// 批量查询表统计指标
	//
	// Parameters:
	//  - Queries
	QueryMetrics(queries []*MetricQueryRequest) (r []*TimeSeriesData, err error)
}

//结构化存储管理接口
type AdminServiceClient struct {
	*common.BaseServiceClient
}

func NewAdminServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AdminServiceClient {
	return &AdminServiceClient{BaseServiceClient: common.NewBaseServiceClientFactory(t, f)}
}

func NewAdminServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AdminServiceClient {
	return &AdminServiceClient{BaseServiceClient: common.NewBaseServiceClientProtocol(t, iprot, oprot)}
}

// 保存应用信息，用于注册第三方应用OAuth信息
//
// Parameters:
//  - AppInfo
func (p *AdminServiceClient) SaveAppInfo(appInfo *AppInfo) (err error) {
	if err = p.sendSaveAppInfo(appInfo); err != nil {
		return
	}
	return p.recvSaveAppInfo()
}

func (p *AdminServiceClient) sendSaveAppInfo(appInfo *AppInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("saveAppInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SaveAppInfoArgs{
		AppInfo: appInfo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvSaveAppInfo() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "saveAppInfo failed: out of sequence response")
		return
	}
	result := SaveAppInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	return
}

// 查询应用信息
//
// Parameters:
//  - AppId
func (p *AdminServiceClient) GetAppInfo(appId string) (r *AppInfo, err error) {
	if err = p.sendGetAppInfo(appId); err != nil {
		return
	}
	return p.recvGetAppInfo()
}

func (p *AdminServiceClient) sendGetAppInfo(appId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAppInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetAppInfoArgs{
		AppId: appId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvGetAppInfo() (value *AppInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAppInfo failed: out of sequence response")
		return
	}
	result := GetAppInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	value = result.GetSuccess()
	return
}

// 查询指定用户所有应用信息
func (p *AdminServiceClient) FindAllApps() (r []*AppInfo, err error) {
	if err = p.sendFindAllApps(); err != nil {
		return
	}
	return p.recvFindAllApps()
}

func (p *AdminServiceClient) sendFindAllApps() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAllApps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindAllAppsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvFindAllApps() (value []*AppInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAllApps failed: out of sequence response")
		return
	}
	result := FindAllAppsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	value = result.GetSuccess()
	return
}

// 获取指定用户所有表信息
func (p *AdminServiceClient) FindAllTables() (r []*table.TableInfo, err error) {
	if err = p.sendFindAllTables(); err != nil {
		return
	}
	return p.recvFindAllTables()
}

func (p *AdminServiceClient) sendFindAllTables() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAllTables", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindAllTablesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvFindAllTables() (value []*table.TableInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAllTables failed: out of sequence response")
		return
	}
	result := FindAllTablesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	value = result.GetSuccess()
	return
}

// 创建表
//
// Parameters:
//  - TableName
//  - TableSpec
func (p *AdminServiceClient) CreateTable(tableName string, tableSpec *table.TableSpec) (r *table.TableInfo, err error) {
	if err = p.sendCreateTable(tableName, tableSpec); err != nil {
		return
	}
	return p.recvCreateTable()
}

func (p *AdminServiceClient) sendCreateTable(tableName string, tableSpec *table.TableSpec) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateTableArgs{
		TableName: tableName,
		TableSpec: tableSpec,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvCreateTable() (value *table.TableInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createTable failed: out of sequence response")
		return
	}
	result := CreateTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	value = result.GetSuccess()
	return
}

// 删除表
//
// Parameters:
//  - TableName
func (p *AdminServiceClient) DropTable(tableName string) (err error) {
	if err = p.sendDropTable(tableName); err != nil {
		return
	}
	return p.recvDropTable()
}

func (p *AdminServiceClient) sendDropTable(tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("dropTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropTableArgs{
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvDropTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "dropTable failed: out of sequence response")
		return
	}
	result := DropTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	return
}

// 延迟删除表
//
// Parameters:
//  - TableName
func (p *AdminServiceClient) LazyDropTable(tableName string) (err error) {
	if err = p.sendLazyDropTable(tableName); err != nil {
		return
	}
	return p.recvLazyDropTable()
}

func (p *AdminServiceClient) sendLazyDropTable(tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lazyDropTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LazyDropTableArgs{
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvLazyDropTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "lazyDropTable failed: out of sequence response")
		return
	}
	result := LazyDropTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	return
}

// 修改表
//
// Parameters:
//  - TableName
//  - TableSpec
func (p *AdminServiceClient) AlterTable(tableName string, tableSpec *table.TableSpec) (err error) {
	if err = p.sendAlterTable(tableName, tableSpec); err != nil {
		return
	}
	return p.recvAlterTable()
}

func (p *AdminServiceClient) sendAlterTable(tableName string, tableSpec *table.TableSpec) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alterTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterTableArgs{
		TableName: tableName,
		TableSpec: tableSpec,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvAlterTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alterTable failed: out of sequence response")
		return
	}
	result := AlterTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	return
}

// 克隆表
//
// Parameters:
//  - SrcName
//  - DestTable
//  - FlushTable
func (p *AdminServiceClient) CloneTable(srcName string, destTable string, flushTable bool) (err error) {
	if err = p.sendCloneTable(srcName, destTable, flushTable); err != nil {
		return
	}
	return p.recvCloneTable()
}

func (p *AdminServiceClient) sendCloneTable(srcName string, destTable string, flushTable bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("cloneTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CloneTableArgs{
		SrcName:    srcName,
		DestTable:  destTable,
		FlushTable: flushTable,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvCloneTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cloneTable failed: out of sequence response")
		return
	}
	result := CloneTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	return
}

// 关闭表读写操作
//
// Parameters:
//  - TableName
func (p *AdminServiceClient) DisableTable(tableName string) (err error) {
	if err = p.sendDisableTable(tableName); err != nil {
		return
	}
	return p.recvDisableTable()
}

func (p *AdminServiceClient) sendDisableTable(tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("disableTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DisableTableArgs{
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvDisableTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "disableTable failed: out of sequence response")
		return
	}
	result := DisableTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	return
}

// 打开表读写操作
//
// Parameters:
//  - TableName
func (p *AdminServiceClient) EnableTable(tableName string) (err error) {
	if err = p.sendEnableTable(tableName); err != nil {
		return
	}
	return p.recvEnableTable()
}

func (p *AdminServiceClient) sendEnableTable(tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("enableTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := EnableTableArgs{
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvEnableTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "enableTable failed: out of sequence response")
		return
	}
	result := EnableTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	return
}

// 获取表定义
//
// Parameters:
//  - TableName
func (p *AdminServiceClient) DescribeTable(tableName string) (r *table.TableSpec, err error) {
	if err = p.sendDescribeTable(tableName); err != nil {
		return
	}
	return p.recvDescribeTable()
}

func (p *AdminServiceClient) sendDescribeTable(tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("describeTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DescribeTableArgs{
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvDescribeTable() (value *table.TableSpec, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "describeTable failed: out of sequence response")
		return
	}
	result := DescribeTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	value = result.GetSuccess()
	return
}

// 获取表状态等元信息
//
// Parameters:
//  - TableName
func (p *AdminServiceClient) GetTableStatus(tableName string) (r *table.TableStatus, err error) {
	if err = p.sendGetTableStatus(tableName); err != nil {
		return
	}
	return p.recvGetTableStatus()
}

func (p *AdminServiceClient) sendGetTableStatus(tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTableStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTableStatusArgs{
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvGetTableStatus() (value *table.TableStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTableStatus failed: out of sequence response")
		return
	}
	result := GetTableStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	value = result.GetSuccess()
	return
}

// 获取表状态
//
// Parameters:
//  - TableName
func (p *AdminServiceClient) GetTableState(tableName string) (r table.TableState, err error) {
	if err = p.sendGetTableState(tableName); err != nil {
		return
	}
	return p.recvGetTableState()
}

func (p *AdminServiceClient) sendGetTableState(tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTableState", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTableStateArgs{
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvGetTableState() (value table.TableState, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTableState failed: out of sequence response")
		return
	}
	result := GetTableStateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	value = result.GetSuccess()
	return
}

// 获取表分布信息，如用于MapReduce应用
//
// Parameters:
//  - TableName
//  - StartKey
//  - StopKey
func (p *AdminServiceClient) GetTableSplits(tableName string, startKey table.Dictionary, stopKey table.Dictionary) (r []*table.TableSplit, err error) {
	if err = p.sendGetTableSplits(tableName, startKey, stopKey); err != nil {
		return
	}
	return p.recvGetTableSplits()
}

func (p *AdminServiceClient) sendGetTableSplits(tableName string, startKey table.Dictionary, stopKey table.Dictionary) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTableSplits", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTableSplitsArgs{
		TableName: tableName,
		StartKey:  startKey,
		StopKey:   stopKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvGetTableSplits() (value []*table.TableSplit, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTableSplits failed: out of sequence response")
		return
	}
	result := GetTableSplitsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	value = result.GetSuccess()
	return
}

// 查询表统计指标
//
// Parameters:
//  - Query
func (p *AdminServiceClient) QueryMetric(query *MetricQueryRequest) (r *TimeSeriesData, err error) {
	if err = p.sendQueryMetric(query); err != nil {
		return
	}
	return p.recvQueryMetric()
}

func (p *AdminServiceClient) sendQueryMetric(query *MetricQueryRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryMetric", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryMetricArgs{
		Query: query,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvQueryMetric() (value *TimeSeriesData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryMetric failed: out of sequence response")
		return
	}
	result := QueryMetricResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	value = result.GetSuccess()
	return
}

// 批量查询表统计指标
//
// Parameters:
//  - Queries
func (p *AdminServiceClient) QueryMetrics(queries []*MetricQueryRequest) (r []*TimeSeriesData, err error) {
	if err = p.sendQueryMetrics(queries); err != nil {
		return
	}
	return p.recvQueryMetrics()
}

func (p *AdminServiceClient) sendQueryMetrics(queries []*MetricQueryRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryMetrics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryMetricsArgs{
		Queries: queries,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AdminServiceClient) recvQueryMetrics() (value []*TimeSeriesData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryMetrics failed: out of sequence response")
		return
	}
	result := QueryMetricsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Se != nil {
		err = result.Se
		return
	}
	value = result.GetSuccess()
	return
}

type AdminServiceProcessor struct {
	*common.BaseServiceProcessor
}

func NewAdminServiceProcessor(handler AdminService) *AdminServiceProcessor {
	self40 := &AdminServiceProcessor{common.NewBaseServiceProcessor(handler)}
	self40.AddToProcessorMap("saveAppInfo", &adminServiceProcessorSaveAppInfo{handler: handler})
	self40.AddToProcessorMap("getAppInfo", &adminServiceProcessorGetAppInfo{handler: handler})
	self40.AddToProcessorMap("findAllApps", &adminServiceProcessorFindAllApps{handler: handler})
	self40.AddToProcessorMap("findAllTables", &adminServiceProcessorFindAllTables{handler: handler})
	self40.AddToProcessorMap("createTable", &adminServiceProcessorCreateTable{handler: handler})
	self40.AddToProcessorMap("dropTable", &adminServiceProcessorDropTable{handler: handler})
	self40.AddToProcessorMap("lazyDropTable", &adminServiceProcessorLazyDropTable{handler: handler})
	self40.AddToProcessorMap("alterTable", &adminServiceProcessorAlterTable{handler: handler})
	self40.AddToProcessorMap("cloneTable", &adminServiceProcessorCloneTable{handler: handler})
	self40.AddToProcessorMap("disableTable", &adminServiceProcessorDisableTable{handler: handler})
	self40.AddToProcessorMap("enableTable", &adminServiceProcessorEnableTable{handler: handler})
	self40.AddToProcessorMap("describeTable", &adminServiceProcessorDescribeTable{handler: handler})
	self40.AddToProcessorMap("getTableStatus", &adminServiceProcessorGetTableStatus{handler: handler})
	self40.AddToProcessorMap("getTableState", &adminServiceProcessorGetTableState{handler: handler})
	self40.AddToProcessorMap("getTableSplits", &adminServiceProcessorGetTableSplits{handler: handler})
	self40.AddToProcessorMap("queryMetric", &adminServiceProcessorQueryMetric{handler: handler})
	self40.AddToProcessorMap("queryMetrics", &adminServiceProcessorQueryMetrics{handler: handler})
	return self40
}

type adminServiceProcessorSaveAppInfo struct {
	handler AdminService
}

func (p *adminServiceProcessorSaveAppInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SaveAppInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("saveAppInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SaveAppInfoResult{}
	var err2 error
	if err2 = p.handler.SaveAppInfo(args.AppInfo); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing saveAppInfo: "+err2.Error())
			oprot.WriteMessageBegin("saveAppInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("saveAppInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorGetAppInfo struct {
	handler AdminService
}

func (p *adminServiceProcessorGetAppInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetAppInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAppInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetAppInfoResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetAppInfo(args.AppId); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAppInfo: "+err2.Error())
			oprot.WriteMessageBegin("getAppInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("getAppInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorFindAllApps struct {
	handler AdminService
}

func (p *adminServiceProcessorFindAllApps) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindAllAppsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAllApps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindAllAppsResult{}
	var err2 error
	if result.Success, err2 = p.handler.FindAllApps(); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAllApps: "+err2.Error())
			oprot.WriteMessageBegin("findAllApps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("findAllApps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorFindAllTables struct {
	handler AdminService
}

func (p *adminServiceProcessorFindAllTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindAllTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAllTables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindAllTablesResult{}
	var err2 error
	if result.Success, err2 = p.handler.FindAllTables(); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAllTables: "+err2.Error())
			oprot.WriteMessageBegin("findAllTables", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("findAllTables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorCreateTable struct {
	handler AdminService
}

func (p *adminServiceProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateTableResult{}
	var err2 error
	if result.Success, err2 = p.handler.CreateTable(args.TableName, args.TableSpec); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTable: "+err2.Error())
			oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("createTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorDropTable struct {
	handler AdminService
}

func (p *adminServiceProcessorDropTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("dropTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropTableResult{}
	var err2 error
	if err2 = p.handler.DropTable(args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropTable: "+err2.Error())
			oprot.WriteMessageBegin("dropTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("dropTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorLazyDropTable struct {
	handler AdminService
}

func (p *adminServiceProcessorLazyDropTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LazyDropTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("lazyDropTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LazyDropTableResult{}
	var err2 error
	if err2 = p.handler.LazyDropTable(args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lazyDropTable: "+err2.Error())
			oprot.WriteMessageBegin("lazyDropTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("lazyDropTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorAlterTable struct {
	handler AdminService
}

func (p *adminServiceProcessorAlterTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alterTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterTableResult{}
	var err2 error
	if err2 = p.handler.AlterTable(args.TableName, args.TableSpec); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterTable: "+err2.Error())
			oprot.WriteMessageBegin("alterTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alterTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorCloneTable struct {
	handler AdminService
}

func (p *adminServiceProcessorCloneTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CloneTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cloneTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CloneTableResult{}
	var err2 error
	if err2 = p.handler.CloneTable(args.SrcName, args.DestTable, args.FlushTable); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cloneTable: "+err2.Error())
			oprot.WriteMessageBegin("cloneTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("cloneTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorDisableTable struct {
	handler AdminService
}

func (p *adminServiceProcessorDisableTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DisableTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DisableTableResult{}
	var err2 error
	if err2 = p.handler.DisableTable(args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disableTable: "+err2.Error())
			oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("disableTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorEnableTable struct {
	handler AdminService
}

func (p *adminServiceProcessorEnableTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EnableTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := EnableTableResult{}
	var err2 error
	if err2 = p.handler.EnableTable(args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing enableTable: "+err2.Error())
			oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("enableTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorDescribeTable struct {
	handler AdminService
}

func (p *adminServiceProcessorDescribeTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DescribeTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describeTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DescribeTableResult{}
	var err2 error
	if result.Success, err2 = p.handler.DescribeTable(args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describeTable: "+err2.Error())
			oprot.WriteMessageBegin("describeTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("describeTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorGetTableStatus struct {
	handler AdminService
}

func (p *adminServiceProcessorGetTableStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTableStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTableStatusResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetTableStatus(args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableStatus: "+err2.Error())
			oprot.WriteMessageBegin("getTableStatus", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("getTableStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorGetTableState struct {
	handler AdminService
}

func (p *adminServiceProcessorGetTableState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTableStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTableStateResult{}
	var retval table.TableState
	var err2 error
	if retval, err2 = p.handler.GetTableState(args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableState: "+err2.Error())
			oprot.WriteMessageBegin("getTableState", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin("getTableState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorGetTableSplits struct {
	handler AdminService
}

func (p *adminServiceProcessorGetTableSplits) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTableSplitsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableSplits", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTableSplitsResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetTableSplits(args.TableName, args.StartKey, args.StopKey); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableSplits: "+err2.Error())
			oprot.WriteMessageBegin("getTableSplits", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("getTableSplits", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorQueryMetric struct {
	handler AdminService
}

func (p *adminServiceProcessorQueryMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryMetricArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryMetric", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryMetricResult{}
	var err2 error
	if result.Success, err2 = p.handler.QueryMetric(args.Query); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryMetric: "+err2.Error())
			oprot.WriteMessageBegin("queryMetric", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("queryMetric", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminServiceProcessorQueryMetrics struct {
	handler AdminService
}

func (p *adminServiceProcessorQueryMetrics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryMetricsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryMetrics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryMetricsResult{}
	var err2 error
	if result.Success, err2 = p.handler.QueryMetrics(args.Queries); err2 != nil {
		switch v := err2.(type) {
		case *errors.ServiceException:
			result.Se = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryMetrics: "+err2.Error())
			oprot.WriteMessageBegin("queryMetrics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("queryMetrics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type SaveAppInfoArgs struct {
	AppInfo *AppInfo `thrift:"appInfo,1" json:"appInfo"`
}

func NewSaveAppInfoArgs() *SaveAppInfoArgs {
	return &SaveAppInfoArgs{}
}

var SaveAppInfoArgs_AppInfo_DEFAULT *AppInfo

func (p *SaveAppInfoArgs) GetAppInfo() *AppInfo {
	if !p.IsSetAppInfo() {
		return SaveAppInfoArgs_AppInfo_DEFAULT
	}
	return p.AppInfo
}
func (p *SaveAppInfoArgs) IsSetAppInfo() bool {
	return p.AppInfo != nil
}

func (p *SaveAppInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SaveAppInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.AppInfo = &AppInfo{}
	if err := p.AppInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AppInfo, err)
	}
	return nil
}

func (p *SaveAppInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("saveAppInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SaveAppInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appInfo", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:appInfo: %s", p, err)
	}
	if err := p.AppInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AppInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:appInfo: %s", p, err)
	}
	return err
}

func (p *SaveAppInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveAppInfoArgs(%+v)", *p)
}

type SaveAppInfoResult struct {
	Se *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewSaveAppInfoResult() *SaveAppInfoResult {
	return &SaveAppInfoResult{}
}

var SaveAppInfoResult_Se_DEFAULT *errors.ServiceException

func (p *SaveAppInfoResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return SaveAppInfoResult_Se_DEFAULT
	}
	return p.Se
}
func (p *SaveAppInfoResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *SaveAppInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SaveAppInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *SaveAppInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("saveAppInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SaveAppInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *SaveAppInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveAppInfoResult(%+v)", *p)
}

type GetAppInfoArgs struct {
	AppId string `thrift:"appId,1" json:"appId"`
}

func NewGetAppInfoArgs() *GetAppInfoArgs {
	return &GetAppInfoArgs{}
}

func (p *GetAppInfoArgs) GetAppId() string {
	return p.AppId
}
func (p *GetAppInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAppInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *GetAppInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAppInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAppInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:appId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AppId)); err != nil {
		return fmt.Errorf("%T.appId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:appId: %s", p, err)
	}
	return err
}

func (p *GetAppInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAppInfoArgs(%+v)", *p)
}

type GetAppInfoResult struct {
	Success *AppInfo                 `thrift:"success,0" json:"success"`
	Se      *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewGetAppInfoResult() *GetAppInfoResult {
	return &GetAppInfoResult{}
}

var GetAppInfoResult_Success_DEFAULT *AppInfo

func (p *GetAppInfoResult) GetSuccess() *AppInfo {
	if !p.IsSetSuccess() {
		return GetAppInfoResult_Success_DEFAULT
	}
	return p.Success
}

var GetAppInfoResult_Se_DEFAULT *errors.ServiceException

func (p *GetAppInfoResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return GetAppInfoResult_Se_DEFAULT
	}
	return p.Se
}
func (p *GetAppInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAppInfoResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *GetAppInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAppInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AppInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetAppInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *GetAppInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAppInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAppInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetAppInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *GetAppInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAppInfoResult(%+v)", *p)
}

type FindAllAppsArgs struct {
}

func NewFindAllAppsArgs() *FindAllAppsArgs {
	return &FindAllAppsArgs{}
}

func (p *FindAllAppsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAllAppsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAllApps_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAllAppsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAllAppsArgs(%+v)", *p)
}

type FindAllAppsResult struct {
	Success []*AppInfo               `thrift:"success,0" json:"success"`
	Se      *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewFindAllAppsResult() *FindAllAppsResult {
	return &FindAllAppsResult{}
}

var FindAllAppsResult_Success_DEFAULT []*AppInfo

func (p *FindAllAppsResult) GetSuccess() []*AppInfo {
	return p.Success
}

var FindAllAppsResult_Se_DEFAULT *errors.ServiceException

func (p *FindAllAppsResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return FindAllAppsResult_Se_DEFAULT
	}
	return p.Se
}
func (p *FindAllAppsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindAllAppsResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *FindAllAppsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAllAppsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*AppInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem41 := &AppInfo{}
		if err := _elem41.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem41, err)
		}
		p.Success = append(p.Success, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FindAllAppsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *FindAllAppsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAllApps_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAllAppsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindAllAppsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *FindAllAppsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAllAppsResult(%+v)", *p)
}

type FindAllTablesArgs struct {
}

func NewFindAllTablesArgs() *FindAllTablesArgs {
	return &FindAllTablesArgs{}
}

func (p *FindAllTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAllTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAllTables_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAllTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAllTablesArgs(%+v)", *p)
}

type FindAllTablesResult struct {
	Success []*table.TableInfo       `thrift:"success,0" json:"success"`
	Se      *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewFindAllTablesResult() *FindAllTablesResult {
	return &FindAllTablesResult{}
}

var FindAllTablesResult_Success_DEFAULT []*table.TableInfo

func (p *FindAllTablesResult) GetSuccess() []*table.TableInfo {
	return p.Success
}

var FindAllTablesResult_Se_DEFAULT *errors.ServiceException

func (p *FindAllTablesResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return FindAllTablesResult_Se_DEFAULT
	}
	return p.Se
}
func (p *FindAllTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindAllTablesResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *FindAllTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAllTablesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*table.TableInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem42 := &table.TableInfo{}
		if err := _elem42.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem42, err)
		}
		p.Success = append(p.Success, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FindAllTablesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *FindAllTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAllTables_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAllTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindAllTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *FindAllTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAllTablesResult(%+v)", *p)
}

type CreateTableArgs struct {
	TableName string           `thrift:"tableName,1" json:"tableName"`
	TableSpec *table.TableSpec `thrift:"tableSpec,2" json:"tableSpec"`
}

func NewCreateTableArgs() *CreateTableArgs {
	return &CreateTableArgs{}
}

func (p *CreateTableArgs) GetTableName() string {
	return p.TableName
}

var CreateTableArgs_TableSpec_DEFAULT *table.TableSpec

func (p *CreateTableArgs) GetTableSpec() *table.TableSpec {
	if !p.IsSetTableSpec() {
		return CreateTableArgs_TableSpec_DEFAULT
	}
	return p.TableSpec
}
func (p *CreateTableArgs) IsSetTableSpec() bool {
	return p.TableSpec != nil
}

func (p *CreateTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *CreateTableArgs) ReadField2(iprot thrift.TProtocol) error {
	p.TableSpec = &table.TableSpec{}
	if err := p.TableSpec.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TableSpec, err)
	}
	return nil
}

func (p *CreateTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTable_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *CreateTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableSpec", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tableSpec: %s", p, err)
	}
	if err := p.TableSpec.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TableSpec, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tableSpec: %s", p, err)
	}
	return err
}

func (p *CreateTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableArgs(%+v)", *p)
}

type CreateTableResult struct {
	Success *table.TableInfo         `thrift:"success,0" json:"success"`
	Se      *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewCreateTableResult() *CreateTableResult {
	return &CreateTableResult{}
}

var CreateTableResult_Success_DEFAULT *table.TableInfo

func (p *CreateTableResult) GetSuccess() *table.TableInfo {
	if !p.IsSetSuccess() {
		return CreateTableResult_Success_DEFAULT
	}
	return p.Success
}

var CreateTableResult_Se_DEFAULT *errors.ServiceException

func (p *CreateTableResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return CreateTableResult_Se_DEFAULT
	}
	return p.Se
}
func (p *CreateTableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateTableResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *CreateTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTableResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &table.TableInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *CreateTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTable_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableResult(%+v)", *p)
}

type DropTableArgs struct {
	TableName string `thrift:"tableName,1" json:"tableName"`
}

func NewDropTableArgs() *DropTableArgs {
	return &DropTableArgs{}
}

func (p *DropTableArgs) GetTableName() string {
	return p.TableName
}
func (p *DropTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *DropTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dropTable_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *DropTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTableArgs(%+v)", *p)
}

type DropTableResult struct {
	Se *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewDropTableResult() *DropTableResult {
	return &DropTableResult{}
}

var DropTableResult_Se_DEFAULT *errors.ServiceException

func (p *DropTableResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return DropTableResult_Se_DEFAULT
	}
	return p.Se
}
func (p *DropTableResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *DropTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *DropTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dropTable_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *DropTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTableResult(%+v)", *p)
}

type LazyDropTableArgs struct {
	TableName string `thrift:"tableName,1" json:"tableName"`
}

func NewLazyDropTableArgs() *LazyDropTableArgs {
	return &LazyDropTableArgs{}
}

func (p *LazyDropTableArgs) GetTableName() string {
	return p.TableName
}
func (p *LazyDropTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LazyDropTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *LazyDropTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lazyDropTable_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LazyDropTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *LazyDropTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LazyDropTableArgs(%+v)", *p)
}

type LazyDropTableResult struct {
	Se *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewLazyDropTableResult() *LazyDropTableResult {
	return &LazyDropTableResult{}
}

var LazyDropTableResult_Se_DEFAULT *errors.ServiceException

func (p *LazyDropTableResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return LazyDropTableResult_Se_DEFAULT
	}
	return p.Se
}
func (p *LazyDropTableResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *LazyDropTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LazyDropTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *LazyDropTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lazyDropTable_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LazyDropTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *LazyDropTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LazyDropTableResult(%+v)", *p)
}

type AlterTableArgs struct {
	TableName string           `thrift:"tableName,1" json:"tableName"`
	TableSpec *table.TableSpec `thrift:"tableSpec,2" json:"tableSpec"`
}

func NewAlterTableArgs() *AlterTableArgs {
	return &AlterTableArgs{}
}

func (p *AlterTableArgs) GetTableName() string {
	return p.TableName
}

var AlterTableArgs_TableSpec_DEFAULT *table.TableSpec

func (p *AlterTableArgs) GetTableSpec() *table.TableSpec {
	if !p.IsSetTableSpec() {
		return AlterTableArgs_TableSpec_DEFAULT
	}
	return p.TableSpec
}
func (p *AlterTableArgs) IsSetTableSpec() bool {
	return p.TableSpec != nil
}

func (p *AlterTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AlterTableArgs) ReadField2(iprot thrift.TProtocol) error {
	p.TableSpec = &table.TableSpec{}
	if err := p.TableSpec.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TableSpec, err)
	}
	return nil
}

func (p *AlterTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alterTable_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *AlterTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableSpec", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tableSpec: %s", p, err)
	}
	if err := p.TableSpec.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TableSpec, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tableSpec: %s", p, err)
	}
	return err
}

func (p *AlterTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterTableArgs(%+v)", *p)
}

type AlterTableResult struct {
	Se *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewAlterTableResult() *AlterTableResult {
	return &AlterTableResult{}
}

var AlterTableResult_Se_DEFAULT *errors.ServiceException

func (p *AlterTableResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return AlterTableResult_Se_DEFAULT
	}
	return p.Se
}
func (p *AlterTableResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *AlterTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *AlterTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alterTable_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *AlterTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterTableResult(%+v)", *p)
}

type CloneTableArgs struct {
	SrcName    string `thrift:"srcName,1" json:"srcName"`
	DestTable  string `thrift:"destTable,2" json:"destTable"`
	FlushTable bool   `thrift:"flushTable,3" json:"flushTable"`
}

func NewCloneTableArgs() *CloneTableArgs {
	return &CloneTableArgs{}
}

func (p *CloneTableArgs) GetSrcName() string {
	return p.SrcName
}

func (p *CloneTableArgs) GetDestTable() string {
	return p.DestTable
}

func (p *CloneTableArgs) GetFlushTable() bool {
	return p.FlushTable
}
func (p *CloneTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CloneTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SrcName = v
	}
	return nil
}

func (p *CloneTableArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DestTable = v
	}
	return nil
}

func (p *CloneTableArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FlushTable = v
	}
	return nil
}

func (p *CloneTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cloneTable_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CloneTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("srcName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:srcName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SrcName)); err != nil {
		return fmt.Errorf("%T.srcName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:srcName: %s", p, err)
	}
	return err
}

func (p *CloneTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("destTable", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:destTable: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DestTable)); err != nil {
		return fmt.Errorf("%T.destTable (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:destTable: %s", p, err)
	}
	return err
}

func (p *CloneTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flushTable", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:flushTable: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.FlushTable)); err != nil {
		return fmt.Errorf("%T.flushTable (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:flushTable: %s", p, err)
	}
	return err
}

func (p *CloneTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloneTableArgs(%+v)", *p)
}

type CloneTableResult struct {
	Se *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewCloneTableResult() *CloneTableResult {
	return &CloneTableResult{}
}

var CloneTableResult_Se_DEFAULT *errors.ServiceException

func (p *CloneTableResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return CloneTableResult_Se_DEFAULT
	}
	return p.Se
}
func (p *CloneTableResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *CloneTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CloneTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *CloneTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cloneTable_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CloneTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *CloneTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloneTableResult(%+v)", *p)
}

type DisableTableArgs struct {
	TableName string `thrift:"tableName,1" json:"tableName"`
}

func NewDisableTableArgs() *DisableTableArgs {
	return &DisableTableArgs{}
}

func (p *DisableTableArgs) GetTableName() string {
	return p.TableName
}
func (p *DisableTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DisableTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *DisableTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disableTable_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DisableTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *DisableTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DisableTableArgs(%+v)", *p)
}

type DisableTableResult struct {
	Se *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewDisableTableResult() *DisableTableResult {
	return &DisableTableResult{}
}

var DisableTableResult_Se_DEFAULT *errors.ServiceException

func (p *DisableTableResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return DisableTableResult_Se_DEFAULT
	}
	return p.Se
}
func (p *DisableTableResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *DisableTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DisableTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *DisableTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disableTable_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DisableTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *DisableTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DisableTableResult(%+v)", *p)
}

type EnableTableArgs struct {
	TableName string `thrift:"tableName,1" json:"tableName"`
}

func NewEnableTableArgs() *EnableTableArgs {
	return &EnableTableArgs{}
}

func (p *EnableTableArgs) GetTableName() string {
	return p.TableName
}
func (p *EnableTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EnableTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *EnableTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("enableTable_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EnableTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *EnableTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnableTableArgs(%+v)", *p)
}

type EnableTableResult struct {
	Se *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewEnableTableResult() *EnableTableResult {
	return &EnableTableResult{}
}

var EnableTableResult_Se_DEFAULT *errors.ServiceException

func (p *EnableTableResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return EnableTableResult_Se_DEFAULT
	}
	return p.Se
}
func (p *EnableTableResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *EnableTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EnableTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *EnableTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("enableTable_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EnableTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *EnableTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnableTableResult(%+v)", *p)
}

type DescribeTableArgs struct {
	TableName string `thrift:"tableName,1" json:"tableName"`
}

func NewDescribeTableArgs() *DescribeTableArgs {
	return &DescribeTableArgs{}
}

func (p *DescribeTableArgs) GetTableName() string {
	return p.TableName
}
func (p *DescribeTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DescribeTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *DescribeTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("describeTable_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DescribeTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *DescribeTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeTableArgs(%+v)", *p)
}

type DescribeTableResult struct {
	Success *table.TableSpec         `thrift:"success,0" json:"success"`
	Se      *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewDescribeTableResult() *DescribeTableResult {
	return &DescribeTableResult{}
}

var DescribeTableResult_Success_DEFAULT *table.TableSpec

func (p *DescribeTableResult) GetSuccess() *table.TableSpec {
	if !p.IsSetSuccess() {
		return DescribeTableResult_Success_DEFAULT
	}
	return p.Success
}

var DescribeTableResult_Se_DEFAULT *errors.ServiceException

func (p *DescribeTableResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return DescribeTableResult_Se_DEFAULT
	}
	return p.Se
}
func (p *DescribeTableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DescribeTableResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *DescribeTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DescribeTableResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &table.TableSpec{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *DescribeTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *DescribeTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("describeTable_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DescribeTableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DescribeTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *DescribeTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeTableResult(%+v)", *p)
}

type GetTableStatusArgs struct {
	TableName string `thrift:"tableName,1" json:"tableName"`
}

func NewGetTableStatusArgs() *GetTableStatusArgs {
	return &GetTableStatusArgs{}
}

func (p *GetTableStatusArgs) GetTableName() string {
	return p.TableName
}
func (p *GetTableStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GetTableStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableStatus_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *GetTableStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableStatusArgs(%+v)", *p)
}

type GetTableStatusResult struct {
	Success *table.TableStatus       `thrift:"success,0" json:"success"`
	Se      *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewGetTableStatusResult() *GetTableStatusResult {
	return &GetTableStatusResult{}
}

var GetTableStatusResult_Success_DEFAULT *table.TableStatus

func (p *GetTableStatusResult) GetSuccess() *table.TableStatus {
	if !p.IsSetSuccess() {
		return GetTableStatusResult_Success_DEFAULT
	}
	return p.Success
}

var GetTableStatusResult_Se_DEFAULT *errors.ServiceException

func (p *GetTableStatusResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return GetTableStatusResult_Se_DEFAULT
	}
	return p.Se
}
func (p *GetTableStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTableStatusResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *GetTableStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &table.TableStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTableStatusResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *GetTableStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableStatus_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTableStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *GetTableStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableStatusResult(%+v)", *p)
}

type GetTableStateArgs struct {
	TableName string `thrift:"tableName,1" json:"tableName"`
}

func NewGetTableStateArgs() *GetTableStateArgs {
	return &GetTableStateArgs{}
}

func (p *GetTableStateArgs) GetTableName() string {
	return p.TableName
}
func (p *GetTableStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableStateArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GetTableStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableState_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *GetTableStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableStateArgs(%+v)", *p)
}

type GetTableStateResult struct {
	Success *table.TableState        `thrift:"success,0" json:"success"`
	Se      *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewGetTableStateResult() *GetTableStateResult {
	return &GetTableStateResult{}
}

var GetTableStateResult_Success_DEFAULT table.TableState

func (p *GetTableStateResult) GetSuccess() table.TableState {
	if !p.IsSetSuccess() {
		return GetTableStateResult_Success_DEFAULT
	}
	return *p.Success
}

var GetTableStateResult_Se_DEFAULT *errors.ServiceException

func (p *GetTableStateResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return GetTableStateResult_Se_DEFAULT
	}
	return p.Se
}
func (p *GetTableStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTableStateResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *GetTableStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableStateResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		temp := table.TableState(v)
		p.Success = &temp
	}
	return nil
}

func (p *GetTableStateResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *GetTableStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableState_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTableStateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *GetTableStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableStateResult(%+v)", *p)
}

type GetTableSplitsArgs struct {
	TableName string           `thrift:"tableName,1" json:"tableName"`
	StartKey  table.Dictionary `thrift:"startKey,2" json:"startKey"`
	StopKey   table.Dictionary `thrift:"stopKey,3" json:"stopKey"`
}

func NewGetTableSplitsArgs() *GetTableSplitsArgs {
	return &GetTableSplitsArgs{}
}

func (p *GetTableSplitsArgs) GetTableName() string {
	return p.TableName
}

func (p *GetTableSplitsArgs) GetStartKey() table.Dictionary {
	return p.StartKey
}

func (p *GetTableSplitsArgs) GetStopKey() table.Dictionary {
	return p.StopKey
}
func (p *GetTableSplitsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableSplitsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GetTableSplitsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(table.Dictionary, size)
	p.StartKey = tMap
	for i := 0; i < size; i++ {
		var _key43 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key43 = v
		}
		_val44 := &table.Datum{}
		if err := _val44.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val44, err)
		}
		p.StartKey[_key43] = _val44
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetTableSplitsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(table.Dictionary, size)
	p.StopKey = tMap
	for i := 0; i < size; i++ {
		var _key45 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key45 = v
		}
		_val46 := &table.Datum{}
		if err := _val46.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val46, err)
		}
		p.StopKey[_key45] = _val46
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetTableSplitsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableSplits_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableSplitsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *GetTableSplitsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startKey", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:startKey: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.StartKey)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.StartKey {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:startKey: %s", p, err)
	}
	return err
}

func (p *GetTableSplitsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stopKey", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:stopKey: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.StopKey)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.StopKey {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:stopKey: %s", p, err)
	}
	return err
}

func (p *GetTableSplitsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableSplitsArgs(%+v)", *p)
}

type GetTableSplitsResult struct {
	Success []*table.TableSplit      `thrift:"success,0" json:"success"`
	Se      *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewGetTableSplitsResult() *GetTableSplitsResult {
	return &GetTableSplitsResult{}
}

var GetTableSplitsResult_Success_DEFAULT []*table.TableSplit

func (p *GetTableSplitsResult) GetSuccess() []*table.TableSplit {
	return p.Success
}

var GetTableSplitsResult_Se_DEFAULT *errors.ServiceException

func (p *GetTableSplitsResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return GetTableSplitsResult_Se_DEFAULT
	}
	return p.Se
}
func (p *GetTableSplitsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTableSplitsResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *GetTableSplitsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableSplitsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*table.TableSplit, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem47 := &table.TableSplit{}
		if err := _elem47.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem47, err)
		}
		p.Success = append(p.Success, _elem47)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetTableSplitsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *GetTableSplitsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableSplits_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableSplitsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTableSplitsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *GetTableSplitsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableSplitsResult(%+v)", *p)
}

type QueryMetricArgs struct {
	Query *MetricQueryRequest `thrift:"query,1" json:"query"`
}

func NewQueryMetricArgs() *QueryMetricArgs {
	return &QueryMetricArgs{}
}

var QueryMetricArgs_Query_DEFAULT *MetricQueryRequest

func (p *QueryMetricArgs) GetQuery() *MetricQueryRequest {
	if !p.IsSetQuery() {
		return QueryMetricArgs_Query_DEFAULT
	}
	return p.Query
}
func (p *QueryMetricArgs) IsSetQuery() bool {
	return p.Query != nil
}

func (p *QueryMetricArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMetricArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Query = &MetricQueryRequest{}
	if err := p.Query.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Query, err)
	}
	return nil
}

func (p *QueryMetricArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryMetric_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:query: %s", p, err)
	}
	if err := p.Query.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Query, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:query: %s", p, err)
	}
	return err
}

func (p *QueryMetricArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMetricArgs(%+v)", *p)
}

type QueryMetricResult struct {
	Success *TimeSeriesData          `thrift:"success,0" json:"success"`
	Se      *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewQueryMetricResult() *QueryMetricResult {
	return &QueryMetricResult{}
}

var QueryMetricResult_Success_DEFAULT *TimeSeriesData

func (p *QueryMetricResult) GetSuccess() *TimeSeriesData {
	if !p.IsSetSuccess() {
		return QueryMetricResult_Success_DEFAULT
	}
	return p.Success
}

var QueryMetricResult_Se_DEFAULT *errors.ServiceException

func (p *QueryMetricResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return QueryMetricResult_Se_DEFAULT
	}
	return p.Se
}
func (p *QueryMetricResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryMetricResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *QueryMetricResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMetricResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TimeSeriesData{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryMetricResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *QueryMetricResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryMetric_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMetricResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMetricResult(%+v)", *p)
}

type QueryMetricsArgs struct {
	Queries []*MetricQueryRequest `thrift:"queries,1" json:"queries"`
}

func NewQueryMetricsArgs() *QueryMetricsArgs {
	return &QueryMetricsArgs{}
}

func (p *QueryMetricsArgs) GetQueries() []*MetricQueryRequest {
	return p.Queries
}
func (p *QueryMetricsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMetricsArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MetricQueryRequest, 0, size)
	p.Queries = tSlice
	for i := 0; i < size; i++ {
		_elem48 := &MetricQueryRequest{}
		if err := _elem48.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem48, err)
		}
		p.Queries = append(p.Queries, _elem48)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *QueryMetricsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryMetrics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMetricsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queries", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queries: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Queries)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Queries {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queries: %s", p, err)
	}
	return err
}

func (p *QueryMetricsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMetricsArgs(%+v)", *p)
}

type QueryMetricsResult struct {
	Success []*TimeSeriesData        `thrift:"success,0" json:"success"`
	Se      *errors.ServiceException `thrift:"se,1" json:"se"`
}

func NewQueryMetricsResult() *QueryMetricsResult {
	return &QueryMetricsResult{}
}

var QueryMetricsResult_Success_DEFAULT []*TimeSeriesData

func (p *QueryMetricsResult) GetSuccess() []*TimeSeriesData {
	return p.Success
}

var QueryMetricsResult_Se_DEFAULT *errors.ServiceException

func (p *QueryMetricsResult) GetSe() *errors.ServiceException {
	if !p.IsSetSe() {
		return QueryMetricsResult_Se_DEFAULT
	}
	return p.Se
}
func (p *QueryMetricsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryMetricsResult) IsSetSe() bool {
	return p.Se != nil
}

func (p *QueryMetricsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMetricsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TimeSeriesData, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem49 := &TimeSeriesData{}
		if err := _elem49.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem49, err)
		}
		p.Success = append(p.Success, _elem49)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *QueryMetricsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Se = &errors.ServiceException{}
	if err := p.Se.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Se, err)
	}
	return nil
}

func (p *QueryMetricsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryMetrics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMetricsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSe() {
		if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:se: %s", p, err)
		}
		if err := p.Se.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Se, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:se: %s", p, err)
		}
	}
	return err
}

func (p *QueryMetricsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMetricsResult(%+v)", *p)
}
