// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package errors

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

//HTTP状态码列表，用于传输层，签名错误等
type HttpStatusCode int64

const (
	HttpStatusCode_BAD_REQUEST       HttpStatusCode = 400
	HttpStatusCode_INVALID_AUTH      HttpStatusCode = 401
	HttpStatusCode_CLOCK_TOO_SKEWED  HttpStatusCode = 412
	HttpStatusCode_REQUEST_TOO_LARGE HttpStatusCode = 413
	HttpStatusCode_INTERNAL_ERROR    HttpStatusCode = 500
)

func (p HttpStatusCode) String() string {
	switch p {
	case HttpStatusCode_BAD_REQUEST:
		return "HttpStatusCode_BAD_REQUEST"
	case HttpStatusCode_INVALID_AUTH:
		return "HttpStatusCode_INVALID_AUTH"
	case HttpStatusCode_CLOCK_TOO_SKEWED:
		return "HttpStatusCode_CLOCK_TOO_SKEWED"
	case HttpStatusCode_REQUEST_TOO_LARGE:
		return "HttpStatusCode_REQUEST_TOO_LARGE"
	case HttpStatusCode_INTERNAL_ERROR:
		return "HttpStatusCode_INTERNAL_ERROR"
	}
	return "<UNSET>"
}

func HttpStatusCodeFromString(s string) (HttpStatusCode, error) {
	switch s {
	case "HttpStatusCode_BAD_REQUEST":
		return HttpStatusCode_BAD_REQUEST, nil
	case "HttpStatusCode_INVALID_AUTH":
		return HttpStatusCode_INVALID_AUTH, nil
	case "HttpStatusCode_CLOCK_TOO_SKEWED":
		return HttpStatusCode_CLOCK_TOO_SKEWED, nil
	case "HttpStatusCode_REQUEST_TOO_LARGE":
		return HttpStatusCode_REQUEST_TOO_LARGE, nil
	case "HttpStatusCode_INTERNAL_ERROR":
		return HttpStatusCode_INTERNAL_ERROR, nil
	}
	return HttpStatusCode(0), fmt.Errorf("not a valid HttpStatusCode string")
}

func HttpStatusCodePtr(v HttpStatusCode) *HttpStatusCode { return &v }

//错误码列表，用于逻辑层错误
type ErrorCode int64

const (
	ErrorCode_INTERNAL_ERROR          ErrorCode = 1
	ErrorCode_SERVICE_UNAVAILABLE     ErrorCode = 2
	ErrorCode_UNKNOWN                 ErrorCode = 3
	ErrorCode_END_OF_INTERNAL_ERROR   ErrorCode = 20
	ErrorCode_ACCESS_DENIED           ErrorCode = 21
	ErrorCode_VALIDATION_FAILED       ErrorCode = 22
	ErrorCode_SIZE_EXCEED             ErrorCode = 23
	ErrorCode_QUOTA_EXCEED            ErrorCode = 24
	ErrorCode_THROUGHPUT_EXCEED       ErrorCode = 25
	ErrorCode_RESOURCE_NOT_FOUND      ErrorCode = 26
	ErrorCode_RESOURCE_ALREADY_EXISTS ErrorCode = 27
	ErrorCode_RESOURCE_UNAVAILABLE    ErrorCode = 28
	ErrorCode_UNSUPPORTED_VERSION     ErrorCode = 29
	ErrorCode_UNSUPPORTED_OPERATION   ErrorCode = 30
	ErrorCode_INVALID_AUTH            ErrorCode = 31
	ErrorCode_CLOCK_TOO_SKEWED        ErrorCode = 32
	ErrorCode_REQUEST_TOO_LARGE       ErrorCode = 33
	ErrorCode_BAD_REQUEST             ErrorCode = 34
	ErrorCode_TTRANSPORT_ERROR        ErrorCode = 35
	ErrorCode_UNSUPPORTED_TPROTOCOL   ErrorCode = 36
	ErrorCode_REQUEST_TIMEOUT         ErrorCode = 37
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_INTERNAL_ERROR:
		return "ErrorCode_INTERNAL_ERROR"
	case ErrorCode_SERVICE_UNAVAILABLE:
		return "ErrorCode_SERVICE_UNAVAILABLE"
	case ErrorCode_UNKNOWN:
		return "ErrorCode_UNKNOWN"
	case ErrorCode_END_OF_INTERNAL_ERROR:
		return "ErrorCode_END_OF_INTERNAL_ERROR"
	case ErrorCode_ACCESS_DENIED:
		return "ErrorCode_ACCESS_DENIED"
	case ErrorCode_VALIDATION_FAILED:
		return "ErrorCode_VALIDATION_FAILED"
	case ErrorCode_SIZE_EXCEED:
		return "ErrorCode_SIZE_EXCEED"
	case ErrorCode_QUOTA_EXCEED:
		return "ErrorCode_QUOTA_EXCEED"
	case ErrorCode_THROUGHPUT_EXCEED:
		return "ErrorCode_THROUGHPUT_EXCEED"
	case ErrorCode_RESOURCE_NOT_FOUND:
		return "ErrorCode_RESOURCE_NOT_FOUND"
	case ErrorCode_RESOURCE_ALREADY_EXISTS:
		return "ErrorCode_RESOURCE_ALREADY_EXISTS"
	case ErrorCode_RESOURCE_UNAVAILABLE:
		return "ErrorCode_RESOURCE_UNAVAILABLE"
	case ErrorCode_UNSUPPORTED_VERSION:
		return "ErrorCode_UNSUPPORTED_VERSION"
	case ErrorCode_UNSUPPORTED_OPERATION:
		return "ErrorCode_UNSUPPORTED_OPERATION"
	case ErrorCode_INVALID_AUTH:
		return "ErrorCode_INVALID_AUTH"
	case ErrorCode_CLOCK_TOO_SKEWED:
		return "ErrorCode_CLOCK_TOO_SKEWED"
	case ErrorCode_REQUEST_TOO_LARGE:
		return "ErrorCode_REQUEST_TOO_LARGE"
	case ErrorCode_BAD_REQUEST:
		return "ErrorCode_BAD_REQUEST"
	case ErrorCode_TTRANSPORT_ERROR:
		return "ErrorCode_TTRANSPORT_ERROR"
	case ErrorCode_UNSUPPORTED_TPROTOCOL:
		return "ErrorCode_UNSUPPORTED_TPROTOCOL"
	case ErrorCode_REQUEST_TIMEOUT:
		return "ErrorCode_REQUEST_TIMEOUT"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "ErrorCode_INTERNAL_ERROR":
		return ErrorCode_INTERNAL_ERROR, nil
	case "ErrorCode_SERVICE_UNAVAILABLE":
		return ErrorCode_SERVICE_UNAVAILABLE, nil
	case "ErrorCode_UNKNOWN":
		return ErrorCode_UNKNOWN, nil
	case "ErrorCode_END_OF_INTERNAL_ERROR":
		return ErrorCode_END_OF_INTERNAL_ERROR, nil
	case "ErrorCode_ACCESS_DENIED":
		return ErrorCode_ACCESS_DENIED, nil
	case "ErrorCode_VALIDATION_FAILED":
		return ErrorCode_VALIDATION_FAILED, nil
	case "ErrorCode_SIZE_EXCEED":
		return ErrorCode_SIZE_EXCEED, nil
	case "ErrorCode_QUOTA_EXCEED":
		return ErrorCode_QUOTA_EXCEED, nil
	case "ErrorCode_THROUGHPUT_EXCEED":
		return ErrorCode_THROUGHPUT_EXCEED, nil
	case "ErrorCode_RESOURCE_NOT_FOUND":
		return ErrorCode_RESOURCE_NOT_FOUND, nil
	case "ErrorCode_RESOURCE_ALREADY_EXISTS":
		return ErrorCode_RESOURCE_ALREADY_EXISTS, nil
	case "ErrorCode_RESOURCE_UNAVAILABLE":
		return ErrorCode_RESOURCE_UNAVAILABLE, nil
	case "ErrorCode_UNSUPPORTED_VERSION":
		return ErrorCode_UNSUPPORTED_VERSION, nil
	case "ErrorCode_UNSUPPORTED_OPERATION":
		return ErrorCode_UNSUPPORTED_OPERATION, nil
	case "ErrorCode_INVALID_AUTH":
		return ErrorCode_INVALID_AUTH, nil
	case "ErrorCode_CLOCK_TOO_SKEWED":
		return ErrorCode_CLOCK_TOO_SKEWED, nil
	case "ErrorCode_REQUEST_TOO_LARGE":
		return ErrorCode_REQUEST_TOO_LARGE, nil
	case "ErrorCode_BAD_REQUEST":
		return ErrorCode_BAD_REQUEST, nil
	case "ErrorCode_TTRANSPORT_ERROR":
		return ErrorCode_TTRANSPORT_ERROR, nil
	case "ErrorCode_UNSUPPORTED_TPROTOCOL":
		return ErrorCode_UNSUPPORTED_TPROTOCOL, nil
	case "ErrorCode_REQUEST_TIMEOUT":
		return ErrorCode_REQUEST_TIMEOUT, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

type RetryType int64

const (
	RetryType_SAFE   RetryType = 0
	RetryType_UNSAFE RetryType = 1
)

func (p RetryType) String() string {
	switch p {
	case RetryType_SAFE:
		return "RetryType_SAFE"
	case RetryType_UNSAFE:
		return "RetryType_UNSAFE"
	}
	return "<UNSET>"
}

func RetryTypeFromString(s string) (RetryType, error) {
	switch s {
	case "RetryType_SAFE":
		return RetryType_SAFE, nil
	case "RetryType_UNSAFE":
		return RetryType_UNSAFE, nil
	}
	return RetryType(0), fmt.Errorf("not a valid RetryType string")
}

func RetryTypePtr(v RetryType) *RetryType { return &v }

type ServiceException struct {
	ErrorCode    *ErrorCode `thrift:"errorCode,1" json:"errorCode"`
	ErrorMessage *string    `thrift:"errorMessage,2" json:"errorMessage"`
	Details      *string    `thrift:"details,3" json:"details"`
	CallId       *string    `thrift:"callId,4" json:"callId"`
	RequestId    *string    `thrift:"requestId,5" json:"requestId"`
}

func NewServiceException() *ServiceException {
	return &ServiceException{}
}

var ServiceException_ErrorCode_DEFAULT ErrorCode

func (p *ServiceException) GetErrorCode() ErrorCode {
	if !p.IsSetErrorCode() {
		return ServiceException_ErrorCode_DEFAULT
	}
	return *p.ErrorCode
}

var ServiceException_ErrorMessage_DEFAULT string

func (p *ServiceException) GetErrorMessage() string {
	if !p.IsSetErrorMessage() {
		return ServiceException_ErrorMessage_DEFAULT
	}
	return *p.ErrorMessage
}

var ServiceException_Details_DEFAULT string

func (p *ServiceException) GetDetails() string {
	if !p.IsSetDetails() {
		return ServiceException_Details_DEFAULT
	}
	return *p.Details
}

var ServiceException_CallId_DEFAULT string

func (p *ServiceException) GetCallId() string {
	if !p.IsSetCallId() {
		return ServiceException_CallId_DEFAULT
	}
	return *p.CallId
}

var ServiceException_RequestId_DEFAULT string

func (p *ServiceException) GetRequestId() string {
	if !p.IsSetRequestId() {
		return ServiceException_RequestId_DEFAULT
	}
	return *p.RequestId
}
func (p *ServiceException) IsSetErrorCode() bool {
	return p.ErrorCode != nil
}

func (p *ServiceException) IsSetErrorMessage() bool {
	return p.ErrorMessage != nil
}

func (p *ServiceException) IsSetDetails() bool {
	return p.Details != nil
}

func (p *ServiceException) IsSetCallId() bool {
	return p.CallId != nil
}

func (p *ServiceException) IsSetRequestId() bool {
	return p.RequestId != nil
}

func (p *ServiceException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ServiceException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := ErrorCode(v)
		p.ErrorCode = &temp
	}
	return nil
}

func (p *ServiceException) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ErrorMessage = &v
	}
	return nil
}

func (p *ServiceException) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Details = &v
	}
	return nil
}

func (p *ServiceException) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CallId = &v
	}
	return nil
}

func (p *ServiceException) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.RequestId = &v
	}
	return nil
}

func (p *ServiceException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServiceException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ServiceException) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ErrorCode)); err != nil {
			return fmt.Errorf("%T.errorCode (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
		}
	}
	return err
}

func (p *ServiceException) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMessage() {
		if err := oprot.WriteFieldBegin("errorMessage", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:errorMessage: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ErrorMessage)); err != nil {
			return fmt.Errorf("%T.errorMessage (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:errorMessage: %s", p, err)
		}
	}
	return err
}

func (p *ServiceException) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetails() {
		if err := oprot.WriteFieldBegin("details", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:details: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Details)); err != nil {
			return fmt.Errorf("%T.details (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:details: %s", p, err)
		}
	}
	return err
}

func (p *ServiceException) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCallId() {
		if err := oprot.WriteFieldBegin("callId", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:callId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.CallId)); err != nil {
			return fmt.Errorf("%T.callId (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:callId: %s", p, err)
		}
	}
	return err
}

func (p *ServiceException) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestId() {
		if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:requestId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.RequestId)); err != nil {
			return fmt.Errorf("%T.requestId (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:requestId: %s", p, err)
		}
	}
	return err
}

func (p *ServiceException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceException(%+v)", *p)
}

func (p *ServiceException) Error() string {
	return p.String()
}
