// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"sds/table"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  GetResult get(GetRequest request)")
	fmt.Fprintln(os.Stderr, "  PutResult put(PutRequest request)")
	fmt.Fprintln(os.Stderr, "  IncrementResult increment(IncrementRequest request)")
	fmt.Fprintln(os.Stderr, "  RemoveResult remove(RemoveRequest request)")
	fmt.Fprintln(os.Stderr, "  ScanResult scan(ScanRequest request)")
	fmt.Fprintln(os.Stderr, "  BatchResult batch(BatchRequest request)")
	fmt.Fprintln(os.Stderr, "  DataConsumeResult consumePartitionData(DataConsumeRequest request)")
	fmt.Fprintln(os.Stderr, "  EditConsumeResult consumePartitionEdit(EditConsumeRequest request)")
	fmt.Fprintln(os.Stderr, "  DataCommitResult commitConsumedPartitionData(DataCommitRequest request)")
	fmt.Fprintln(os.Stderr, "  EditCommitResult commitConsumedPartitionEdit(EditCommitRequest request)")
	fmt.Fprintln(os.Stderr, "  PutResult putToRebuildIndex(PutRequest request)")
	fmt.Fprintln(os.Stderr, "  Version getServerVersion()")
	fmt.Fprintln(os.Stderr, "  void validateClientVersion(Version clientVersion)")
	fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := table.NewTableServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "get":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Get requires 1 args")
			flag.Usage()
		}
		arg99 := flag.Arg(1)
		mbTrans100 := thrift.NewTMemoryBufferLen(len(arg99))
		defer mbTrans100.Close()
		_, err101 := mbTrans100.WriteString(arg99)
		if err101 != nil {
			Usage()
			return
		}
		factory102 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt103 := factory102.GetProtocol(mbTrans100)
		argvalue0 := table.NewGetRequest()
		err104 := argvalue0.Read(jsProt103)
		if err104 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Get(value0))
		fmt.Print("\n")
		break
	case "put":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Put requires 1 args")
			flag.Usage()
		}
		arg105 := flag.Arg(1)
		mbTrans106 := thrift.NewTMemoryBufferLen(len(arg105))
		defer mbTrans106.Close()
		_, err107 := mbTrans106.WriteString(arg105)
		if err107 != nil {
			Usage()
			return
		}
		factory108 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt109 := factory108.GetProtocol(mbTrans106)
		argvalue0 := table.NewPutRequest()
		err110 := argvalue0.Read(jsProt109)
		if err110 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Put(value0))
		fmt.Print("\n")
		break
	case "increment":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Increment requires 1 args")
			flag.Usage()
		}
		arg111 := flag.Arg(1)
		mbTrans112 := thrift.NewTMemoryBufferLen(len(arg111))
		defer mbTrans112.Close()
		_, err113 := mbTrans112.WriteString(arg111)
		if err113 != nil {
			Usage()
			return
		}
		factory114 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt115 := factory114.GetProtocol(mbTrans112)
		argvalue0 := table.NewIncrementRequest()
		err116 := argvalue0.Read(jsProt115)
		if err116 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Increment(value0))
		fmt.Print("\n")
		break
	case "remove":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Remove requires 1 args")
			flag.Usage()
		}
		arg117 := flag.Arg(1)
		mbTrans118 := thrift.NewTMemoryBufferLen(len(arg117))
		defer mbTrans118.Close()
		_, err119 := mbTrans118.WriteString(arg117)
		if err119 != nil {
			Usage()
			return
		}
		factory120 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt121 := factory120.GetProtocol(mbTrans118)
		argvalue0 := table.NewRemoveRequest()
		err122 := argvalue0.Read(jsProt121)
		if err122 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Remove(value0))
		fmt.Print("\n")
		break
	case "scan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Scan requires 1 args")
			flag.Usage()
		}
		arg123 := flag.Arg(1)
		mbTrans124 := thrift.NewTMemoryBufferLen(len(arg123))
		defer mbTrans124.Close()
		_, err125 := mbTrans124.WriteString(arg123)
		if err125 != nil {
			Usage()
			return
		}
		factory126 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt127 := factory126.GetProtocol(mbTrans124)
		argvalue0 := table.NewScanRequest()
		err128 := argvalue0.Read(jsProt127)
		if err128 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Scan(value0))
		fmt.Print("\n")
		break
	case "batch":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Batch requires 1 args")
			flag.Usage()
		}
		arg129 := flag.Arg(1)
		mbTrans130 := thrift.NewTMemoryBufferLen(len(arg129))
		defer mbTrans130.Close()
		_, err131 := mbTrans130.WriteString(arg129)
		if err131 != nil {
			Usage()
			return
		}
		factory132 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt133 := factory132.GetProtocol(mbTrans130)
		argvalue0 := table.NewBatchRequest()
		err134 := argvalue0.Read(jsProt133)
		if err134 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Batch(value0))
		fmt.Print("\n")
		break
	case "consumePartitionData":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ConsumePartitionData requires 1 args")
			flag.Usage()
		}
		arg135 := flag.Arg(1)
		mbTrans136 := thrift.NewTMemoryBufferLen(len(arg135))
		defer mbTrans136.Close()
		_, err137 := mbTrans136.WriteString(arg135)
		if err137 != nil {
			Usage()
			return
		}
		factory138 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt139 := factory138.GetProtocol(mbTrans136)
		argvalue0 := table.NewDataConsumeRequest()
		err140 := argvalue0.Read(jsProt139)
		if err140 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ConsumePartitionData(value0))
		fmt.Print("\n")
		break
	case "consumePartitionEdit":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ConsumePartitionEdit requires 1 args")
			flag.Usage()
		}
		arg141 := flag.Arg(1)
		mbTrans142 := thrift.NewTMemoryBufferLen(len(arg141))
		defer mbTrans142.Close()
		_, err143 := mbTrans142.WriteString(arg141)
		if err143 != nil {
			Usage()
			return
		}
		factory144 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt145 := factory144.GetProtocol(mbTrans142)
		argvalue0 := table.NewEditConsumeRequest()
		err146 := argvalue0.Read(jsProt145)
		if err146 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ConsumePartitionEdit(value0))
		fmt.Print("\n")
		break
	case "commitConsumedPartitionData":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CommitConsumedPartitionData requires 1 args")
			flag.Usage()
		}
		arg147 := flag.Arg(1)
		mbTrans148 := thrift.NewTMemoryBufferLen(len(arg147))
		defer mbTrans148.Close()
		_, err149 := mbTrans148.WriteString(arg147)
		if err149 != nil {
			Usage()
			return
		}
		factory150 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt151 := factory150.GetProtocol(mbTrans148)
		argvalue0 := table.NewDataCommitRequest()
		err152 := argvalue0.Read(jsProt151)
		if err152 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CommitConsumedPartitionData(value0))
		fmt.Print("\n")
		break
	case "commitConsumedPartitionEdit":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CommitConsumedPartitionEdit requires 1 args")
			flag.Usage()
		}
		arg153 := flag.Arg(1)
		mbTrans154 := thrift.NewTMemoryBufferLen(len(arg153))
		defer mbTrans154.Close()
		_, err155 := mbTrans154.WriteString(arg153)
		if err155 != nil {
			Usage()
			return
		}
		factory156 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt157 := factory156.GetProtocol(mbTrans154)
		argvalue0 := table.NewEditCommitRequest()
		err158 := argvalue0.Read(jsProt157)
		if err158 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CommitConsumedPartitionEdit(value0))
		fmt.Print("\n")
		break
	case "putToRebuildIndex":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PutToRebuildIndex requires 1 args")
			flag.Usage()
		}
		arg159 := flag.Arg(1)
		mbTrans160 := thrift.NewTMemoryBufferLen(len(arg159))
		defer mbTrans160.Close()
		_, err161 := mbTrans160.WriteString(arg159)
		if err161 != nil {
			Usage()
			return
		}
		factory162 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt163 := factory162.GetProtocol(mbTrans160)
		argvalue0 := table.NewPutRequest()
		err164 := argvalue0.Read(jsProt163)
		if err164 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PutToRebuildIndex(value0))
		fmt.Print("\n")
		break
	case "getServerVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServerVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServerVersion())
		fmt.Print("\n")
		break
	case "validateClientVersion":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidateClientVersion requires 1 args")
			flag.Usage()
		}
		arg165 := flag.Arg(1)
		mbTrans166 := thrift.NewTMemoryBufferLen(len(arg165))
		defer mbTrans166.Close()
		_, err167 := mbTrans166.WriteString(arg165)
		if err167 != nil {
			Usage()
			return
		}
		factory168 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt169 := factory168.GetProtocol(mbTrans166)
		argvalue0 := table.NewVersion()
		err170 := argvalue0.Read(jsProt169)
		if err170 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidateClientVersion(value0))
		fmt.Print("\n")
		break
	case "getServerTime":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServerTime())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
