// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package table

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/galaxy-sdk-go/rpc/Authorization"
	"github.com/XiaoMi/galaxy-sdk-go/sds/auth"
	"github.com/XiaoMi/galaxy-sdk-go/sds/common"
	"github.com/XiaoMi/galaxy-sdk-go/sds/errors"
	"github.com/XiaoMi/galaxy-sdk-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = errors.GoUnusedProtection__
var _ = common.GoUnusedProtection__
var _ = auth.GoUnusedProtection__
var _ = Authorization.GoUnusedProtection__
var GoUnusedProtection__ int

//数据类型
type DataType int64

const (
	DataType_BOOL       DataType = 1
	DataType_INT8       DataType = 2
	DataType_INT16      DataType = 3
	DataType_INT32      DataType = 4
	DataType_INT64      DataType = 5
	DataType_FLOAT      DataType = 6
	DataType_DOUBLE     DataType = 7
	DataType_STRING     DataType = 8
	DataType_BINARY     DataType = 9
	DataType_RAWBINARY  DataType = 10
	DataType_BOOL_SET   DataType = 100
	DataType_INT8_SET   DataType = 101
	DataType_INT16_SET  DataType = 102
	DataType_INT32_SET  DataType = 103
	DataType_INT64_SET  DataType = 104
	DataType_FLOAT_SET  DataType = 105
	DataType_DOUBLE_SET DataType = 106
	DataType_STRING_SET DataType = 107
	DataType_BINARY_SET DataType = 108
)

func (p DataType) String() string {
	switch p {
	case DataType_BOOL:
		return "DataType_BOOL"
	case DataType_INT8:
		return "DataType_INT8"
	case DataType_INT16:
		return "DataType_INT16"
	case DataType_INT32:
		return "DataType_INT32"
	case DataType_INT64:
		return "DataType_INT64"
	case DataType_FLOAT:
		return "DataType_FLOAT"
	case DataType_DOUBLE:
		return "DataType_DOUBLE"
	case DataType_STRING:
		return "DataType_STRING"
	case DataType_BINARY:
		return "DataType_BINARY"
	case DataType_RAWBINARY:
		return "DataType_RAWBINARY"
	case DataType_BOOL_SET:
		return "DataType_BOOL_SET"
	case DataType_INT8_SET:
		return "DataType_INT8_SET"
	case DataType_INT16_SET:
		return "DataType_INT16_SET"
	case DataType_INT32_SET:
		return "DataType_INT32_SET"
	case DataType_INT64_SET:
		return "DataType_INT64_SET"
	case DataType_FLOAT_SET:
		return "DataType_FLOAT_SET"
	case DataType_DOUBLE_SET:
		return "DataType_DOUBLE_SET"
	case DataType_STRING_SET:
		return "DataType_STRING_SET"
	case DataType_BINARY_SET:
		return "DataType_BINARY_SET"
	}
	return "<UNSET>"
}

func DataTypeFromString(s string) (DataType, error) {
	switch s {
	case "DataType_BOOL":
		return DataType_BOOL, nil
	case "DataType_INT8":
		return DataType_INT8, nil
	case "DataType_INT16":
		return DataType_INT16, nil
	case "DataType_INT32":
		return DataType_INT32, nil
	case "DataType_INT64":
		return DataType_INT64, nil
	case "DataType_FLOAT":
		return DataType_FLOAT, nil
	case "DataType_DOUBLE":
		return DataType_DOUBLE, nil
	case "DataType_STRING":
		return DataType_STRING, nil
	case "DataType_BINARY":
		return DataType_BINARY, nil
	case "DataType_RAWBINARY":
		return DataType_RAWBINARY, nil
	case "DataType_BOOL_SET":
		return DataType_BOOL_SET, nil
	case "DataType_INT8_SET":
		return DataType_INT8_SET, nil
	case "DataType_INT16_SET":
		return DataType_INT16_SET, nil
	case "DataType_INT32_SET":
		return DataType_INT32_SET, nil
	case "DataType_INT64_SET":
		return DataType_INT64_SET, nil
	case "DataType_FLOAT_SET":
		return DataType_FLOAT_SET, nil
	case "DataType_DOUBLE_SET":
		return DataType_DOUBLE_SET, nil
	case "DataType_STRING_SET":
		return DataType_STRING_SET, nil
	case "DataType_BINARY_SET":
		return DataType_BINARY_SET, nil
	}
	return DataType(0), fmt.Errorf("not a valid DataType string")
}

func DataTypePtr(v DataType) *DataType { return &v }

//操作符类型
type OperatorType int64

const (
	OperatorType_EQUAL            OperatorType = 1
	OperatorType_NOT_EQUAL        OperatorType = 2
	OperatorType_GREATER          OperatorType = 3
	OperatorType_GREATER_OR_EQUAL OperatorType = 4
	OperatorType_LESS             OperatorType = 5
	OperatorType_LESS_OR_EQUAL    OperatorType = 6
)

func (p OperatorType) String() string {
	switch p {
	case OperatorType_EQUAL:
		return "OperatorType_EQUAL"
	case OperatorType_NOT_EQUAL:
		return "OperatorType_NOT_EQUAL"
	case OperatorType_GREATER:
		return "OperatorType_GREATER"
	case OperatorType_GREATER_OR_EQUAL:
		return "OperatorType_GREATER_OR_EQUAL"
	case OperatorType_LESS:
		return "OperatorType_LESS"
	case OperatorType_LESS_OR_EQUAL:
		return "OperatorType_LESS_OR_EQUAL"
	}
	return "<UNSET>"
}

func OperatorTypeFromString(s string) (OperatorType, error) {
	switch s {
	case "OperatorType_EQUAL":
		return OperatorType_EQUAL, nil
	case "OperatorType_NOT_EQUAL":
		return OperatorType_NOT_EQUAL, nil
	case "OperatorType_GREATER":
		return OperatorType_GREATER, nil
	case "OperatorType_GREATER_OR_EQUAL":
		return OperatorType_GREATER_OR_EQUAL, nil
	case "OperatorType_LESS":
		return OperatorType_LESS, nil
	case "OperatorType_LESS_OR_EQUAL":
		return OperatorType_LESS_OR_EQUAL, nil
	}
	return OperatorType(0), fmt.Errorf("not a valid OperatorType string")
}

func OperatorTypePtr(v OperatorType) *OperatorType { return &v }

//索引数据一致性类型
type SecondaryIndexConsistencyMode int64

const (
	SecondaryIndexConsistencyMode_LAZY      SecondaryIndexConsistencyMode = 0
	SecondaryIndexConsistencyMode_EAGER     SecondaryIndexConsistencyMode = 1
	SecondaryIndexConsistencyMode_IMMUTABLE SecondaryIndexConsistencyMode = 2
)

func (p SecondaryIndexConsistencyMode) String() string {
	switch p {
	case SecondaryIndexConsistencyMode_LAZY:
		return "SecondaryIndexConsistencyMode_LAZY"
	case SecondaryIndexConsistencyMode_EAGER:
		return "SecondaryIndexConsistencyMode_EAGER"
	case SecondaryIndexConsistencyMode_IMMUTABLE:
		return "SecondaryIndexConsistencyMode_IMMUTABLE"
	}
	return "<UNSET>"
}

func SecondaryIndexConsistencyModeFromString(s string) (SecondaryIndexConsistencyMode, error) {
	switch s {
	case "SecondaryIndexConsistencyMode_LAZY":
		return SecondaryIndexConsistencyMode_LAZY, nil
	case "SecondaryIndexConsistencyMode_EAGER":
		return SecondaryIndexConsistencyMode_EAGER, nil
	case "SecondaryIndexConsistencyMode_IMMUTABLE":
		return SecondaryIndexConsistencyMode_IMMUTABLE, nil
	}
	return SecondaryIndexConsistencyMode(0), fmt.Errorf("not a valid SecondaryIndexConsistencyMode string")
}

func SecondaryIndexConsistencyModePtr(v SecondaryIndexConsistencyMode) *SecondaryIndexConsistencyMode {
	return &v
}

//ACL模板，针对每个应用进行设置，
//开发者登录可以访问所拥有的表数据，无需额外设置
type CannedAcl int64

const (
	CannedAcl_APP_SECRET_READ             CannedAcl = 1
	CannedAcl_APP_SECRET_WRITE            CannedAcl = 2
	CannedAcl_APP_USER_ENTITY_GROUP_READ  CannedAcl = 3
	CannedAcl_APP_USER_ENTITY_GROUP_WRITE CannedAcl = 4
	CannedAcl_APP_USER_READ               CannedAcl = 5
	CannedAcl_APP_USER_WRITE              CannedAcl = 6
	CannedAcl_PUBLIC_READ                 CannedAcl = 7
	CannedAcl_PUBLIC_WRITE                CannedAcl = 8
)

func (p CannedAcl) String() string {
	switch p {
	case CannedAcl_APP_SECRET_READ:
		return "CannedAcl_APP_SECRET_READ"
	case CannedAcl_APP_SECRET_WRITE:
		return "CannedAcl_APP_SECRET_WRITE"
	case CannedAcl_APP_USER_ENTITY_GROUP_READ:
		return "CannedAcl_APP_USER_ENTITY_GROUP_READ"
	case CannedAcl_APP_USER_ENTITY_GROUP_WRITE:
		return "CannedAcl_APP_USER_ENTITY_GROUP_WRITE"
	case CannedAcl_APP_USER_READ:
		return "CannedAcl_APP_USER_READ"
	case CannedAcl_APP_USER_WRITE:
		return "CannedAcl_APP_USER_WRITE"
	case CannedAcl_PUBLIC_READ:
		return "CannedAcl_PUBLIC_READ"
	case CannedAcl_PUBLIC_WRITE:
		return "CannedAcl_PUBLIC_WRITE"
	}
	return "<UNSET>"
}

func CannedAclFromString(s string) (CannedAcl, error) {
	switch s {
	case "CannedAcl_APP_SECRET_READ":
		return CannedAcl_APP_SECRET_READ, nil
	case "CannedAcl_APP_SECRET_WRITE":
		return CannedAcl_APP_SECRET_WRITE, nil
	case "CannedAcl_APP_USER_ENTITY_GROUP_READ":
		return CannedAcl_APP_USER_ENTITY_GROUP_READ, nil
	case "CannedAcl_APP_USER_ENTITY_GROUP_WRITE":
		return CannedAcl_APP_USER_ENTITY_GROUP_WRITE, nil
	case "CannedAcl_APP_USER_READ":
		return CannedAcl_APP_USER_READ, nil
	case "CannedAcl_APP_USER_WRITE":
		return CannedAcl_APP_USER_WRITE, nil
	case "CannedAcl_PUBLIC_READ":
		return CannedAcl_PUBLIC_READ, nil
	case "CannedAcl_PUBLIC_WRITE":
		return CannedAcl_PUBLIC_WRITE, nil
	}
	return CannedAcl(0), fmt.Errorf("not a valid CannedAcl string")
}

func CannedAclPtr(v CannedAcl) *CannedAcl { return &v }

//表状态
type TableState int64

const (
	TableState_CREATING    TableState = 1
	TableState_ENABLING    TableState = 2
	TableState_ENABLED     TableState = 3
	TableState_DISABLING   TableState = 4
	TableState_DISABLED    TableState = 5
	TableState_DELETING    TableState = 6
	TableState_DELETED     TableState = 7
	TableState_LAZY_DELETE TableState = 8
	TableState_RENAMING    TableState = 9
)

func (p TableState) String() string {
	switch p {
	case TableState_CREATING:
		return "TableState_CREATING"
	case TableState_ENABLING:
		return "TableState_ENABLING"
	case TableState_ENABLED:
		return "TableState_ENABLED"
	case TableState_DISABLING:
		return "TableState_DISABLING"
	case TableState_DISABLED:
		return "TableState_DISABLED"
	case TableState_DELETING:
		return "TableState_DELETING"
	case TableState_DELETED:
		return "TableState_DELETED"
	case TableState_LAZY_DELETE:
		return "TableState_LAZY_DELETE"
	case TableState_RENAMING:
		return "TableState_RENAMING"
	}
	return "<UNSET>"
}

func TableStateFromString(s string) (TableState, error) {
	switch s {
	case "TableState_CREATING":
		return TableState_CREATING, nil
	case "TableState_ENABLING":
		return TableState_ENABLING, nil
	case "TableState_ENABLED":
		return TableState_ENABLED, nil
	case "TableState_DISABLING":
		return TableState_DISABLING, nil
	case "TableState_DISABLED":
		return TableState_DISABLED, nil
	case "TableState_DELETING":
		return TableState_DELETING, nil
	case "TableState_DELETED":
		return TableState_DELETED, nil
	case "TableState_LAZY_DELETE":
		return TableState_LAZY_DELETE, nil
	case "TableState_RENAMING":
		return TableState_RENAMING, nil
	}
	return TableState(0), fmt.Errorf("not a valid TableState string")
}

func TableStatePtr(v TableState) *TableState { return &v }

//快照状态
type SnapshotState int64

const (
	SnapshotState_ENABLED    SnapshotState = 1
	SnapshotState_INPROGRESS SnapshotState = 2
)

func (p SnapshotState) String() string {
	switch p {
	case SnapshotState_ENABLED:
		return "SnapshotState_ENABLED"
	case SnapshotState_INPROGRESS:
		return "SnapshotState_INPROGRESS"
	}
	return "<UNSET>"
}

func SnapshotStateFromString(s string) (SnapshotState, error) {
	switch s {
	case "SnapshotState_ENABLED":
		return SnapshotState_ENABLED, nil
	case "SnapshotState_INPROGRESS":
		return SnapshotState_INPROGRESS, nil
	}
	return SnapshotState(0), fmt.Errorf("not a valid SnapshotState string")
}

func SnapshotStatePtr(v SnapshotState) *SnapshotState { return &v }

type ScanOp int64

const (
	ScanOp_COUNT  ScanOp = 0
	ScanOp_DELETE ScanOp = 1
	ScanOp_UPDATE ScanOp = 2
)

func (p ScanOp) String() string {
	switch p {
	case ScanOp_COUNT:
		return "ScanOp_COUNT"
	case ScanOp_DELETE:
		return "ScanOp_DELETE"
	case ScanOp_UPDATE:
		return "ScanOp_UPDATE"
	}
	return "<UNSET>"
}

func ScanOpFromString(s string) (ScanOp, error) {
	switch s {
	case "ScanOp_COUNT":
		return ScanOp_COUNT, nil
	case "ScanOp_DELETE":
		return ScanOp_DELETE, nil
	case "ScanOp_UPDATE":
		return ScanOp_UPDATE, nil
	}
	return ScanOp(0), fmt.Errorf("not a valid ScanOp string")
}

func ScanOpPtr(v ScanOp) *ScanOp { return &v }

type BatchOp int64

const (
	BatchOp_GET       BatchOp = 1
	BatchOp_PUT       BatchOp = 2
	BatchOp_INCREMENT BatchOp = 3
	BatchOp_REMOVE    BatchOp = 4
)

func (p BatchOp) String() string {
	switch p {
	case BatchOp_GET:
		return "BatchOp_GET"
	case BatchOp_PUT:
		return "BatchOp_PUT"
	case BatchOp_INCREMENT:
		return "BatchOp_INCREMENT"
	case BatchOp_REMOVE:
		return "BatchOp_REMOVE"
	}
	return "<UNSET>"
}

func BatchOpFromString(s string) (BatchOp, error) {
	switch s {
	case "BatchOp_GET":
		return BatchOp_GET, nil
	case "BatchOp_PUT":
		return BatchOp_PUT, nil
	case "BatchOp_INCREMENT":
		return BatchOp_INCREMENT, nil
	case "BatchOp_REMOVE":
		return BatchOp_REMOVE, nil
	}
	return BatchOp(0), fmt.Errorf("not a valid BatchOp string")
}

func BatchOpPtr(v BatchOp) *BatchOp { return &v }

//增量操作类型
type EditType int64

const (
	EditType_PUT    EditType = 1
	EditType_DELETE EditType = 2
)

func (p EditType) String() string {
	switch p {
	case EditType_PUT:
		return "EditType_PUT"
	case EditType_DELETE:
		return "EditType_DELETE"
	}
	return "<UNSET>"
}

func EditTypeFromString(s string) (EditType, error) {
	switch s {
	case "EditType_PUT":
		return EditType_PUT, nil
	case "EditType_DELETE":
		return EditType_DELETE, nil
	}
	return EditType(0), fmt.Errorf("not a valid EditType string")
}

func EditTypePtr(v EditType) *EditType { return &v }

//索引(Entity Group，主键或二级索引)的定义，为有序的属性列表
type IndexSpec []*KeySpec

func IndexSpecPtr(v IndexSpec) *IndexSpec { return &v }

//属性列表，元素不能重复(PHP不支持set)
type Attributes []string

func AttributesPtr(v Attributes) *Attributes { return &v }

//ACL设置，为appId到其配置的权限的映射
type AclConf map[string][]CannedAcl

func AclConfPtr(v AclConf) *AclConf { return &v }

type Dictionary map[string]*Datum

func DictionaryPtr(v Dictionary) *Dictionary { return &v }

type EditDictionary map[string]*EditDatum

func EditDictionaryPtr(v EditDictionary) *EditDictionary { return &v }

type Value struct {
	BoolValue      *bool     `thrift:"boolValue,1" json:"boolValue"`
	Int8Value      *int8     `thrift:"int8Value,2" json:"int8Value"`
	Int16Value     *int16    `thrift:"int16Value,3" json:"int16Value"`
	Int32Value     *int32    `thrift:"int32Value,4" json:"int32Value"`
	Int64Value     *int64    `thrift:"int64Value,5" json:"int64Value"`
	DoubleValue    *float64  `thrift:"doubleValue,6" json:"doubleValue"`
	StringValue    *string   `thrift:"stringValue,7" json:"stringValue"`
	BinaryValue    []byte    `thrift:"binaryValue,8" json:"binaryValue"`
	BoolSetValue   []bool    `thrift:"boolSetValue,9" json:"boolSetValue"`
	Int8SetValue   []int8    `thrift:"int8SetValue,10" json:"int8SetValue"`
	Int16SetValue  []int16   `thrift:"int16SetValue,11" json:"int16SetValue"`
	Int32SetValue  []int32   `thrift:"int32SetValue,12" json:"int32SetValue"`
	Int64SetValue  []int64   `thrift:"int64SetValue,13" json:"int64SetValue"`
	DoubleSetValue []float64 `thrift:"doubleSetValue,14" json:"doubleSetValue"`
	StringSetValue []string  `thrift:"stringSetValue,15" json:"stringSetValue"`
	BinarySetValue [][]byte  `thrift:"binarySetValue,16" json:"binarySetValue"`
	// unused fields # 17 to 19
	NullValue *bool `thrift:"nullValue,20" json:"nullValue"`
}

func NewValue() *Value {
	return &Value{}
}

var Value_BoolValue_DEFAULT bool

func (p *Value) GetBoolValue() bool {
	if !p.IsSetBoolValue() {
		return Value_BoolValue_DEFAULT
	}
	return *p.BoolValue
}

var Value_Int8Value_DEFAULT int8

func (p *Value) GetInt8Value() int8 {
	if !p.IsSetInt8Value() {
		return Value_Int8Value_DEFAULT
	}
	return *p.Int8Value
}

var Value_Int16Value_DEFAULT int16

func (p *Value) GetInt16Value() int16 {
	if !p.IsSetInt16Value() {
		return Value_Int16Value_DEFAULT
	}
	return *p.Int16Value
}

var Value_Int32Value_DEFAULT int32

func (p *Value) GetInt32Value() int32 {
	if !p.IsSetInt32Value() {
		return Value_Int32Value_DEFAULT
	}
	return *p.Int32Value
}

var Value_Int64Value_DEFAULT int64

func (p *Value) GetInt64Value() int64 {
	if !p.IsSetInt64Value() {
		return Value_Int64Value_DEFAULT
	}
	return *p.Int64Value
}

var Value_DoubleValue_DEFAULT float64

func (p *Value) GetDoubleValue() float64 {
	if !p.IsSetDoubleValue() {
		return Value_DoubleValue_DEFAULT
	}
	return *p.DoubleValue
}

var Value_StringValue_DEFAULT string

func (p *Value) GetStringValue() string {
	if !p.IsSetStringValue() {
		return Value_StringValue_DEFAULT
	}
	return *p.StringValue
}

var Value_BinaryValue_DEFAULT []byte

func (p *Value) GetBinaryValue() []byte {
	return p.BinaryValue
}

var Value_BoolSetValue_DEFAULT []bool

func (p *Value) GetBoolSetValue() []bool {
	return p.BoolSetValue
}

var Value_Int8SetValue_DEFAULT []int8

func (p *Value) GetInt8SetValue() []int8 {
	return p.Int8SetValue
}

var Value_Int16SetValue_DEFAULT []int16

func (p *Value) GetInt16SetValue() []int16 {
	return p.Int16SetValue
}

var Value_Int32SetValue_DEFAULT []int32

func (p *Value) GetInt32SetValue() []int32 {
	return p.Int32SetValue
}

var Value_Int64SetValue_DEFAULT []int64

func (p *Value) GetInt64SetValue() []int64 {
	return p.Int64SetValue
}

var Value_DoubleSetValue_DEFAULT []float64

func (p *Value) GetDoubleSetValue() []float64 {
	return p.DoubleSetValue
}

var Value_StringSetValue_DEFAULT []string

func (p *Value) GetStringSetValue() []string {
	return p.StringSetValue
}

var Value_BinarySetValue_DEFAULT [][]byte

func (p *Value) GetBinarySetValue() [][]byte {
	return p.BinarySetValue
}

var Value_NullValue_DEFAULT bool

func (p *Value) GetNullValue() bool {
	if !p.IsSetNullValue() {
		return Value_NullValue_DEFAULT
	}
	return *p.NullValue
}
func (p *Value) IsSetBoolValue() bool {
	return p.BoolValue != nil
}

func (p *Value) IsSetInt8Value() bool {
	return p.Int8Value != nil
}

func (p *Value) IsSetInt16Value() bool {
	return p.Int16Value != nil
}

func (p *Value) IsSetInt32Value() bool {
	return p.Int32Value != nil
}

func (p *Value) IsSetInt64Value() bool {
	return p.Int64Value != nil
}

func (p *Value) IsSetDoubleValue() bool {
	return p.DoubleValue != nil
}

func (p *Value) IsSetStringValue() bool {
	return p.StringValue != nil
}

func (p *Value) IsSetBinaryValue() bool {
	return p.BinaryValue != nil
}

func (p *Value) IsSetBoolSetValue() bool {
	return p.BoolSetValue != nil
}

func (p *Value) IsSetInt8SetValue() bool {
	return p.Int8SetValue != nil
}

func (p *Value) IsSetInt16SetValue() bool {
	return p.Int16SetValue != nil
}

func (p *Value) IsSetInt32SetValue() bool {
	return p.Int32SetValue != nil
}

func (p *Value) IsSetInt64SetValue() bool {
	return p.Int64SetValue != nil
}

func (p *Value) IsSetDoubleSetValue() bool {
	return p.DoubleSetValue != nil
}

func (p *Value) IsSetStringSetValue() bool {
	return p.StringSetValue != nil
}

func (p *Value) IsSetBinarySetValue() bool {
	return p.BinarySetValue != nil
}

func (p *Value) IsSetNullValue() bool {
	return p.NullValue != nil
}

func (p *Value) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Value) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.BoolValue = &v
	}
	return nil
}

func (p *Value) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.Int8Value = &temp
	}
	return nil
}

func (p *Value) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Int16Value = &v
	}
	return nil
}

func (p *Value) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Int32Value = &v
	}
	return nil
}

func (p *Value) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Int64Value = &v
	}
	return nil
}

func (p *Value) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.DoubleValue = &v
	}
	return nil
}

func (p *Value) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.StringValue = &v
	}
	return nil
}

func (p *Value) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.BinaryValue = v
	}
	return nil
}

func (p *Value) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]bool, 0, size)
	p.BoolSetValue = tSlice
	for i := 0; i < size; i++ {
		var _elem0 bool
		if v, err := iprot.ReadBool(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.BoolSetValue = append(p.BoolSetValue, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Value) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int8, 0, size)
	p.Int8SetValue = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int8
		if v, err := iprot.ReadByte(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := int8(v)
			_elem1 = temp
		}
		p.Int8SetValue = append(p.Int8SetValue, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Value) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int16, 0, size)
	p.Int16SetValue = tSlice
	for i := 0; i < size; i++ {
		var _elem2 int16
		if v, err := iprot.ReadI16(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem2 = v
		}
		p.Int16SetValue = append(p.Int16SetValue, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Value) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.Int32SetValue = tSlice
	for i := 0; i < size; i++ {
		var _elem3 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem3 = v
		}
		p.Int32SetValue = append(p.Int32SetValue, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Value) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.Int64SetValue = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem4 = v
		}
		p.Int64SetValue = append(p.Int64SetValue, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Value) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]float64, 0, size)
	p.DoubleSetValue = tSlice
	for i := 0; i < size; i++ {
		var _elem5 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem5 = v
		}
		p.DoubleSetValue = append(p.DoubleSetValue, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Value) ReadField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.StringSetValue = tSlice
	for i := 0; i < size; i++ {
		var _elem6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem6 = v
		}
		p.StringSetValue = append(p.StringSetValue, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Value) ReadField16(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([][]byte, 0, size)
	p.BinarySetValue = tSlice
	for i := 0; i < size; i++ {
		var _elem7 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem7 = v
		}
		p.BinarySetValue = append(p.BinarySetValue, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Value) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.NullValue = &v
	}
	return nil
}

func (p *Value) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Value"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Value) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolValue() {
		if err := oprot.WriteFieldBegin("boolValue", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:boolValue: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.BoolValue)); err != nil {
			return fmt.Errorf("%T.boolValue (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:boolValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt8Value() {
		if err := oprot.WriteFieldBegin("int8Value", thrift.BYTE, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:int8Value: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.Int8Value)); err != nil {
			return fmt.Errorf("%T.int8Value (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:int8Value: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt16Value() {
		if err := oprot.WriteFieldBegin("int16Value", thrift.I16, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:int16Value: %s", p, err)
		}
		if err := oprot.WriteI16(int16(*p.Int16Value)); err != nil {
			return fmt.Errorf("%T.int16Value (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:int16Value: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt32Value() {
		if err := oprot.WriteFieldBegin("int32Value", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:int32Value: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Int32Value)); err != nil {
			return fmt.Errorf("%T.int32Value (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:int32Value: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt64Value() {
		if err := oprot.WriteFieldBegin("int64Value", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:int64Value: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Int64Value)); err != nil {
			return fmt.Errorf("%T.int64Value (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:int64Value: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDoubleValue() {
		if err := oprot.WriteFieldBegin("doubleValue", thrift.DOUBLE, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:doubleValue: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.DoubleValue)); err != nil {
			return fmt.Errorf("%T.doubleValue (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:doubleValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue() {
		if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:stringValue: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.StringValue)); err != nil {
			return fmt.Errorf("%T.stringValue (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:stringValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinaryValue() {
		if err := oprot.WriteFieldBegin("binaryValue", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:binaryValue: %s", p, err)
		}
		if err := oprot.WriteBinary(p.BinaryValue); err != nil {
			return fmt.Errorf("%T.binaryValue (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:binaryValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolSetValue() {
		if err := oprot.WriteFieldBegin("boolSetValue", thrift.LIST, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:boolSetValue: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.BOOL, len(p.BoolSetValue)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.BoolSetValue {
			if err := oprot.WriteBool(bool(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:boolSetValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt8SetValue() {
		if err := oprot.WriteFieldBegin("int8SetValue", thrift.LIST, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:int8SetValue: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.BYTE, len(p.Int8SetValue)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Int8SetValue {
			if err := oprot.WriteByte(byte(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:int8SetValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt16SetValue() {
		if err := oprot.WriteFieldBegin("int16SetValue", thrift.LIST, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:int16SetValue: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I16, len(p.Int16SetValue)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Int16SetValue {
			if err := oprot.WriteI16(int16(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:int16SetValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt32SetValue() {
		if err := oprot.WriteFieldBegin("int32SetValue", thrift.LIST, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:int32SetValue: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.Int32SetValue)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Int32SetValue {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:int32SetValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt64SetValue() {
		if err := oprot.WriteFieldBegin("int64SetValue", thrift.LIST, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:int64SetValue: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Int64SetValue)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Int64SetValue {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:int64SetValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetDoubleSetValue() {
		if err := oprot.WriteFieldBegin("doubleSetValue", thrift.LIST, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:doubleSetValue: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.DoubleSetValue)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.DoubleSetValue {
			if err := oprot.WriteDouble(float64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:doubleSetValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringSetValue() {
		if err := oprot.WriteFieldBegin("stringSetValue", thrift.LIST, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:stringSetValue: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.StringSetValue)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.StringSetValue {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:stringSetValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinarySetValue() {
		if err := oprot.WriteFieldBegin("binarySetValue", thrift.LIST, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:binarySetValue: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.BinarySetValue)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.BinarySetValue {
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:binarySetValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetNullValue() {
		if err := oprot.WriteFieldBegin("nullValue", thrift.BOOL, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:nullValue: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.NullValue)); err != nil {
			return fmt.Errorf("%T.nullValue (20) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:nullValue: %s", p, err)
		}
	}
	return err
}

func (p *Value) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Value(%+v)", *p)
}

type Datum struct {
	TypeA1 *DataType `thrift:"type,1" json:"type"`
	Value  *Value    `thrift:"value,2" json:"value"`
}

func NewDatum() *Datum {
	return &Datum{}
}

var Datum_TypeA1_DEFAULT DataType

func (p *Datum) GetTypeA1() DataType {
	if !p.IsSetTypeA1() {
		return Datum_TypeA1_DEFAULT
	}
	return *p.TypeA1
}

var Datum_Value_DEFAULT *Value

func (p *Datum) GetValue() *Value {
	if !p.IsSetValue() {
		return Datum_Value_DEFAULT
	}
	return p.Value
}
func (p *Datum) IsSetTypeA1() bool {
	return p.TypeA1 != nil
}

func (p *Datum) IsSetValue() bool {
	return p.Value != nil
}

func (p *Datum) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Datum) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := DataType(v)
		p.TypeA1 = &temp
	}
	return nil
}

func (p *Datum) ReadField2(iprot thrift.TProtocol) error {
	p.Value = &Value{}
	if err := p.Value.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Value, err)
	}
	return nil
}

func (p *Datum) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Datum"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Datum) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeA1() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.TypeA1)); err != nil {
			return fmt.Errorf("%T.type (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:type: %s", p, err)
		}
	}
	return err
}

func (p *Datum) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:value: %s", p, err)
		}
		if err := p.Value.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Value, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:value: %s", p, err)
		}
	}
	return err
}

func (p *Datum) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Datum(%+v)", *p)
}

type ProvisionThroughput struct {
	ReadCapacity  *int64 `thrift:"readCapacity,1" json:"readCapacity"`
	WriteCapacity *int64 `thrift:"writeCapacity,2" json:"writeCapacity"`
}

func NewProvisionThroughput() *ProvisionThroughput {
	return &ProvisionThroughput{}
}

var ProvisionThroughput_ReadCapacity_DEFAULT int64

func (p *ProvisionThroughput) GetReadCapacity() int64 {
	if !p.IsSetReadCapacity() {
		return ProvisionThroughput_ReadCapacity_DEFAULT
	}
	return *p.ReadCapacity
}

var ProvisionThroughput_WriteCapacity_DEFAULT int64

func (p *ProvisionThroughput) GetWriteCapacity() int64 {
	if !p.IsSetWriteCapacity() {
		return ProvisionThroughput_WriteCapacity_DEFAULT
	}
	return *p.WriteCapacity
}
func (p *ProvisionThroughput) IsSetReadCapacity() bool {
	return p.ReadCapacity != nil
}

func (p *ProvisionThroughput) IsSetWriteCapacity() bool {
	return p.WriteCapacity != nil
}

func (p *ProvisionThroughput) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ProvisionThroughput) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReadCapacity = &v
	}
	return nil
}

func (p *ProvisionThroughput) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.WriteCapacity = &v
	}
	return nil
}

func (p *ProvisionThroughput) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProvisionThroughput"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ProvisionThroughput) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadCapacity() {
		if err := oprot.WriteFieldBegin("readCapacity", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:readCapacity: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ReadCapacity)); err != nil {
			return fmt.Errorf("%T.readCapacity (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:readCapacity: %s", p, err)
		}
	}
	return err
}

func (p *ProvisionThroughput) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteCapacity() {
		if err := oprot.WriteFieldBegin("writeCapacity", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:writeCapacity: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.WriteCapacity)); err != nil {
			return fmt.Errorf("%T.writeCapacity (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:writeCapacity: %s", p, err)
		}
	}
	return err
}

func (p *ProvisionThroughput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProvisionThroughput(%+v)", *p)
}

type TableQuota struct {
	Size *int64 `thrift:"size,1" json:"size"`
}

func NewTableQuota() *TableQuota {
	return &TableQuota{}
}

var TableQuota_Size_DEFAULT int64

func (p *TableQuota) GetSize() int64 {
	if !p.IsSetSize() {
		return TableQuota_Size_DEFAULT
	}
	return *p.Size
}
func (p *TableQuota) IsSetSize() bool {
	return p.Size != nil
}

func (p *TableQuota) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TableQuota) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Size = &v
	}
	return nil
}

func (p *TableQuota) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableQuota"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TableQuota) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err := oprot.WriteFieldBegin("size", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:size: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Size)); err != nil {
			return fmt.Errorf("%T.size (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:size: %s", p, err)
		}
	}
	return err
}

func (p *TableQuota) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableQuota(%+v)", *p)
}

type KeySpec struct {
	Attribute *string `thrift:"attribute,1" json:"attribute"`
	Asc       bool    `thrift:"asc,2" json:"asc"`
}

func NewKeySpec() *KeySpec {
	return &KeySpec{
		Asc: true,
	}
}

var KeySpec_Attribute_DEFAULT string

func (p *KeySpec) GetAttribute() string {
	if !p.IsSetAttribute() {
		return KeySpec_Attribute_DEFAULT
	}
	return *p.Attribute
}

var KeySpec_Asc_DEFAULT bool = true

func (p *KeySpec) GetAsc() bool {
	return p.Asc
}
func (p *KeySpec) IsSetAttribute() bool {
	return p.Attribute != nil
}

func (p *KeySpec) IsSetAsc() bool {
	return p.Asc != KeySpec_Asc_DEFAULT
}

func (p *KeySpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *KeySpec) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Attribute = &v
	}
	return nil
}

func (p *KeySpec) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Asc = v
	}
	return nil
}

func (p *KeySpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KeySpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *KeySpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttribute() {
		if err := oprot.WriteFieldBegin("attribute", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:attribute: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Attribute)); err != nil {
			return fmt.Errorf("%T.attribute (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:attribute: %s", p, err)
		}
	}
	return err
}

func (p *KeySpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAsc() {
		if err := oprot.WriteFieldBegin("asc", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:asc: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Asc)); err != nil {
			return fmt.Errorf("%T.asc (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:asc: %s", p, err)
		}
	}
	return err
}

func (p *KeySpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeySpec(%+v)", *p)
}

type LocalSecondaryIndexSpec struct {
	IndexSchema     IndexSpec                     `thrift:"indexSchema,1" json:"indexSchema"`
	Projections     Attributes                    `thrift:"projections,2" json:"projections"`
	ConsistencyMode SecondaryIndexConsistencyMode `thrift:"consistencyMode,3" json:"consistencyMode"`
	Unique          bool                          `thrift:"unique,4" json:"unique"`
}

func NewLocalSecondaryIndexSpec() *LocalSecondaryIndexSpec {
	return &LocalSecondaryIndexSpec{
		ConsistencyMode: 0,
	}
}

var LocalSecondaryIndexSpec_IndexSchema_DEFAULT IndexSpec

func (p *LocalSecondaryIndexSpec) GetIndexSchema() IndexSpec {
	return p.IndexSchema
}

var LocalSecondaryIndexSpec_Projections_DEFAULT Attributes

func (p *LocalSecondaryIndexSpec) GetProjections() Attributes {
	return p.Projections
}

var LocalSecondaryIndexSpec_ConsistencyMode_DEFAULT SecondaryIndexConsistencyMode = 0

func (p *LocalSecondaryIndexSpec) GetConsistencyMode() SecondaryIndexConsistencyMode {
	return p.ConsistencyMode
}

var LocalSecondaryIndexSpec_Unique_DEFAULT bool = false

func (p *LocalSecondaryIndexSpec) GetUnique() bool {
	return p.Unique
}
func (p *LocalSecondaryIndexSpec) IsSetIndexSchema() bool {
	return p.IndexSchema != nil
}

func (p *LocalSecondaryIndexSpec) IsSetProjections() bool {
	return p.Projections != nil
}

func (p *LocalSecondaryIndexSpec) IsSetConsistencyMode() bool {
	return p.ConsistencyMode != LocalSecondaryIndexSpec_ConsistencyMode_DEFAULT
}

func (p *LocalSecondaryIndexSpec) IsSetUnique() bool {
	return p.Unique != LocalSecondaryIndexSpec_Unique_DEFAULT
}

func (p *LocalSecondaryIndexSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LocalSecondaryIndexSpec) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make(IndexSpec, 0, size)
	p.IndexSchema = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &KeySpec{
			Asc: true,
		}
		if err := _elem8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem8, err)
		}
		p.IndexSchema = append(p.IndexSchema, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *LocalSecondaryIndexSpec) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make(Attributes, 0, size)
	p.Projections = tSlice
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem9 = v
		}
		p.Projections = append(p.Projections, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *LocalSecondaryIndexSpec) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := SecondaryIndexConsistencyMode(v)
		p.ConsistencyMode = temp
	}
	return nil
}

func (p *LocalSecondaryIndexSpec) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Unique = v
	}
	return nil
}

func (p *LocalSecondaryIndexSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LocalSecondaryIndexSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LocalSecondaryIndexSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexSchema() {
		if err := oprot.WriteFieldBegin("indexSchema", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:indexSchema: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.IndexSchema)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.IndexSchema {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:indexSchema: %s", p, err)
		}
	}
	return err
}

func (p *LocalSecondaryIndexSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProjections() {
		if err := oprot.WriteFieldBegin("projections", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:projections: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Projections)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Projections {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:projections: %s", p, err)
		}
	}
	return err
}

func (p *LocalSecondaryIndexSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsistencyMode() {
		if err := oprot.WriteFieldBegin("consistencyMode", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:consistencyMode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ConsistencyMode)); err != nil {
			return fmt.Errorf("%T.consistencyMode (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:consistencyMode: %s", p, err)
		}
	}
	return err
}

func (p *LocalSecondaryIndexSpec) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnique() {
		if err := oprot.WriteFieldBegin("unique", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:unique: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Unique)); err != nil {
			return fmt.Errorf("%T.unique (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:unique: %s", p, err)
		}
	}
	return err
}

func (p *LocalSecondaryIndexSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocalSecondaryIndexSpec(%+v)", *p)
}

type EntityGroupSpec struct {
	Attributes IndexSpec `thrift:"attributes,1" json:"attributes"`
	EnableHash bool      `thrift:"enableHash,2" json:"enableHash"`
}

func NewEntityGroupSpec() *EntityGroupSpec {
	return &EntityGroupSpec{
		EnableHash: true,
	}
}

var EntityGroupSpec_Attributes_DEFAULT IndexSpec

func (p *EntityGroupSpec) GetAttributes() IndexSpec {
	return p.Attributes
}

var EntityGroupSpec_EnableHash_DEFAULT bool = true

func (p *EntityGroupSpec) GetEnableHash() bool {
	return p.EnableHash
}
func (p *EntityGroupSpec) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *EntityGroupSpec) IsSetEnableHash() bool {
	return p.EnableHash != EntityGroupSpec_EnableHash_DEFAULT
}

func (p *EntityGroupSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EntityGroupSpec) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make(IndexSpec, 0, size)
	p.Attributes = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &KeySpec{
			Asc: true,
		}
		if err := _elem10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem10, err)
		}
		p.Attributes = append(p.Attributes, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *EntityGroupSpec) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.EnableHash = v
	}
	return nil
}

func (p *EntityGroupSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EntityGroupSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EntityGroupSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:attributes: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Attributes {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:attributes: %s", p, err)
		}
	}
	return err
}

func (p *EntityGroupSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableHash() {
		if err := oprot.WriteFieldBegin("enableHash", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:enableHash: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.EnableHash)); err != nil {
			return fmt.Errorf("%T.enableHash (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:enableHash: %s", p, err)
		}
	}
	return err
}

func (p *EntityGroupSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EntityGroupSpec(%+v)", *p)
}

type TableSchema struct {
	Version          *int32                              `thrift:"version,1" json:"version"`
	EntityGroup      *EntityGroupSpec                    `thrift:"entityGroup,2" json:"entityGroup"`
	PrimaryIndex     IndexSpec                           `thrift:"primaryIndex,3" json:"primaryIndex"`
	SecondaryIndexes map[string]*LocalSecondaryIndexSpec `thrift:"secondaryIndexes,4" json:"secondaryIndexes"`
	Attributes       map[string]DataType                 `thrift:"attributes,5" json:"attributes"`
	Ttl              int32                               `thrift:"ttl,6" json:"ttl"`
	PreSplits        int32                               `thrift:"preSplits,7" json:"preSplits"`
}

func NewTableSchema() *TableSchema {
	return &TableSchema{
		Ttl: -1,

		PreSplits: 1,
	}
}

var TableSchema_Version_DEFAULT int32

func (p *TableSchema) GetVersion() int32 {
	if !p.IsSetVersion() {
		return TableSchema_Version_DEFAULT
	}
	return *p.Version
}

var TableSchema_EntityGroup_DEFAULT *EntityGroupSpec

func (p *TableSchema) GetEntityGroup() *EntityGroupSpec {
	if !p.IsSetEntityGroup() {
		return TableSchema_EntityGroup_DEFAULT
	}
	return p.EntityGroup
}

func (p *TableSchema) GetPrimaryIndex() IndexSpec {
	return p.PrimaryIndex
}

var TableSchema_SecondaryIndexes_DEFAULT map[string]*LocalSecondaryIndexSpec

func (p *TableSchema) GetSecondaryIndexes() map[string]*LocalSecondaryIndexSpec {
	return p.SecondaryIndexes
}

var TableSchema_Attributes_DEFAULT map[string]DataType

func (p *TableSchema) GetAttributes() map[string]DataType {
	return p.Attributes
}

var TableSchema_Ttl_DEFAULT int32 = -1

func (p *TableSchema) GetTtl() int32 {
	return p.Ttl
}

var TableSchema_PreSplits_DEFAULT int32 = 1

func (p *TableSchema) GetPreSplits() int32 {
	return p.PreSplits
}
func (p *TableSchema) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TableSchema) IsSetEntityGroup() bool {
	return p.EntityGroup != nil
}

func (p *TableSchema) IsSetSecondaryIndexes() bool {
	return p.SecondaryIndexes != nil
}

func (p *TableSchema) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TableSchema) IsSetTtl() bool {
	return p.Ttl != TableSchema_Ttl_DEFAULT
}

func (p *TableSchema) IsSetPreSplits() bool {
	return p.PreSplits != TableSchema_PreSplits_DEFAULT
}

func (p *TableSchema) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TableSchema) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Version = &v
	}
	return nil
}

func (p *TableSchema) ReadField2(iprot thrift.TProtocol) error {
	p.EntityGroup = &EntityGroupSpec{
		EnableHash: true,
	}
	if err := p.EntityGroup.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EntityGroup, err)
	}
	return nil
}

func (p *TableSchema) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make(IndexSpec, 0, size)
	p.PrimaryIndex = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &KeySpec{
			Asc: true,
		}
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11, err)
		}
		p.PrimaryIndex = append(p.PrimaryIndex, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TableSchema) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*LocalSecondaryIndexSpec, size)
	p.SecondaryIndexes = tMap
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key12 = v
		}
		_val13 := &LocalSecondaryIndexSpec{
			ConsistencyMode: 0,
		}
		if err := _val13.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val13, err)
		}
		p.SecondaryIndexes[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TableSchema) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]DataType, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key14 = v
		}
		var _val15 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := DataType(v)
			_val15 = temp
		}
		p.Attributes[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TableSchema) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Ttl = v
	}
	return nil
}

func (p *TableSchema) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.PreSplits = v
	}
	return nil
}

func (p *TableSchema) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableSchema"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TableSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin("version", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:version: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Version)); err != nil {
			return fmt.Errorf("%T.version (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:version: %s", p, err)
		}
	}
	return err
}

func (p *TableSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityGroup() {
		if err := oprot.WriteFieldBegin("entityGroup", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:entityGroup: %s", p, err)
		}
		if err := p.EntityGroup.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.EntityGroup, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:entityGroup: %s", p, err)
		}
	}
	return err
}

func (p *TableSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("primaryIndex", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:primaryIndex: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PrimaryIndex)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PrimaryIndex {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:primaryIndex: %s", p, err)
	}
	return err
}

func (p *TableSchema) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecondaryIndexes() {
		if err := oprot.WriteFieldBegin("secondaryIndexes", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:secondaryIndexes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.SecondaryIndexes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.SecondaryIndexes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:secondaryIndexes: %s", p, err)
		}
	}
	return err
}

func (p *TableSchema) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TableSchema) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTtl() {
		if err := oprot.WriteFieldBegin("ttl", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:ttl: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Ttl)); err != nil {
			return fmt.Errorf("%T.ttl (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:ttl: %s", p, err)
		}
	}
	return err
}

func (p *TableSchema) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreSplits() {
		if err := oprot.WriteFieldBegin("preSplits", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:preSplits: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.PreSplits)); err != nil {
			return fmt.Errorf("%T.preSplits (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:preSplits: %s", p, err)
		}
	}
	return err
}

func (p *TableSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableSchema(%+v)", *p)
}

type TableMetadata struct {
	TableId                 *string              `thrift:"tableId,1" json:"tableId"`
	DeveloperId             *string              `thrift:"developerId,2" json:"developerId"`
	AppAcl                  AclConf              `thrift:"appAcl,3" json:"appAcl"`
	Quota                   *TableQuota          `thrift:"quota,4" json:"quota"`
	Throughput              *ProvisionThroughput `thrift:"throughput,5" json:"throughput"`
	Description             *string              `thrift:"description,6" json:"description"`
	EnableScanInGlobalOrder *bool                `thrift:"enableScanInGlobalOrder,7" json:"enableScanInGlobalOrder"`
	Replication             *ReplicationSpec     `thrift:"replication,8" json:"replication"`
	EnableSysSnapshot       *bool                `thrift:"enableSysSnapshot,9" json:"enableSysSnapshot"`
}

func NewTableMetadata() *TableMetadata {
	return &TableMetadata{}
}

var TableMetadata_TableId_DEFAULT string

func (p *TableMetadata) GetTableId() string {
	if !p.IsSetTableId() {
		return TableMetadata_TableId_DEFAULT
	}
	return *p.TableId
}

var TableMetadata_DeveloperId_DEFAULT string

func (p *TableMetadata) GetDeveloperId() string {
	if !p.IsSetDeveloperId() {
		return TableMetadata_DeveloperId_DEFAULT
	}
	return *p.DeveloperId
}

var TableMetadata_AppAcl_DEFAULT AclConf

func (p *TableMetadata) GetAppAcl() AclConf {
	return p.AppAcl
}

var TableMetadata_Quota_DEFAULT *TableQuota

func (p *TableMetadata) GetQuota() *TableQuota {
	if !p.IsSetQuota() {
		return TableMetadata_Quota_DEFAULT
	}
	return p.Quota
}

var TableMetadata_Throughput_DEFAULT *ProvisionThroughput

func (p *TableMetadata) GetThroughput() *ProvisionThroughput {
	if !p.IsSetThroughput() {
		return TableMetadata_Throughput_DEFAULT
	}
	return p.Throughput
}

var TableMetadata_Description_DEFAULT string

func (p *TableMetadata) GetDescription() string {
	if !p.IsSetDescription() {
		return TableMetadata_Description_DEFAULT
	}
	return *p.Description
}

var TableMetadata_EnableScanInGlobalOrder_DEFAULT bool

func (p *TableMetadata) GetEnableScanInGlobalOrder() bool {
	if !p.IsSetEnableScanInGlobalOrder() {
		return TableMetadata_EnableScanInGlobalOrder_DEFAULT
	}
	return *p.EnableScanInGlobalOrder
}

var TableMetadata_Replication_DEFAULT ReplicationSpec

func (p *TableMetadata) GetReplication() ReplicationSpec {
	if !p.IsSetReplication() {
		return TableMetadata_Replication_DEFAULT
	}
	return *p.Replication
}

var TableMetadata_EnableSysSnapshot_DEFAULT bool

func (p *TableMetadata) GetEnableSysSnapshot() bool {
	if !p.IsSetEnableSysSnapshot() {
		return TableMetadata_EnableSysSnapshot_DEFAULT
	}
	return *p.EnableSysSnapshot
}
func (p *TableMetadata) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TableMetadata) IsSetDeveloperId() bool {
	return p.DeveloperId != nil
}

func (p *TableMetadata) IsSetAppAcl() bool {
	return p.AppAcl != nil
}

func (p *TableMetadata) IsSetQuota() bool {
	return p.Quota != nil
}

func (p *TableMetadata) IsSetThroughput() bool {
	return p.Throughput != nil
}

func (p *TableMetadata) IsSetDescription() bool {
	return p.Description != nil
}

func (p *TableMetadata) IsSetEnableScanInGlobalOrder() bool {
	return p.EnableScanInGlobalOrder != nil
}

func (p *TableMetadata) IsSetReplication() bool {
	return p.Replication != nil
}

func (p *TableMetadata) IsSetEnableSysSnapshot() bool {
	return p.EnableSysSnapshot != nil
}

func (p *TableMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TableMetadata) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableId = &v
	}
	return nil
}

func (p *TableMetadata) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DeveloperId = &v
	}
	return nil
}

func (p *TableMetadata) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(AclConf, size)
	p.AppAcl = tMap
	for i := 0; i < size; i++ {
		var _key16 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key16 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]CannedAcl, 0, size)
		_val17 := tSlice
		for i := 0; i < size; i++ {
			var _elem18 CannedAcl
			if v, err := iprot.ReadI32(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				temp := CannedAcl(v)
				_elem18 = temp
			}
			_val17 = append(_val17, _elem18)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.AppAcl[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TableMetadata) ReadField4(iprot thrift.TProtocol) error {
	p.Quota = &TableQuota{}
	if err := p.Quota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Quota, err)
	}
	return nil
}

func (p *TableMetadata) ReadField5(iprot thrift.TProtocol) error {
	p.Throughput = &ProvisionThroughput{}
	if err := p.Throughput.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Throughput, err)
	}
	return nil
}

func (p *TableMetadata) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *TableMetadata) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.EnableScanInGlobalOrder = &v
	}
	return nil
}

func (p *TableMetadata) ReadField8(iprot thrift.TProtocol) error {
	p.Replication = &ReplicationSpec{}
	if err := p.Replication.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Replication, err)
	}
	return nil
}

func (p *TableMetadata) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.EnableSysSnapshot = &v
	}
	return nil
}

func (p *TableMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableMetadata"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TableMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err := oprot.WriteFieldBegin("tableId", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tableId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableId)); err != nil {
			return fmt.Errorf("%T.tableId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tableId: %s", p, err)
		}
	}
	return err
}

func (p *TableMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeveloperId() {
		if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:developerId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DeveloperId)); err != nil {
			return fmt.Errorf("%T.developerId (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:developerId: %s", p, err)
		}
	}
	return err
}

func (p *TableMetadata) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppAcl() {
		if err := oprot.WriteFieldBegin("appAcl", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:appAcl: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.AppAcl)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.AppAcl {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
				return fmt.Errorf("error writing list begin: %s", err)
			}
			for _, v := range v {
				if err := oprot.WriteI32(int32(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:appAcl: %s", p, err)
		}
	}
	return err
}

func (p *TableMetadata) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuota() {
		if err := oprot.WriteFieldBegin("quota", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:quota: %s", p, err)
		}
		if err := p.Quota.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Quota, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:quota: %s", p, err)
		}
	}
	return err
}

func (p *TableMetadata) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetThroughput() {
		if err := oprot.WriteFieldBegin("throughput", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:throughput: %s", p, err)
		}
		if err := p.Throughput.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Throughput, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:throughput: %s", p, err)
		}
	}
	return err
}

func (p *TableMetadata) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:description: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Description)); err != nil {
			return fmt.Errorf("%T.description (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:description: %s", p, err)
		}
	}
	return err
}

func (p *TableMetadata) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableScanInGlobalOrder() {
		if err := oprot.WriteFieldBegin("enableScanInGlobalOrder", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:enableScanInGlobalOrder: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.EnableScanInGlobalOrder)); err != nil {
			return fmt.Errorf("%T.enableScanInGlobalOrder (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:enableScanInGlobalOrder: %s", p, err)
		}
	}
	return err
}

func (p *TableMetadata) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplication() {
		if err := oprot.WriteFieldBegin("replication", thrift.STRUCT, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:replication: %s", p, err)
		}
		if err := p.Replication.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Replication, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:replication: %s", p, err)
		}
	}
	return err
}

func (p *TableMetadata) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSysSnapshot() {
		if err := oprot.WriteFieldBegin("enableSysSnapshot", thrift.BOOL, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:enableSysSnapshot: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.EnableSysSnapshot)); err != nil {
			return fmt.Errorf("%T.enableSysSnapshot (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:enableSysSnapshot: %s", p, err)
		}
	}
	return err
}

func (p *TableMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableMetadata(%+v)", *p)
}

type TableSpec struct {
	Schema   *TableSchema   `thrift:"schema,1" json:"schema"`
	Metadata *TableMetadata `thrift:"metadata,2" json:"metadata"`
}

func NewTableSpec() *TableSpec {
	return &TableSpec{}
}

var TableSpec_Schema_DEFAULT *TableSchema

func (p *TableSpec) GetSchema() *TableSchema {
	if !p.IsSetSchema() {
		return TableSpec_Schema_DEFAULT
	}
	return p.Schema
}

var TableSpec_Metadata_DEFAULT *TableMetadata

func (p *TableSpec) GetMetadata() *TableMetadata {
	if !p.IsSetMetadata() {
		return TableSpec_Metadata_DEFAULT
	}
	return p.Metadata
}
func (p *TableSpec) IsSetSchema() bool {
	return p.Schema != nil
}

func (p *TableSpec) IsSetMetadata() bool {
	return p.Metadata != nil
}

func (p *TableSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TableSpec) ReadField1(iprot thrift.TProtocol) error {
	p.Schema = &TableSchema{
		Ttl: -1,

		PreSplits: 1,
	}
	if err := p.Schema.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Schema, err)
	}
	return nil
}

func (p *TableSpec) ReadField2(iprot thrift.TProtocol) error {
	p.Metadata = &TableMetadata{}
	if err := p.Metadata.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Metadata, err)
	}
	return nil
}

func (p *TableSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TableSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchema() {
		if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:schema: %s", p, err)
		}
		if err := p.Schema.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Schema, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:schema: %s", p, err)
		}
	}
	return err
}

func (p *TableSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetadata() {
		if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:metadata: %s", p, err)
		}
		if err := p.Metadata.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Metadata, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:metadata: %s", p, err)
		}
	}
	return err
}

func (p *TableSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableSpec(%+v)", *p)
}

type ReplicationProvisionThroughput struct {
	ConsumeCapacity *int64 `thrift:"consumeCapacity,1" json:"consumeCapacity"`
	CommitCapacity  *int64 `thrift:"commitCapacity,2" json:"commitCapacity"`
}

func NewReplicationProvisionThroughput() *ReplicationProvisionThroughput {
	return &ReplicationProvisionThroughput{}
}

var ReplicationProvisionThroughput_ConsumeCapacity_DEFAULT int64

func (p *ReplicationProvisionThroughput) GetConsumeCapacity() int64 {
	if !p.IsSetConsumeCapacity() {
		return ReplicationProvisionThroughput_ConsumeCapacity_DEFAULT
	}
	return *p.ConsumeCapacity
}

var ReplicationProvisionThroughput_CommitCapacity_DEFAULT int64

func (p *ReplicationProvisionThroughput) GetCommitCapacity() int64 {
	if !p.IsSetCommitCapacity() {
		return ReplicationProvisionThroughput_CommitCapacity_DEFAULT
	}
	return *p.CommitCapacity
}
func (p *ReplicationProvisionThroughput) IsSetConsumeCapacity() bool {
	return p.ConsumeCapacity != nil
}

func (p *ReplicationProvisionThroughput) IsSetCommitCapacity() bool {
	return p.CommitCapacity != nil
}

func (p *ReplicationProvisionThroughput) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReplicationProvisionThroughput) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumeCapacity = &v
	}
	return nil
}

func (p *ReplicationProvisionThroughput) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CommitCapacity = &v
	}
	return nil
}

func (p *ReplicationProvisionThroughput) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReplicationProvisionThroughput"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReplicationProvisionThroughput) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumeCapacity() {
		if err := oprot.WriteFieldBegin("consumeCapacity", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:consumeCapacity: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ConsumeCapacity)); err != nil {
			return fmt.Errorf("%T.consumeCapacity (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:consumeCapacity: %s", p, err)
		}
	}
	return err
}

func (p *ReplicationProvisionThroughput) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitCapacity() {
		if err := oprot.WriteFieldBegin("commitCapacity", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:commitCapacity: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CommitCapacity)); err != nil {
			return fmt.Errorf("%T.commitCapacity (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:commitCapacity: %s", p, err)
		}
	}
	return err
}

func (p *ReplicationProvisionThroughput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReplicationProvisionThroughput(%+v)", *p)
}

type ReplicationSpec struct {
	EnableReplication *bool                           `thrift:"enableReplication,1" json:"enableReplication"`
	Throughput        *ReplicationProvisionThroughput `thrift:"throughput,2" json:"throughput"`
	MaxSubscribers    *int32                          `thrift:"maxSubscribers,3" json:"maxSubscribers"`
}

func NewReplicationSpec() *ReplicationSpec {
	return &ReplicationSpec{}
}

var ReplicationSpec_EnableReplication_DEFAULT bool

func (p *ReplicationSpec) GetEnableReplication() bool {
	if !p.IsSetEnableReplication() {
		return ReplicationSpec_EnableReplication_DEFAULT
	}
	return *p.EnableReplication
}

var ReplicationSpec_Throughput_DEFAULT *ReplicationProvisionThroughput

func (p *ReplicationSpec) GetThroughput() *ReplicationProvisionThroughput {
	if !p.IsSetThroughput() {
		return ReplicationSpec_Throughput_DEFAULT
	}
	return p.Throughput
}

var ReplicationSpec_MaxSubscribers_DEFAULT int32

func (p *ReplicationSpec) GetMaxSubscribers() int32 {
	if !p.IsSetMaxSubscribers() {
		return ReplicationSpec_MaxSubscribers_DEFAULT
	}
	return *p.MaxSubscribers
}
func (p *ReplicationSpec) IsSetEnableReplication() bool {
	return p.EnableReplication != nil
}

func (p *ReplicationSpec) IsSetThroughput() bool {
	return p.Throughput != nil
}

func (p *ReplicationSpec) IsSetMaxSubscribers() bool {
	return p.MaxSubscribers != nil
}

func (p *ReplicationSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReplicationSpec) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.EnableReplication = &v
	}
	return nil
}

func (p *ReplicationSpec) ReadField2(iprot thrift.TProtocol) error {
	p.Throughput = &ReplicationProvisionThroughput{}
	if err := p.Throughput.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Throughput, err)
	}
	return nil
}

func (p *ReplicationSpec) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxSubscribers = &v
	}
	return nil
}

func (p *ReplicationSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReplicationSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReplicationSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableReplication() {
		if err := oprot.WriteFieldBegin("enableReplication", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:enableReplication: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.EnableReplication)); err != nil {
			return fmt.Errorf("%T.enableReplication (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:enableReplication: %s", p, err)
		}
	}
	return err
}

func (p *ReplicationSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetThroughput() {
		if err := oprot.WriteFieldBegin("throughput", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:throughput: %s", p, err)
		}
		if err := p.Throughput.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Throughput, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:throughput: %s", p, err)
		}
	}
	return err
}

func (p *ReplicationSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxSubscribers() {
		if err := oprot.WriteFieldBegin("maxSubscribers", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:maxSubscribers: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MaxSubscribers)); err != nil {
			return fmt.Errorf("%T.maxSubscribers (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:maxSubscribers: %s", p, err)
		}
	}
	return err
}

func (p *ReplicationSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReplicationSpec(%+v)", *p)
}

type Subscriber struct {
	TableName      *string `thrift:"tableName,1" json:"tableName"`
	SubscriberName *string `thrift:"subscriberName,2" json:"subscriberName"`
	SubscriberId   *string `thrift:"subscriberId,3" json:"subscriberId"`
}

func NewSubscriber() *Subscriber {
	return &Subscriber{}
}

var Subscriber_TableName_DEFAULT string

func (p *Subscriber) GetTableName() string {
	if !p.IsSetTableName() {
		return Subscriber_TableName_DEFAULT
	}
	return *p.TableName
}

var Subscriber_SubscriberName_DEFAULT string

func (p *Subscriber) GetSubscriberName() string {
	if !p.IsSetSubscriberName() {
		return Subscriber_SubscriberName_DEFAULT
	}
	return *p.SubscriberName
}

var Subscriber_SubscriberId_DEFAULT string

func (p *Subscriber) GetSubscriberId() string {
	if !p.IsSetSubscriberId() {
		return Subscriber_SubscriberId_DEFAULT
	}
	return *p.SubscriberId
}
func (p *Subscriber) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *Subscriber) IsSetSubscriberName() bool {
	return p.SubscriberName != nil
}

func (p *Subscriber) IsSetSubscriberId() bool {
	return p.SubscriberId != nil
}

func (p *Subscriber) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Subscriber) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *Subscriber) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SubscriberName = &v
	}
	return nil
}

func (p *Subscriber) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SubscriberId = &v
	}
	return nil
}

func (p *Subscriber) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Subscriber"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Subscriber) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
		}
	}
	return err
}

func (p *Subscriber) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubscriberName() {
		if err := oprot.WriteFieldBegin("subscriberName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:subscriberName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SubscriberName)); err != nil {
			return fmt.Errorf("%T.subscriberName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:subscriberName: %s", p, err)
		}
	}
	return err
}

func (p *Subscriber) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubscriberId() {
		if err := oprot.WriteFieldBegin("subscriberId", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:subscriberId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SubscriberId)); err != nil {
			return fmt.Errorf("%T.subscriberId (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:subscriberId: %s", p, err)
		}
	}
	return err
}

func (p *Subscriber) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Subscriber(%+v)", *p)
}

type Sinker struct {
	SubscribedTableName *string `thrift:"subscribedTableName,1" json:"subscribedTableName"`
	SubscriberName      *string `thrift:"subscriberName,2" json:"subscriberName"`
	Endpoint            *string `thrift:"endpoint,3" json:"endpoint"`
	SinkedTableName     *string `thrift:"sinkedTableName,4" json:"sinkedTableName"`
}

func NewSinker() *Sinker {
	return &Sinker{}
}

var Sinker_SubscribedTableName_DEFAULT string

func (p *Sinker) GetSubscribedTableName() string {
	if !p.IsSetSubscribedTableName() {
		return Sinker_SubscribedTableName_DEFAULT
	}
	return *p.SubscribedTableName
}

var Sinker_SubscriberName_DEFAULT string

func (p *Sinker) GetSubscriberName() string {
	if !p.IsSetSubscriberName() {
		return Sinker_SubscriberName_DEFAULT
	}
	return *p.SubscriberName
}

var Sinker_Endpoint_DEFAULT string

func (p *Sinker) GetEndpoint() string {
	if !p.IsSetEndpoint() {
		return Sinker_Endpoint_DEFAULT
	}
	return *p.Endpoint
}

var Sinker_SinkedTableName_DEFAULT string

func (p *Sinker) GetSinkedTableName() string {
	if !p.IsSetSinkedTableName() {
		return Sinker_SinkedTableName_DEFAULT
	}
	return *p.SinkedTableName
}
func (p *Sinker) IsSetSubscribedTableName() bool {
	return p.SubscribedTableName != nil
}

func (p *Sinker) IsSetSubscriberName() bool {
	return p.SubscriberName != nil
}

func (p *Sinker) IsSetEndpoint() bool {
	return p.Endpoint != nil
}

func (p *Sinker) IsSetSinkedTableName() bool {
	return p.SinkedTableName != nil
}

func (p *Sinker) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Sinker) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SubscribedTableName = &v
	}
	return nil
}

func (p *Sinker) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SubscriberName = &v
	}
	return nil
}

func (p *Sinker) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Endpoint = &v
	}
	return nil
}

func (p *Sinker) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.SinkedTableName = &v
	}
	return nil
}

func (p *Sinker) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Sinker"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Sinker) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubscribedTableName() {
		if err := oprot.WriteFieldBegin("subscribedTableName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:subscribedTableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SubscribedTableName)); err != nil {
			return fmt.Errorf("%T.subscribedTableName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:subscribedTableName: %s", p, err)
		}
	}
	return err
}

func (p *Sinker) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubscriberName() {
		if err := oprot.WriteFieldBegin("subscriberName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:subscriberName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SubscriberName)); err != nil {
			return fmt.Errorf("%T.subscriberName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:subscriberName: %s", p, err)
		}
	}
	return err
}

func (p *Sinker) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndpoint() {
		if err := oprot.WriteFieldBegin("endpoint", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:endpoint: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Endpoint)); err != nil {
			return fmt.Errorf("%T.endpoint (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:endpoint: %s", p, err)
		}
	}
	return err
}

func (p *Sinker) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSinkedTableName() {
		if err := oprot.WriteFieldBegin("sinkedTableName", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:sinkedTableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SinkedTableName)); err != nil {
			return fmt.Errorf("%T.sinkedTableName (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:sinkedTableName: %s", p, err)
		}
	}
	return err
}

func (p *Sinker) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sinker(%+v)", *p)
}

type TableStatus struct {
	State      *TableState `thrift:"state,1" json:"state"`
	CreateTime *int64      `thrift:"createTime,2" json:"createTime"`
	AlterTime  *int64      `thrift:"alterTime,3" json:"alterTime"`
	StatTime   *int64      `thrift:"statTime,4" json:"statTime"`
	Size       *int64      `thrift:"size,5" json:"size"`
	RowCount   *int64      `thrift:"rowCount,6" json:"rowCount"`
}

func NewTableStatus() *TableStatus {
	return &TableStatus{}
}

var TableStatus_State_DEFAULT TableState

func (p *TableStatus) GetState() TableState {
	if !p.IsSetState() {
		return TableStatus_State_DEFAULT
	}
	return *p.State
}

var TableStatus_CreateTime_DEFAULT int64

func (p *TableStatus) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return TableStatus_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var TableStatus_AlterTime_DEFAULT int64

func (p *TableStatus) GetAlterTime() int64 {
	if !p.IsSetAlterTime() {
		return TableStatus_AlterTime_DEFAULT
	}
	return *p.AlterTime
}

var TableStatus_StatTime_DEFAULT int64

func (p *TableStatus) GetStatTime() int64 {
	if !p.IsSetStatTime() {
		return TableStatus_StatTime_DEFAULT
	}
	return *p.StatTime
}

var TableStatus_Size_DEFAULT int64

func (p *TableStatus) GetSize() int64 {
	if !p.IsSetSize() {
		return TableStatus_Size_DEFAULT
	}
	return *p.Size
}

var TableStatus_RowCount_DEFAULT int64

func (p *TableStatus) GetRowCount() int64 {
	if !p.IsSetRowCount() {
		return TableStatus_RowCount_DEFAULT
	}
	return *p.RowCount
}
func (p *TableStatus) IsSetState() bool {
	return p.State != nil
}

func (p *TableStatus) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *TableStatus) IsSetAlterTime() bool {
	return p.AlterTime != nil
}

func (p *TableStatus) IsSetStatTime() bool {
	return p.StatTime != nil
}

func (p *TableStatus) IsSetSize() bool {
	return p.Size != nil
}

func (p *TableStatus) IsSetRowCount() bool {
	return p.RowCount != nil
}

func (p *TableStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TableStatus) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := TableState(v)
		p.State = &temp
	}
	return nil
}

func (p *TableStatus) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *TableStatus) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.AlterTime = &v
	}
	return nil
}

func (p *TableStatus) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StatTime = &v
	}
	return nil
}

func (p *TableStatus) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Size = &v
	}
	return nil
}

func (p *TableStatus) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.RowCount = &v
	}
	return nil
}

func (p *TableStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableStatus"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TableStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetState() {
		if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:state: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.State)); err != nil {
			return fmt.Errorf("%T.state (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:state: %s", p, err)
		}
	}
	return err
}

func (p *TableStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:createTime: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return fmt.Errorf("%T.createTime (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:createTime: %s", p, err)
		}
	}
	return err
}

func (p *TableStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlterTime() {
		if err := oprot.WriteFieldBegin("alterTime", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:alterTime: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.AlterTime)); err != nil {
			return fmt.Errorf("%T.alterTime (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:alterTime: %s", p, err)
		}
	}
	return err
}

func (p *TableStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatTime() {
		if err := oprot.WriteFieldBegin("statTime", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:statTime: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StatTime)); err != nil {
			return fmt.Errorf("%T.statTime (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:statTime: %s", p, err)
		}
	}
	return err
}

func (p *TableStatus) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err := oprot.WriteFieldBegin("size", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:size: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Size)); err != nil {
			return fmt.Errorf("%T.size (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:size: %s", p, err)
		}
	}
	return err
}

func (p *TableStatus) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowCount() {
		if err := oprot.WriteFieldBegin("rowCount", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:rowCount: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.RowCount)); err != nil {
			return fmt.Errorf("%T.rowCount (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:rowCount: %s", p, err)
		}
	}
	return err
}

func (p *TableStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableStatus(%+v)", *p)
}

type TableInfo struct {
	Name   *string      `thrift:"name,1" json:"name"`
	Spec   *TableSpec   `thrift:"spec,2" json:"spec"`
	Status *TableStatus `thrift:"status,3" json:"status"`
}

func NewTableInfo() *TableInfo {
	return &TableInfo{}
}

var TableInfo_Name_DEFAULT string

func (p *TableInfo) GetName() string {
	if !p.IsSetName() {
		return TableInfo_Name_DEFAULT
	}
	return *p.Name
}

var TableInfo_Spec_DEFAULT *TableSpec

func (p *TableInfo) GetSpec() *TableSpec {
	if !p.IsSetSpec() {
		return TableInfo_Spec_DEFAULT
	}
	return p.Spec
}

var TableInfo_Status_DEFAULT *TableStatus

func (p *TableInfo) GetStatus() *TableStatus {
	if !p.IsSetStatus() {
		return TableInfo_Status_DEFAULT
	}
	return p.Status
}
func (p *TableInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *TableInfo) IsSetSpec() bool {
	return p.Spec != nil
}

func (p *TableInfo) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TableInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TableInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *TableInfo) ReadField2(iprot thrift.TProtocol) error {
	p.Spec = &TableSpec{}
	if err := p.Spec.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Spec, err)
	}
	return nil
}

func (p *TableInfo) ReadField3(iprot thrift.TProtocol) error {
	p.Status = &TableStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Status, err)
	}
	return nil
}

func (p *TableInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TableInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return fmt.Errorf("%T.name (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:name: %s", p, err)
		}
	}
	return err
}

func (p *TableInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpec() {
		if err := oprot.WriteFieldBegin("spec", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:spec: %s", p, err)
		}
		if err := p.Spec.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Spec, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:spec: %s", p, err)
		}
	}
	return err
}

func (p *TableInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:status: %s", p, err)
		}
		if err := p.Status.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Status, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:status: %s", p, err)
		}
	}
	return err
}

func (p *TableInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableInfo(%+v)", *p)
}

type SimpleCondition struct {
	Operator *OperatorType `thrift:"operator,1" json:"operator"`
	Field    *string       `thrift:"field,2" json:"field"`
	Value    *Datum        `thrift:"value,3" json:"value"`
	RowExist *bool         `thrift:"rowExist,4" json:"rowExist"`
}

func NewSimpleCondition() *SimpleCondition {
	return &SimpleCondition{}
}

var SimpleCondition_Operator_DEFAULT OperatorType

func (p *SimpleCondition) GetOperator() OperatorType {
	if !p.IsSetOperator() {
		return SimpleCondition_Operator_DEFAULT
	}
	return *p.Operator
}

var SimpleCondition_Field_DEFAULT string

func (p *SimpleCondition) GetField() string {
	if !p.IsSetField() {
		return SimpleCondition_Field_DEFAULT
	}
	return *p.Field
}

var SimpleCondition_Value_DEFAULT *Datum

func (p *SimpleCondition) GetValue() *Datum {
	if !p.IsSetValue() {
		return SimpleCondition_Value_DEFAULT
	}
	return p.Value
}

var SimpleCondition_RowExist_DEFAULT bool

func (p *SimpleCondition) GetRowExist() bool {
	if !p.IsSetRowExist() {
		return SimpleCondition_RowExist_DEFAULT
	}
	return *p.RowExist
}
func (p *SimpleCondition) IsSetOperator() bool {
	return p.Operator != nil
}

func (p *SimpleCondition) IsSetField() bool {
	return p.Field != nil
}

func (p *SimpleCondition) IsSetValue() bool {
	return p.Value != nil
}

func (p *SimpleCondition) IsSetRowExist() bool {
	return p.RowExist != nil
}

func (p *SimpleCondition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SimpleCondition) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := OperatorType(v)
		p.Operator = &temp
	}
	return nil
}

func (p *SimpleCondition) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Field = &v
	}
	return nil
}

func (p *SimpleCondition) ReadField3(iprot thrift.TProtocol) error {
	p.Value = &Datum{}
	if err := p.Value.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Value, err)
	}
	return nil
}

func (p *SimpleCondition) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.RowExist = &v
	}
	return nil
}

func (p *SimpleCondition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SimpleCondition"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SimpleCondition) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperator() {
		if err := oprot.WriteFieldBegin("operator", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:operator: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Operator)); err != nil {
			return fmt.Errorf("%T.operator (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:operator: %s", p, err)
		}
	}
	return err
}

func (p *SimpleCondition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetField() {
		if err := oprot.WriteFieldBegin("field", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:field: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Field)); err != nil {
			return fmt.Errorf("%T.field (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:field: %s", p, err)
		}
	}
	return err
}

func (p *SimpleCondition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := p.Value.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Value, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *SimpleCondition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowExist() {
		if err := oprot.WriteFieldBegin("rowExist", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:rowExist: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.RowExist)); err != nil {
			return fmt.Errorf("%T.rowExist (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:rowExist: %s", p, err)
		}
	}
	return err
}

func (p *SimpleCondition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SimpleCondition(%+v)", *p)
}

type TableSplit struct {
	StartKey Dictionary `thrift:"startKey,1" json:"startKey"`
	StopKey  Dictionary `thrift:"stopKey,2" json:"stopKey"`
}

func NewTableSplit() *TableSplit {
	return &TableSplit{}
}

var TableSplit_StartKey_DEFAULT Dictionary

func (p *TableSplit) GetStartKey() Dictionary {
	return p.StartKey
}

var TableSplit_StopKey_DEFAULT Dictionary

func (p *TableSplit) GetStopKey() Dictionary {
	return p.StopKey
}
func (p *TableSplit) IsSetStartKey() bool {
	return p.StartKey != nil
}

func (p *TableSplit) IsSetStopKey() bool {
	return p.StopKey != nil
}

func (p *TableSplit) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TableSplit) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.StartKey = tMap
	for i := 0; i < size; i++ {
		var _key19 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key19 = v
		}
		_val20 := &Datum{}
		if err := _val20.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val20, err)
		}
		p.StartKey[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TableSplit) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.StopKey = tMap
	for i := 0; i < size; i++ {
		var _key21 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key21 = v
		}
		_val22 := &Datum{}
		if err := _val22.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val22, err)
		}
		p.StopKey[_key21] = _val22
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TableSplit) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableSplit"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TableSplit) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartKey() {
		if err := oprot.WriteFieldBegin("startKey", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:startKey: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.StartKey)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.StartKey {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:startKey: %s", p, err)
		}
	}
	return err
}

func (p *TableSplit) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStopKey() {
		if err := oprot.WriteFieldBegin("stopKey", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:stopKey: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.StopKey)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.StopKey {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:stopKey: %s", p, err)
		}
	}
	return err
}

func (p *TableSplit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableSplit(%+v)", *p)
}

type Partition struct {
	PartitionId *int32     `thrift:"partitionId,1" json:"partitionId"`
	StartKey    Dictionary `thrift:"startKey,2" json:"startKey"`
	StopKey     Dictionary `thrift:"stopKey,3" json:"stopKey"`
}

func NewPartition() *Partition {
	return &Partition{}
}

var Partition_PartitionId_DEFAULT int32

func (p *Partition) GetPartitionId() int32 {
	if !p.IsSetPartitionId() {
		return Partition_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var Partition_StartKey_DEFAULT Dictionary

func (p *Partition) GetStartKey() Dictionary {
	return p.StartKey
}

var Partition_StopKey_DEFAULT Dictionary

func (p *Partition) GetStopKey() Dictionary {
	return p.StopKey
}
func (p *Partition) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *Partition) IsSetStartKey() bool {
	return p.StartKey != nil
}

func (p *Partition) IsSetStopKey() bool {
	return p.StopKey != nil
}

func (p *Partition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Partition) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PartitionId = &v
	}
	return nil
}

func (p *Partition) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.StartKey = tMap
	for i := 0; i < size; i++ {
		var _key23 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key23 = v
		}
		_val24 := &Datum{}
		if err := _val24.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val24, err)
		}
		p.StartKey[_key23] = _val24
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Partition) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.StopKey = tMap
	for i := 0; i < size; i++ {
		var _key25 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key25 = v
		}
		_val26 := &Datum{}
		if err := _val26.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val26, err)
		}
		p.StopKey[_key25] = _val26
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Partition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Partition"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Partition) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err := oprot.WriteFieldBegin("partitionId", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:partitionId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.PartitionId)); err != nil {
			return fmt.Errorf("%T.partitionId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:partitionId: %s", p, err)
		}
	}
	return err
}

func (p *Partition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartKey() {
		if err := oprot.WriteFieldBegin("startKey", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:startKey: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.StartKey)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.StartKey {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:startKey: %s", p, err)
		}
	}
	return err
}

func (p *Partition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStopKey() {
		if err := oprot.WriteFieldBegin("stopKey", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:stopKey: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.StopKey)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.StopKey {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:stopKey: %s", p, err)
		}
	}
	return err
}

func (p *Partition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Partition(%+v)", *p)
}

type PartitionStatistics struct {
	CollectedEditNumber *int64 `thrift:"collectedEditNumber,1" json:"collectedEditNumber"`
	RetrievedEditNumber *int64 `thrift:"retrievedEditNumber,2" json:"retrievedEditNumber"`
}

func NewPartitionStatistics() *PartitionStatistics {
	return &PartitionStatistics{}
}

var PartitionStatistics_CollectedEditNumber_DEFAULT int64

func (p *PartitionStatistics) GetCollectedEditNumber() int64 {
	if !p.IsSetCollectedEditNumber() {
		return PartitionStatistics_CollectedEditNumber_DEFAULT
	}
	return *p.CollectedEditNumber
}

var PartitionStatistics_RetrievedEditNumber_DEFAULT int64

func (p *PartitionStatistics) GetRetrievedEditNumber() int64 {
	if !p.IsSetRetrievedEditNumber() {
		return PartitionStatistics_RetrievedEditNumber_DEFAULT
	}
	return *p.RetrievedEditNumber
}
func (p *PartitionStatistics) IsSetCollectedEditNumber() bool {
	return p.CollectedEditNumber != nil
}

func (p *PartitionStatistics) IsSetRetrievedEditNumber() bool {
	return p.RetrievedEditNumber != nil
}

func (p *PartitionStatistics) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionStatistics) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.CollectedEditNumber = &v
	}
	return nil
}

func (p *PartitionStatistics) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RetrievedEditNumber = &v
	}
	return nil
}

func (p *PartitionStatistics) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PartitionStatistics"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCollectedEditNumber() {
		if err := oprot.WriteFieldBegin("collectedEditNumber", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:collectedEditNumber: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CollectedEditNumber)); err != nil {
			return fmt.Errorf("%T.collectedEditNumber (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:collectedEditNumber: %s", p, err)
		}
	}
	return err
}

func (p *PartitionStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRetrievedEditNumber() {
		if err := oprot.WriteFieldBegin("retrievedEditNumber", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:retrievedEditNumber: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.RetrievedEditNumber)); err != nil {
			return fmt.Errorf("%T.retrievedEditNumber (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:retrievedEditNumber: %s", p, err)
		}
	}
	return err
}

func (p *PartitionStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionStatistics(%+v)", *p)
}

type SubscriberStatistics struct {
	ConsumedDataNumber  *int64 `thrift:"consumedDataNumber,1" json:"consumedDataNumber"`
	CommittedDataNumber *int64 `thrift:"committedDataNumber,2" json:"committedDataNumber"`
	ConsumedEditNumber  *int64 `thrift:"consumedEditNumber,3" json:"consumedEditNumber"`
	CommittedEditNumber *int64 `thrift:"committedEditNumber,4" json:"committedEditNumber"`
}

func NewSubscriberStatistics() *SubscriberStatistics {
	return &SubscriberStatistics{}
}

var SubscriberStatistics_ConsumedDataNumber_DEFAULT int64

func (p *SubscriberStatistics) GetConsumedDataNumber() int64 {
	if !p.IsSetConsumedDataNumber() {
		return SubscriberStatistics_ConsumedDataNumber_DEFAULT
	}
	return *p.ConsumedDataNumber
}

var SubscriberStatistics_CommittedDataNumber_DEFAULT int64

func (p *SubscriberStatistics) GetCommittedDataNumber() int64 {
	if !p.IsSetCommittedDataNumber() {
		return SubscriberStatistics_CommittedDataNumber_DEFAULT
	}
	return *p.CommittedDataNumber
}

var SubscriberStatistics_ConsumedEditNumber_DEFAULT int64

func (p *SubscriberStatistics) GetConsumedEditNumber() int64 {
	if !p.IsSetConsumedEditNumber() {
		return SubscriberStatistics_ConsumedEditNumber_DEFAULT
	}
	return *p.ConsumedEditNumber
}

var SubscriberStatistics_CommittedEditNumber_DEFAULT int64

func (p *SubscriberStatistics) GetCommittedEditNumber() int64 {
	if !p.IsSetCommittedEditNumber() {
		return SubscriberStatistics_CommittedEditNumber_DEFAULT
	}
	return *p.CommittedEditNumber
}
func (p *SubscriberStatistics) IsSetConsumedDataNumber() bool {
	return p.ConsumedDataNumber != nil
}

func (p *SubscriberStatistics) IsSetCommittedDataNumber() bool {
	return p.CommittedDataNumber != nil
}

func (p *SubscriberStatistics) IsSetConsumedEditNumber() bool {
	return p.ConsumedEditNumber != nil
}

func (p *SubscriberStatistics) IsSetCommittedEditNumber() bool {
	return p.CommittedEditNumber != nil
}

func (p *SubscriberStatistics) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SubscriberStatistics) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumedDataNumber = &v
	}
	return nil
}

func (p *SubscriberStatistics) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CommittedDataNumber = &v
	}
	return nil
}

func (p *SubscriberStatistics) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ConsumedEditNumber = &v
	}
	return nil
}

func (p *SubscriberStatistics) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CommittedEditNumber = &v
	}
	return nil
}

func (p *SubscriberStatistics) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubscriberStatistics"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SubscriberStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumedDataNumber() {
		if err := oprot.WriteFieldBegin("consumedDataNumber", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:consumedDataNumber: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ConsumedDataNumber)); err != nil {
			return fmt.Errorf("%T.consumedDataNumber (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:consumedDataNumber: %s", p, err)
		}
	}
	return err
}

func (p *SubscriberStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommittedDataNumber() {
		if err := oprot.WriteFieldBegin("committedDataNumber", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:committedDataNumber: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CommittedDataNumber)); err != nil {
			return fmt.Errorf("%T.committedDataNumber (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:committedDataNumber: %s", p, err)
		}
	}
	return err
}

func (p *SubscriberStatistics) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumedEditNumber() {
		if err := oprot.WriteFieldBegin("consumedEditNumber", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:consumedEditNumber: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ConsumedEditNumber)); err != nil {
			return fmt.Errorf("%T.consumedEditNumber (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:consumedEditNumber: %s", p, err)
		}
	}
	return err
}

func (p *SubscriberStatistics) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommittedEditNumber() {
		if err := oprot.WriteFieldBegin("committedEditNumber", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:committedEditNumber: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CommittedEditNumber)); err != nil {
			return fmt.Errorf("%T.committedEditNumber (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:committedEditNumber: %s", p, err)
		}
	}
	return err
}

func (p *SubscriberStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubscriberStatistics(%+v)", *p)
}

type GetRequest struct {
	TableName  *string    `thrift:"tableName,1" json:"tableName"`
	Keys       Dictionary `thrift:"keys,2" json:"keys"`
	Attributes Attributes `thrift:"attributes,3" json:"attributes"`
}

func NewGetRequest() *GetRequest {
	return &GetRequest{}
}

var GetRequest_TableName_DEFAULT string

func (p *GetRequest) GetTableName() string {
	if !p.IsSetTableName() {
		return GetRequest_TableName_DEFAULT
	}
	return *p.TableName
}

var GetRequest_Keys_DEFAULT Dictionary

func (p *GetRequest) GetKeys() Dictionary {
	return p.Keys
}

var GetRequest_Attributes_DEFAULT Attributes

func (p *GetRequest) GetAttributes() Attributes {
	return p.Attributes
}
func (p *GetRequest) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *GetRequest) IsSetKeys() bool {
	return p.Keys != nil
}

func (p *GetRequest) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *GetRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *GetRequest) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.Keys = tMap
	for i := 0; i < size; i++ {
		var _key27 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key27 = v
		}
		_val28 := &Datum{}
		if err := _val28.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val28, err)
		}
		p.Keys[_key27] = _val28
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make(Attributes, 0, size)
	p.Attributes = tSlice
	for i := 0; i < size; i++ {
		var _elem29 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem29 = v
		}
		p.Attributes = append(p.Attributes, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
		}
	}
	return err
}

func (p *GetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeys() {
		if err := oprot.WriteFieldBegin("keys", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:keys: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Keys)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Keys {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:keys: %s", p, err)
		}
	}
	return err
}

func (p *GetRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:attributes: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Attributes {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:attributes: %s", p, err)
		}
	}
	return err
}

func (p *GetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRequest(%+v)", *p)
}

type GetResult_ struct {
	Item Dictionary `thrift:"item,1" json:"item"`
}

func NewGetResult_() *GetResult_ {
	return &GetResult_{}
}

var GetResult__Item_DEFAULT Dictionary

func (p *GetResult_) GetItem() Dictionary {
	return p.Item
}
func (p *GetResult_) IsSetItem() bool {
	return p.Item != nil
}

func (p *GetResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResult_) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.Item = tMap
	for i := 0; i < size; i++ {
		var _key30 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key30 = v
		}
		_val31 := &Datum{}
		if err := _val31.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val31, err)
		}
		p.Item[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItem() {
		if err := oprot.WriteFieldBegin("item", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:item: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Item)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Item {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:item: %s", p, err)
		}
	}
	return err
}

func (p *GetResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResult_(%+v)", *p)
}

type PutRequest struct {
	TableName *string          `thrift:"tableName,1" json:"tableName"`
	Record    Dictionary       `thrift:"record,2" json:"record"`
	Condition *SimpleCondition `thrift:"condition,3" json:"condition"`
}

func NewPutRequest() *PutRequest {
	return &PutRequest{}
}

var PutRequest_TableName_DEFAULT string

func (p *PutRequest) GetTableName() string {
	if !p.IsSetTableName() {
		return PutRequest_TableName_DEFAULT
	}
	return *p.TableName
}

var PutRequest_Record_DEFAULT Dictionary

func (p *PutRequest) GetRecord() Dictionary {
	return p.Record
}

var PutRequest_Condition_DEFAULT *SimpleCondition

func (p *PutRequest) GetCondition() *SimpleCondition {
	if !p.IsSetCondition() {
		return PutRequest_Condition_DEFAULT
	}
	return p.Condition
}
func (p *PutRequest) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *PutRequest) IsSetRecord() bool {
	return p.Record != nil
}

func (p *PutRequest) IsSetCondition() bool {
	return p.Condition != nil
}

func (p *PutRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PutRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *PutRequest) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.Record = tMap
	for i := 0; i < size; i++ {
		var _key32 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key32 = v
		}
		_val33 := &Datum{}
		if err := _val33.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val33, err)
		}
		p.Record[_key32] = _val33
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PutRequest) ReadField3(iprot thrift.TProtocol) error {
	p.Condition = &SimpleCondition{}
	if err := p.Condition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Condition, err)
	}
	return nil
}

func (p *PutRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PutRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PutRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
		}
	}
	return err
}

func (p *PutRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecord() {
		if err := oprot.WriteFieldBegin("record", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:record: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Record)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Record {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:record: %s", p, err)
		}
	}
	return err
}

func (p *PutRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCondition() {
		if err := oprot.WriteFieldBegin("condition", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:condition: %s", p, err)
		}
		if err := p.Condition.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Condition, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:condition: %s", p, err)
		}
	}
	return err
}

func (p *PutRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutRequest(%+v)", *p)
}

type PutResult_ struct {
	Success *bool `thrift:"success,1" json:"success"`
}

func NewPutResult_() *PutResult_ {
	return &PutResult_{}
}

var PutResult__Success_DEFAULT bool

func (p *PutResult_) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return PutResult__Success_DEFAULT
	}
	return *p.Success
}
func (p *PutResult_) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PutResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PutResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *PutResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PutResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PutResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:success: %s", p, err)
		}
	}
	return err
}

func (p *PutResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutResult_(%+v)", *p)
}

type IncrementRequest struct {
	TableName *string    `thrift:"tableName,1" json:"tableName"`
	Keys      Dictionary `thrift:"keys,2" json:"keys"`
	Amounts   Dictionary `thrift:"amounts,3" json:"amounts"`
}

func NewIncrementRequest() *IncrementRequest {
	return &IncrementRequest{}
}

var IncrementRequest_TableName_DEFAULT string

func (p *IncrementRequest) GetTableName() string {
	if !p.IsSetTableName() {
		return IncrementRequest_TableName_DEFAULT
	}
	return *p.TableName
}

var IncrementRequest_Keys_DEFAULT Dictionary

func (p *IncrementRequest) GetKeys() Dictionary {
	return p.Keys
}

var IncrementRequest_Amounts_DEFAULT Dictionary

func (p *IncrementRequest) GetAmounts() Dictionary {
	return p.Amounts
}
func (p *IncrementRequest) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *IncrementRequest) IsSetKeys() bool {
	return p.Keys != nil
}

func (p *IncrementRequest) IsSetAmounts() bool {
	return p.Amounts != nil
}

func (p *IncrementRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IncrementRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *IncrementRequest) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.Keys = tMap
	for i := 0; i < size; i++ {
		var _key34 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key34 = v
		}
		_val35 := &Datum{}
		if err := _val35.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val35, err)
		}
		p.Keys[_key34] = _val35
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *IncrementRequest) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.Amounts = tMap
	for i := 0; i < size; i++ {
		var _key36 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key36 = v
		}
		_val37 := &Datum{}
		if err := _val37.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val37, err)
		}
		p.Amounts[_key36] = _val37
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *IncrementRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IncrementRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IncrementRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
		}
	}
	return err
}

func (p *IncrementRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeys() {
		if err := oprot.WriteFieldBegin("keys", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:keys: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Keys)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Keys {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:keys: %s", p, err)
		}
	}
	return err
}

func (p *IncrementRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmounts() {
		if err := oprot.WriteFieldBegin("amounts", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:amounts: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Amounts)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Amounts {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:amounts: %s", p, err)
		}
	}
	return err
}

func (p *IncrementRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrementRequest(%+v)", *p)
}

type IncrementResult_ struct {
	Amounts Dictionary `thrift:"amounts,1" json:"amounts"`
}

func NewIncrementResult_() *IncrementResult_ {
	return &IncrementResult_{}
}

var IncrementResult__Amounts_DEFAULT Dictionary

func (p *IncrementResult_) GetAmounts() Dictionary {
	return p.Amounts
}
func (p *IncrementResult_) IsSetAmounts() bool {
	return p.Amounts != nil
}

func (p *IncrementResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IncrementResult_) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.Amounts = tMap
	for i := 0; i < size; i++ {
		var _key38 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key38 = v
		}
		_val39 := &Datum{}
		if err := _val39.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val39, err)
		}
		p.Amounts[_key38] = _val39
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *IncrementResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IncrementResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IncrementResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmounts() {
		if err := oprot.WriteFieldBegin("amounts", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:amounts: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Amounts)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Amounts {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:amounts: %s", p, err)
		}
	}
	return err
}

func (p *IncrementResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrementResult_(%+v)", *p)
}

type RemoveRequest struct {
	TableName  *string          `thrift:"tableName,1" json:"tableName"`
	Keys       Dictionary       `thrift:"keys,2" json:"keys"`
	Attributes Attributes       `thrift:"attributes,3" json:"attributes"`
	Condition  *SimpleCondition `thrift:"condition,4" json:"condition"`
}

func NewRemoveRequest() *RemoveRequest {
	return &RemoveRequest{}
}

var RemoveRequest_TableName_DEFAULT string

func (p *RemoveRequest) GetTableName() string {
	if !p.IsSetTableName() {
		return RemoveRequest_TableName_DEFAULT
	}
	return *p.TableName
}

var RemoveRequest_Keys_DEFAULT Dictionary

func (p *RemoveRequest) GetKeys() Dictionary {
	return p.Keys
}

var RemoveRequest_Attributes_DEFAULT Attributes

func (p *RemoveRequest) GetAttributes() Attributes {
	return p.Attributes
}

var RemoveRequest_Condition_DEFAULT *SimpleCondition

func (p *RemoveRequest) GetCondition() *SimpleCondition {
	if !p.IsSetCondition() {
		return RemoveRequest_Condition_DEFAULT
	}
	return p.Condition
}
func (p *RemoveRequest) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *RemoveRequest) IsSetKeys() bool {
	return p.Keys != nil
}

func (p *RemoveRequest) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *RemoveRequest) IsSetCondition() bool {
	return p.Condition != nil
}

func (p *RemoveRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *RemoveRequest) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.Keys = tMap
	for i := 0; i < size; i++ {
		var _key40 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key40 = v
		}
		_val41 := &Datum{}
		if err := _val41.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val41, err)
		}
		p.Keys[_key40] = _val41
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *RemoveRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make(Attributes, 0, size)
	p.Attributes = tSlice
	for i := 0; i < size; i++ {
		var _elem42 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem42 = v
		}
		p.Attributes = append(p.Attributes, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *RemoveRequest) ReadField4(iprot thrift.TProtocol) error {
	p.Condition = &SimpleCondition{}
	if err := p.Condition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Condition, err)
	}
	return nil
}

func (p *RemoveRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoveRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
		}
	}
	return err
}

func (p *RemoveRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeys() {
		if err := oprot.WriteFieldBegin("keys", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:keys: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Keys)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Keys {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:keys: %s", p, err)
		}
	}
	return err
}

func (p *RemoveRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:attributes: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Attributes {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:attributes: %s", p, err)
		}
	}
	return err
}

func (p *RemoveRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCondition() {
		if err := oprot.WriteFieldBegin("condition", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:condition: %s", p, err)
		}
		if err := p.Condition.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Condition, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:condition: %s", p, err)
		}
	}
	return err
}

func (p *RemoveRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveRequest(%+v)", *p)
}

type RemoveResult_ struct {
	Success *bool `thrift:"success,1" json:"success"`
}

func NewRemoveResult_() *RemoveResult_ {
	return &RemoveResult_{}
}

var RemoveResult__Success_DEFAULT bool

func (p *RemoveResult_) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoveResult__Success_DEFAULT
	}
	return *p.Success
}
func (p *RemoveResult_) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoveResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoveResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemoveResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:success: %s", p, err)
		}
	}
	return err
}

func (p *RemoveResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveResult_(%+v)", *p)
}

type Request struct {
	GetRequest       *GetRequest       `thrift:"getRequest,1" json:"getRequest"`
	PutRequest       *PutRequest       `thrift:"putRequest,2" json:"putRequest"`
	IncrementRequest *IncrementRequest `thrift:"incrementRequest,3" json:"incrementRequest"`
	RemoveRequest    *RemoveRequest    `thrift:"removeRequest,4" json:"removeRequest"`
}

func NewRequest() *Request {
	return &Request{}
}

var Request_GetRequest_DEFAULT *GetRequest

func (p *Request) GetGetRequest() *GetRequest {
	if !p.IsSetGetRequest() {
		return Request_GetRequest_DEFAULT
	}
	return p.GetRequest
}

var Request_PutRequest_DEFAULT *PutRequest

func (p *Request) GetPutRequest() *PutRequest {
	if !p.IsSetPutRequest() {
		return Request_PutRequest_DEFAULT
	}
	return p.PutRequest
}

var Request_IncrementRequest_DEFAULT *IncrementRequest

func (p *Request) GetIncrementRequest() *IncrementRequest {
	if !p.IsSetIncrementRequest() {
		return Request_IncrementRequest_DEFAULT
	}
	return p.IncrementRequest
}

var Request_RemoveRequest_DEFAULT *RemoveRequest

func (p *Request) GetRemoveRequest() *RemoveRequest {
	if !p.IsSetRemoveRequest() {
		return Request_RemoveRequest_DEFAULT
	}
	return p.RemoveRequest
}
func (p *Request) IsSetGetRequest() bool {
	return p.GetRequest != nil
}

func (p *Request) IsSetPutRequest() bool {
	return p.PutRequest != nil
}

func (p *Request) IsSetIncrementRequest() bool {
	return p.IncrementRequest != nil
}

func (p *Request) IsSetRemoveRequest() bool {
	return p.RemoveRequest != nil
}

func (p *Request) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Request) ReadField1(iprot thrift.TProtocol) error {
	p.GetRequest = &GetRequest{}
	if err := p.GetRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GetRequest, err)
	}
	return nil
}

func (p *Request) ReadField2(iprot thrift.TProtocol) error {
	p.PutRequest = &PutRequest{}
	if err := p.PutRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PutRequest, err)
	}
	return nil
}

func (p *Request) ReadField3(iprot thrift.TProtocol) error {
	p.IncrementRequest = &IncrementRequest{}
	if err := p.IncrementRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.IncrementRequest, err)
	}
	return nil
}

func (p *Request) ReadField4(iprot thrift.TProtocol) error {
	p.RemoveRequest = &RemoveRequest{}
	if err := p.RemoveRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RemoveRequest, err)
	}
	return nil
}

func (p *Request) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Request"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Request) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGetRequest() {
		if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:getRequest: %s", p, err)
		}
		if err := p.GetRequest.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GetRequest, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:getRequest: %s", p, err)
		}
	}
	return err
}

func (p *Request) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPutRequest() {
		if err := oprot.WriteFieldBegin("putRequest", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:putRequest: %s", p, err)
		}
		if err := p.PutRequest.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PutRequest, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:putRequest: %s", p, err)
		}
	}
	return err
}

func (p *Request) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncrementRequest() {
		if err := oprot.WriteFieldBegin("incrementRequest", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:incrementRequest: %s", p, err)
		}
		if err := p.IncrementRequest.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.IncrementRequest, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:incrementRequest: %s", p, err)
		}
	}
	return err
}

func (p *Request) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoveRequest() {
		if err := oprot.WriteFieldBegin("removeRequest", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:removeRequest: %s", p, err)
		}
		if err := p.RemoveRequest.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RemoveRequest, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:removeRequest: %s", p, err)
		}
	}
	return err
}

func (p *Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Request(%+v)", *p)
}

type ScanAction struct {
	Action  *ScanOp  `thrift:"action,1" json:"action"`
	Request *Request `thrift:"request,2" json:"request"`
}

func NewScanAction() *ScanAction {
	return &ScanAction{}
}

var ScanAction_Action_DEFAULT ScanOp

func (p *ScanAction) GetAction() ScanOp {
	if !p.IsSetAction() {
		return ScanAction_Action_DEFAULT
	}
	return *p.Action
}

var ScanAction_Request_DEFAULT *Request

func (p *ScanAction) GetRequest() *Request {
	if !p.IsSetRequest() {
		return ScanAction_Request_DEFAULT
	}
	return p.Request
}
func (p *ScanAction) IsSetAction() bool {
	return p.Action != nil
}

func (p *ScanAction) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ScanAction) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ScanAction) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := ScanOp(v)
		p.Action = &temp
	}
	return nil
}

func (p *ScanAction) ReadField2(iprot thrift.TProtocol) error {
	p.Request = &Request{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ScanAction) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ScanAction"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ScanAction) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAction() {
		if err := oprot.WriteFieldBegin("action", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:action: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Action)); err != nil {
			return fmt.Errorf("%T.action (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:action: %s", p, err)
		}
	}
	return err
}

func (p *ScanAction) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequest() {
		if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:request: %s", p, err)
		}
		if err := p.Request.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Request, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:request: %s", p, err)
		}
	}
	return err
}

func (p *ScanAction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScanAction(%+v)", *p)
}

type ScanRequest struct {
	TableName       *string     `thrift:"tableName,1" json:"tableName"`
	IndexName       *string     `thrift:"indexName,2" json:"indexName"`
	StartKey        Dictionary  `thrift:"startKey,3" json:"startKey"`
	StopKey         Dictionary  `thrift:"stopKey,4" json:"stopKey"`
	Attributes      Attributes  `thrift:"attributes,5" json:"attributes"`
	Condition       *string     `thrift:"condition,6" json:"condition"`
	Limit           int32       `thrift:"limit,7" json:"limit"`
	Reverse         bool        `thrift:"reverse,8" json:"reverse"`
	InGlobalOrder   bool        `thrift:"inGlobalOrder,9" json:"inGlobalOrder"`
	CacheResult_    bool        `thrift:"cacheResult,10" json:"cacheResult"`
	LookAheadStep   int32       `thrift:"lookAheadStep,11" json:"lookAheadStep"`
	Action          *ScanAction `thrift:"action,12" json:"action"`
	SplitIndex      int32       `thrift:"splitIndex,13" json:"splitIndex"`
	InitialStartKey Dictionary  `thrift:"initialStartKey,14" json:"initialStartKey"`
	ScanInOneSplit  bool        `thrift:"scanInOneSplit,15" json:"scanInOneSplit"`
}

func NewScanRequest() *ScanRequest {
	return &ScanRequest{
		Limit: 10,

		CacheResult_: true,

		SplitIndex: -1,
	}
}

var ScanRequest_TableName_DEFAULT string

func (p *ScanRequest) GetTableName() string {
	if !p.IsSetTableName() {
		return ScanRequest_TableName_DEFAULT
	}
	return *p.TableName
}

var ScanRequest_IndexName_DEFAULT string

func (p *ScanRequest) GetIndexName() string {
	if !p.IsSetIndexName() {
		return ScanRequest_IndexName_DEFAULT
	}
	return *p.IndexName
}

var ScanRequest_StartKey_DEFAULT Dictionary

func (p *ScanRequest) GetStartKey() Dictionary {
	return p.StartKey
}

var ScanRequest_StopKey_DEFAULT Dictionary

func (p *ScanRequest) GetStopKey() Dictionary {
	return p.StopKey
}

var ScanRequest_Attributes_DEFAULT Attributes

func (p *ScanRequest) GetAttributes() Attributes {
	return p.Attributes
}

var ScanRequest_Condition_DEFAULT string

func (p *ScanRequest) GetCondition() string {
	if !p.IsSetCondition() {
		return ScanRequest_Condition_DEFAULT
	}
	return *p.Condition
}

var ScanRequest_Limit_DEFAULT int32 = 10

func (p *ScanRequest) GetLimit() int32 {
	return p.Limit
}

var ScanRequest_Reverse_DEFAULT bool = false

func (p *ScanRequest) GetReverse() bool {
	return p.Reverse
}

var ScanRequest_InGlobalOrder_DEFAULT bool = false

func (p *ScanRequest) GetInGlobalOrder() bool {
	return p.InGlobalOrder
}

var ScanRequest_CacheResult__DEFAULT bool = true

func (p *ScanRequest) GetCacheResult_() bool {
	return p.CacheResult_
}

var ScanRequest_LookAheadStep_DEFAULT int32 = 0

func (p *ScanRequest) GetLookAheadStep() int32 {
	return p.LookAheadStep
}

var ScanRequest_Action_DEFAULT *ScanAction

func (p *ScanRequest) GetAction() *ScanAction {
	if !p.IsSetAction() {
		return ScanRequest_Action_DEFAULT
	}
	return p.Action
}

var ScanRequest_SplitIndex_DEFAULT int32 = -1

func (p *ScanRequest) GetSplitIndex() int32 {
	return p.SplitIndex
}

var ScanRequest_InitialStartKey_DEFAULT Dictionary

func (p *ScanRequest) GetInitialStartKey() Dictionary {
	return p.InitialStartKey
}

var ScanRequest_ScanInOneSplit_DEFAULT bool = false

func (p *ScanRequest) GetScanInOneSplit() bool {
	return p.ScanInOneSplit
}
func (p *ScanRequest) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *ScanRequest) IsSetIndexName() bool {
	return p.IndexName != nil
}

func (p *ScanRequest) IsSetStartKey() bool {
	return p.StartKey != nil
}

func (p *ScanRequest) IsSetStopKey() bool {
	return p.StopKey != nil
}

func (p *ScanRequest) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *ScanRequest) IsSetCondition() bool {
	return p.Condition != nil
}

func (p *ScanRequest) IsSetLimit() bool {
	return p.Limit != ScanRequest_Limit_DEFAULT
}

func (p *ScanRequest) IsSetReverse() bool {
	return p.Reverse != ScanRequest_Reverse_DEFAULT
}

func (p *ScanRequest) IsSetInGlobalOrder() bool {
	return p.InGlobalOrder != ScanRequest_InGlobalOrder_DEFAULT
}

func (p *ScanRequest) IsSetCacheResult_() bool {
	return p.CacheResult_ != ScanRequest_CacheResult__DEFAULT
}

func (p *ScanRequest) IsSetLookAheadStep() bool {
	return p.LookAheadStep != ScanRequest_LookAheadStep_DEFAULT
}

func (p *ScanRequest) IsSetAction() bool {
	return p.Action != nil
}

func (p *ScanRequest) IsSetSplitIndex() bool {
	return p.SplitIndex != ScanRequest_SplitIndex_DEFAULT
}

func (p *ScanRequest) IsSetInitialStartKey() bool {
	return p.InitialStartKey != nil
}

func (p *ScanRequest) IsSetScanInOneSplit() bool {
	return p.ScanInOneSplit != ScanRequest_ScanInOneSplit_DEFAULT
}

func (p *ScanRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ScanRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *ScanRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.IndexName = &v
	}
	return nil
}

func (p *ScanRequest) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.StartKey = tMap
	for i := 0; i < size; i++ {
		var _key43 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key43 = v
		}
		_val44 := &Datum{}
		if err := _val44.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val44, err)
		}
		p.StartKey[_key43] = _val44
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ScanRequest) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.StopKey = tMap
	for i := 0; i < size; i++ {
		var _key45 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key45 = v
		}
		_val46 := &Datum{}
		if err := _val46.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val46, err)
		}
		p.StopKey[_key45] = _val46
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ScanRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make(Attributes, 0, size)
	p.Attributes = tSlice
	for i := 0; i < size; i++ {
		var _elem47 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem47 = v
		}
		p.Attributes = append(p.Attributes, _elem47)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ScanRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Condition = &v
	}
	return nil
}

func (p *ScanRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ScanRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Reverse = v
	}
	return nil
}

func (p *ScanRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.InGlobalOrder = v
	}
	return nil
}

func (p *ScanRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.CacheResult_ = v
	}
	return nil
}

func (p *ScanRequest) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.LookAheadStep = v
	}
	return nil
}

func (p *ScanRequest) ReadField12(iprot thrift.TProtocol) error {
	p.Action = &ScanAction{}
	if err := p.Action.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Action, err)
	}
	return nil
}

func (p *ScanRequest) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.SplitIndex = v
	}
	return nil
}

func (p *ScanRequest) ReadField14(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.InitialStartKey = tMap
	for i := 0; i < size; i++ {
		var _key48 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key48 = v
		}
		_val49 := &Datum{}
		if err := _val49.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val49, err)
		}
		p.InitialStartKey[_key48] = _val49
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ScanRequest) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.ScanInOneSplit = v
	}
	return nil
}

func (p *ScanRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ScanRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ScanRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexName() {
		if err := oprot.WriteFieldBegin("indexName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:indexName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.IndexName)); err != nil {
			return fmt.Errorf("%T.indexName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:indexName: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartKey() {
		if err := oprot.WriteFieldBegin("startKey", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:startKey: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.StartKey)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.StartKey {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:startKey: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStopKey() {
		if err := oprot.WriteFieldBegin("stopKey", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:stopKey: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.StopKey)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.StopKey {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:stopKey: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.LIST, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:attributes: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Attributes {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:attributes: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCondition() {
		if err := oprot.WriteFieldBegin("condition", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:condition: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Condition)); err != nil {
			return fmt.Errorf("%T.condition (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:condition: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:limit: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Limit)); err != nil {
			return fmt.Errorf("%T.limit (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:limit: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetReverse() {
		if err := oprot.WriteFieldBegin("reverse", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:reverse: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Reverse)); err != nil {
			return fmt.Errorf("%T.reverse (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:reverse: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetInGlobalOrder() {
		if err := oprot.WriteFieldBegin("inGlobalOrder", thrift.BOOL, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:inGlobalOrder: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.InGlobalOrder)); err != nil {
			return fmt.Errorf("%T.inGlobalOrder (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:inGlobalOrder: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheResult_() {
		if err := oprot.WriteFieldBegin("cacheResult", thrift.BOOL, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:cacheResult: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.CacheResult_)); err != nil {
			return fmt.Errorf("%T.cacheResult (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:cacheResult: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLookAheadStep() {
		if err := oprot.WriteFieldBegin("lookAheadStep", thrift.I32, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:lookAheadStep: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.LookAheadStep)); err != nil {
			return fmt.Errorf("%T.lookAheadStep (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:lookAheadStep: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetAction() {
		if err := oprot.WriteFieldBegin("action", thrift.STRUCT, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:action: %s", p, err)
		}
		if err := p.Action.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Action, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:action: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetSplitIndex() {
		if err := oprot.WriteFieldBegin("splitIndex", thrift.I32, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:splitIndex: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.SplitIndex)); err != nil {
			return fmt.Errorf("%T.splitIndex (13) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:splitIndex: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetInitialStartKey() {
		if err := oprot.WriteFieldBegin("initialStartKey", thrift.MAP, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:initialStartKey: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.InitialStartKey)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.InitialStartKey {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:initialStartKey: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetScanInOneSplit() {
		if err := oprot.WriteFieldBegin("scanInOneSplit", thrift.BOOL, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:scanInOneSplit: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.ScanInOneSplit)); err != nil {
			return fmt.Errorf("%T.scanInOneSplit (15) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:scanInOneSplit: %s", p, err)
		}
	}
	return err
}

func (p *ScanRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScanRequest(%+v)", *p)
}

type ScanResult_ struct {
	NextStartKey   Dictionary          `thrift:"nextStartKey,1" json:"nextStartKey"`
	Records        []map[string]*Datum `thrift:"records,2" json:"records"`
	Throttled      *bool               `thrift:"throttled,3" json:"throttled"`
	NextSplitIndex int32               `thrift:"nextSplitIndex,4" json:"nextSplitIndex"`
}

func NewScanResult_() *ScanResult_ {
	return &ScanResult_{
		NextSplitIndex: -1,
	}
}

var ScanResult__NextStartKey_DEFAULT Dictionary

func (p *ScanResult_) GetNextStartKey() Dictionary {
	return p.NextStartKey
}

var ScanResult__Records_DEFAULT []map[string]*Datum

func (p *ScanResult_) GetRecords() []map[string]*Datum {
	return p.Records
}

var ScanResult__Throttled_DEFAULT bool

func (p *ScanResult_) GetThrottled() bool {
	if !p.IsSetThrottled() {
		return ScanResult__Throttled_DEFAULT
	}
	return *p.Throttled
}

var ScanResult__NextSplitIndex_DEFAULT int32 = -1

func (p *ScanResult_) GetNextSplitIndex() int32 {
	return p.NextSplitIndex
}
func (p *ScanResult_) IsSetNextStartKey() bool {
	return p.NextStartKey != nil
}

func (p *ScanResult_) IsSetRecords() bool {
	return p.Records != nil
}

func (p *ScanResult_) IsSetThrottled() bool {
	return p.Throttled != nil
}

func (p *ScanResult_) IsSetNextSplitIndex() bool {
	return p.NextSplitIndex != ScanResult__NextSplitIndex_DEFAULT
}

func (p *ScanResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ScanResult_) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.NextStartKey = tMap
	for i := 0; i < size; i++ {
		var _key50 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key50 = v
		}
		_val51 := &Datum{}
		if err := _val51.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val51, err)
		}
		p.NextStartKey[_key50] = _val51
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ScanResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]map[string]*Datum, 0, size)
	p.Records = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(Dictionary, size)
		_elem52 := tMap
		for i := 0; i < size; i++ {
			var _key53 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_key53 = v
			}
			_val54 := &Datum{}
			if err := _val54.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _val54, err)
			}
			_elem52[_key53] = _val54
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.Records = append(p.Records, _elem52)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ScanResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Throttled = &v
	}
	return nil
}

func (p *ScanResult_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NextSplitIndex = v
	}
	return nil
}

func (p *ScanResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ScanResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ScanResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextStartKey() {
		if err := oprot.WriteFieldBegin("nextStartKey", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:nextStartKey: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.NextStartKey)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.NextStartKey {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:nextStartKey: %s", p, err)
		}
	}
	return err
}

func (p *ScanResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecords() {
		if err := oprot.WriteFieldBegin("records", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:records: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.Records)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Records {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(v)); err != nil {
				return fmt.Errorf("error writing map begin: %s", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v, err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:records: %s", p, err)
		}
	}
	return err
}

func (p *ScanResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetThrottled() {
		if err := oprot.WriteFieldBegin("throttled", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:throttled: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Throttled)); err != nil {
			return fmt.Errorf("%T.throttled (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:throttled: %s", p, err)
		}
	}
	return err
}

func (p *ScanResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextSplitIndex() {
		if err := oprot.WriteFieldBegin("nextSplitIndex", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:nextSplitIndex: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.NextSplitIndex)); err != nil {
			return fmt.Errorf("%T.nextSplitIndex (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:nextSplitIndex: %s", p, err)
		}
	}
	return err
}

func (p *ScanResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScanResult_(%+v)", *p)
}

type BatchRequestItem struct {
	Action  *BatchOp `thrift:"action,1" json:"action"`
	Request *Request `thrift:"request,2" json:"request"`
}

func NewBatchRequestItem() *BatchRequestItem {
	return &BatchRequestItem{}
}

var BatchRequestItem_Action_DEFAULT BatchOp

func (p *BatchRequestItem) GetAction() BatchOp {
	if !p.IsSetAction() {
		return BatchRequestItem_Action_DEFAULT
	}
	return *p.Action
}

var BatchRequestItem_Request_DEFAULT *Request

func (p *BatchRequestItem) GetRequest() *Request {
	if !p.IsSetRequest() {
		return BatchRequestItem_Request_DEFAULT
	}
	return p.Request
}
func (p *BatchRequestItem) IsSetAction() bool {
	return p.Action != nil
}

func (p *BatchRequestItem) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BatchRequestItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BatchRequestItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := BatchOp(v)
		p.Action = &temp
	}
	return nil
}

func (p *BatchRequestItem) ReadField2(iprot thrift.TProtocol) error {
	p.Request = &Request{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *BatchRequestItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BatchRequestItem"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BatchRequestItem) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAction() {
		if err := oprot.WriteFieldBegin("action", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:action: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Action)); err != nil {
			return fmt.Errorf("%T.action (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:action: %s", p, err)
		}
	}
	return err
}

func (p *BatchRequestItem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequest() {
		if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:request: %s", p, err)
		}
		if err := p.Request.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Request, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:request: %s", p, err)
		}
	}
	return err
}

func (p *BatchRequestItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchRequestItem(%+v)", *p)
}

type Result_ struct {
	GetResult_       *GetResult_       `thrift:"getResult,1" json:"getResult"`
	PutResult_       *PutResult_       `thrift:"putResult,2" json:"putResult"`
	IncrementResult_ *IncrementResult_ `thrift:"incrementResult,3" json:"incrementResult"`
	RemoveResult_    *RemoveResult_    `thrift:"removeResult,4" json:"removeResult"`
}

func NewResult_() *Result_ {
	return &Result_{}
}

var Result__GetResult__DEFAULT *GetResult_

func (p *Result_) GetGetResult_() *GetResult_ {
	if !p.IsSetGetResult_() {
		return Result__GetResult__DEFAULT
	}
	return p.GetResult_
}

var Result__PutResult__DEFAULT *PutResult_

func (p *Result_) GetPutResult_() *PutResult_ {
	if !p.IsSetPutResult_() {
		return Result__PutResult__DEFAULT
	}
	return p.PutResult_
}

var Result__IncrementResult__DEFAULT *IncrementResult_

func (p *Result_) GetIncrementResult_() *IncrementResult_ {
	if !p.IsSetIncrementResult_() {
		return Result__IncrementResult__DEFAULT
	}
	return p.IncrementResult_
}

var Result__RemoveResult__DEFAULT *RemoveResult_

func (p *Result_) GetRemoveResult_() *RemoveResult_ {
	if !p.IsSetRemoveResult_() {
		return Result__RemoveResult__DEFAULT
	}
	return p.RemoveResult_
}
func (p *Result_) IsSetGetResult_() bool {
	return p.GetResult_ != nil
}

func (p *Result_) IsSetPutResult_() bool {
	return p.PutResult_ != nil
}

func (p *Result_) IsSetIncrementResult_() bool {
	return p.IncrementResult_ != nil
}

func (p *Result_) IsSetRemoveResult_() bool {
	return p.RemoveResult_ != nil
}

func (p *Result_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Result_) ReadField1(iprot thrift.TProtocol) error {
	p.GetResult_ = &GetResult_{}
	if err := p.GetResult_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GetResult_, err)
	}
	return nil
}

func (p *Result_) ReadField2(iprot thrift.TProtocol) error {
	p.PutResult_ = &PutResult_{}
	if err := p.PutResult_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PutResult_, err)
	}
	return nil
}

func (p *Result_) ReadField3(iprot thrift.TProtocol) error {
	p.IncrementResult_ = &IncrementResult_{}
	if err := p.IncrementResult_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.IncrementResult_, err)
	}
	return nil
}

func (p *Result_) ReadField4(iprot thrift.TProtocol) error {
	p.RemoveResult_ = &RemoveResult_{}
	if err := p.RemoveResult_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RemoveResult_, err)
	}
	return nil
}

func (p *Result_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Result_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGetResult_() {
		if err := oprot.WriteFieldBegin("getResult", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:getResult: %s", p, err)
		}
		if err := p.GetResult_.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.GetResult_, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:getResult: %s", p, err)
		}
	}
	return err
}

func (p *Result_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPutResult_() {
		if err := oprot.WriteFieldBegin("putResult", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:putResult: %s", p, err)
		}
		if err := p.PutResult_.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PutResult_, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:putResult: %s", p, err)
		}
	}
	return err
}

func (p *Result_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncrementResult_() {
		if err := oprot.WriteFieldBegin("incrementResult", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:incrementResult: %s", p, err)
		}
		if err := p.IncrementResult_.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.IncrementResult_, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:incrementResult: %s", p, err)
		}
	}
	return err
}

func (p *Result_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoveResult_() {
		if err := oprot.WriteFieldBegin("removeResult", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:removeResult: %s", p, err)
		}
		if err := p.RemoveResult_.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RemoveResult_, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:removeResult: %s", p, err)
		}
	}
	return err
}

func (p *Result_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Result_(%+v)", *p)
}

type BatchResultItem struct {
	Action           *BatchOp                 `thrift:"action,1" json:"action"`
	Success          *bool                    `thrift:"success,2" json:"success"`
	Result_          *Result_                 `thrift:"result,3" json:"result"`
	ServiceException *errors.ServiceException `thrift:"serviceException,4" json:"serviceException"`
}

func NewBatchResultItem() *BatchResultItem {
	return &BatchResultItem{}
}

var BatchResultItem_Action_DEFAULT BatchOp

func (p *BatchResultItem) GetAction() BatchOp {
	if !p.IsSetAction() {
		return BatchResultItem_Action_DEFAULT
	}
	return *p.Action
}

var BatchResultItem_Success_DEFAULT bool

func (p *BatchResultItem) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return BatchResultItem_Success_DEFAULT
	}
	return *p.Success
}

var BatchResultItem_Result__DEFAULT *Result_

func (p *BatchResultItem) GetResult_() *Result_ {
	if !p.IsSetResult_() {
		return BatchResultItem_Result__DEFAULT
	}
	return p.Result_
}

var BatchResultItem_ServiceException_DEFAULT *errors.ServiceException

func (p *BatchResultItem) GetServiceException() *errors.ServiceException {
	if !p.IsSetServiceException() {
		return BatchResultItem_ServiceException_DEFAULT
	}
	return p.ServiceException
}
func (p *BatchResultItem) IsSetAction() bool {
	return p.Action != nil
}

func (p *BatchResultItem) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BatchResultItem) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *BatchResultItem) IsSetServiceException() bool {
	return p.ServiceException != nil
}

func (p *BatchResultItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BatchResultItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := BatchOp(v)
		p.Action = &temp
	}
	return nil
}

func (p *BatchResultItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BatchResultItem) ReadField3(iprot thrift.TProtocol) error {
	p.Result_ = &Result_{}
	if err := p.Result_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Result_, err)
	}
	return nil
}

func (p *BatchResultItem) ReadField4(iprot thrift.TProtocol) error {
	p.ServiceException = &errors.ServiceException{}
	if err := p.ServiceException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ServiceException, err)
	}
	return nil
}

func (p *BatchResultItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BatchResultItem"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BatchResultItem) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAction() {
		if err := oprot.WriteFieldBegin("action", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:action: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Action)); err != nil {
			return fmt.Errorf("%T.action (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:action: %s", p, err)
		}
	}
	return err
}

func (p *BatchResultItem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:success: %s", p, err)
		}
	}
	return err
}

func (p *BatchResultItem) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetResult_() {
		if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:result: %s", p, err)
		}
		if err := p.Result_.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Result_, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:result: %s", p, err)
		}
	}
	return err
}

func (p *BatchResultItem) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceException() {
		if err := oprot.WriteFieldBegin("serviceException", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:serviceException: %s", p, err)
		}
		if err := p.ServiceException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ServiceException, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:serviceException: %s", p, err)
		}
	}
	return err
}

func (p *BatchResultItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchResultItem(%+v)", *p)
}

type BatchRequest struct {
	Items []*BatchRequestItem `thrift:"items,1" json:"items"`
}

func NewBatchRequest() *BatchRequest {
	return &BatchRequest{}
}

var BatchRequest_Items_DEFAULT []*BatchRequestItem

func (p *BatchRequest) GetItems() []*BatchRequestItem {
	return p.Items
}
func (p *BatchRequest) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BatchRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*BatchRequestItem, 0, size)
	p.Items = tSlice
	for i := 0; i < size; i++ {
		_elem55 := &BatchRequestItem{}
		if err := _elem55.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem55, err)
		}
		p.Items = append(p.Items, _elem55)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *BatchRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BatchRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BatchRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err := oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:items: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:items: %s", p, err)
		}
	}
	return err
}

func (p *BatchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchRequest(%+v)", *p)
}

type BatchResult_ struct {
	Items []*BatchResultItem `thrift:"items,1" json:"items"`
}

func NewBatchResult_() *BatchResult_ {
	return &BatchResult_{}
}

var BatchResult__Items_DEFAULT []*BatchResultItem

func (p *BatchResult_) GetItems() []*BatchResultItem {
	return p.Items
}
func (p *BatchResult_) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BatchResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*BatchResultItem, 0, size)
	p.Items = tSlice
	for i := 0; i < size; i++ {
		_elem56 := &BatchResultItem{}
		if err := _elem56.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem56, err)
		}
		p.Items = append(p.Items, _elem56)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *BatchResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BatchResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BatchResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err := oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:items: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:items: %s", p, err)
		}
	}
	return err
}

func (p *BatchResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchResult_(%+v)", *p)
}

type EditDatum struct {
	EditType *EditType `thrift:"editType,1" json:"editType"`
	Datum    *Datum    `thrift:"datum,2" json:"datum"`
}

func NewEditDatum() *EditDatum {
	return &EditDatum{}
}

var EditDatum_EditType_DEFAULT EditType

func (p *EditDatum) GetEditType() EditType {
	if !p.IsSetEditType() {
		return EditDatum_EditType_DEFAULT
	}
	return *p.EditType
}

var EditDatum_Datum_DEFAULT *Datum

func (p *EditDatum) GetDatum() *Datum {
	if !p.IsSetDatum() {
		return EditDatum_Datum_DEFAULT
	}
	return p.Datum
}
func (p *EditDatum) IsSetEditType() bool {
	return p.EditType != nil
}

func (p *EditDatum) IsSetDatum() bool {
	return p.Datum != nil
}

func (p *EditDatum) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EditDatum) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := EditType(v)
		p.EditType = &temp
	}
	return nil
}

func (p *EditDatum) ReadField2(iprot thrift.TProtocol) error {
	p.Datum = &Datum{}
	if err := p.Datum.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Datum, err)
	}
	return nil
}

func (p *EditDatum) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EditDatum"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EditDatum) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEditType() {
		if err := oprot.WriteFieldBegin("editType", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:editType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.EditType)); err != nil {
			return fmt.Errorf("%T.editType (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:editType: %s", p, err)
		}
	}
	return err
}

func (p *EditDatum) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatum() {
		if err := oprot.WriteFieldBegin("datum", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:datum: %s", p, err)
		}
		if err := p.Datum.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Datum, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:datum: %s", p, err)
		}
	}
	return err
}

func (p *EditDatum) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EditDatum(%+v)", *p)
}

type RowEdit struct {
	Keys          Dictionary     `thrift:"keys,1" json:"keys"`
	Edits         EditDictionary `thrift:"edits,2" json:"edits"`
	ConsumeOffset *int64         `thrift:"consumeOffset,3" json:"consumeOffset"`
	DeleteRow     *bool          `thrift:"deleteRow,4" json:"deleteRow"`
}

func NewRowEdit() *RowEdit {
	return &RowEdit{}
}

var RowEdit_Keys_DEFAULT Dictionary

func (p *RowEdit) GetKeys() Dictionary {
	return p.Keys
}

var RowEdit_Edits_DEFAULT EditDictionary

func (p *RowEdit) GetEdits() EditDictionary {
	return p.Edits
}

var RowEdit_ConsumeOffset_DEFAULT int64

func (p *RowEdit) GetConsumeOffset() int64 {
	if !p.IsSetConsumeOffset() {
		return RowEdit_ConsumeOffset_DEFAULT
	}
	return *p.ConsumeOffset
}

var RowEdit_DeleteRow_DEFAULT bool

func (p *RowEdit) GetDeleteRow() bool {
	if !p.IsSetDeleteRow() {
		return RowEdit_DeleteRow_DEFAULT
	}
	return *p.DeleteRow
}
func (p *RowEdit) IsSetKeys() bool {
	return p.Keys != nil
}

func (p *RowEdit) IsSetEdits() bool {
	return p.Edits != nil
}

func (p *RowEdit) IsSetConsumeOffset() bool {
	return p.ConsumeOffset != nil
}

func (p *RowEdit) IsSetDeleteRow() bool {
	return p.DeleteRow != nil
}

func (p *RowEdit) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RowEdit) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.Keys = tMap
	for i := 0; i < size; i++ {
		var _key57 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key57 = v
		}
		_val58 := &Datum{}
		if err := _val58.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val58, err)
		}
		p.Keys[_key57] = _val58
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *RowEdit) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(EditDictionary, size)
	p.Edits = tMap
	for i := 0; i < size; i++ {
		var _key59 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key59 = v
		}
		_val60 := &EditDatum{}
		if err := _val60.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val60, err)
		}
		p.Edits[_key59] = _val60
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *RowEdit) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ConsumeOffset = &v
	}
	return nil
}

func (p *RowEdit) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeleteRow = &v
	}
	return nil
}

func (p *RowEdit) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RowEdit"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RowEdit) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeys() {
		if err := oprot.WriteFieldBegin("keys", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:keys: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Keys)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Keys {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:keys: %s", p, err)
		}
	}
	return err
}

func (p *RowEdit) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEdits() {
		if err := oprot.WriteFieldBegin("edits", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:edits: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Edits)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Edits {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:edits: %s", p, err)
		}
	}
	return err
}

func (p *RowEdit) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumeOffset() {
		if err := oprot.WriteFieldBegin("consumeOffset", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:consumeOffset: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ConsumeOffset)); err != nil {
			return fmt.Errorf("%T.consumeOffset (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:consumeOffset: %s", p, err)
		}
	}
	return err
}

func (p *RowEdit) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteRow() {
		if err := oprot.WriteFieldBegin("deleteRow", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:deleteRow: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.DeleteRow)); err != nil {
			return fmt.Errorf("%T.deleteRow (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:deleteRow: %s", p, err)
		}
	}
	return err
}

func (p *RowEdit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RowEdit(%+v)", *p)
}

type DataConsumeRequest struct {
	TableName      *string    `thrift:"tableName,1" json:"tableName"`
	PartitionId    *int32     `thrift:"partitionId,2" json:"partitionId"`
	SubscriberName *string    `thrift:"subscriberName,3" json:"subscriberName"`
	ConsumeNumber  *int32     `thrift:"consumeNumber,4" json:"consumeNumber"`
	ConsumeOffset  Dictionary `thrift:"consumeOffset,5" json:"consumeOffset"`
}

func NewDataConsumeRequest() *DataConsumeRequest {
	return &DataConsumeRequest{}
}

var DataConsumeRequest_TableName_DEFAULT string

func (p *DataConsumeRequest) GetTableName() string {
	if !p.IsSetTableName() {
		return DataConsumeRequest_TableName_DEFAULT
	}
	return *p.TableName
}

var DataConsumeRequest_PartitionId_DEFAULT int32

func (p *DataConsumeRequest) GetPartitionId() int32 {
	if !p.IsSetPartitionId() {
		return DataConsumeRequest_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var DataConsumeRequest_SubscriberName_DEFAULT string

func (p *DataConsumeRequest) GetSubscriberName() string {
	if !p.IsSetSubscriberName() {
		return DataConsumeRequest_SubscriberName_DEFAULT
	}
	return *p.SubscriberName
}

var DataConsumeRequest_ConsumeNumber_DEFAULT int32

func (p *DataConsumeRequest) GetConsumeNumber() int32 {
	if !p.IsSetConsumeNumber() {
		return DataConsumeRequest_ConsumeNumber_DEFAULT
	}
	return *p.ConsumeNumber
}

var DataConsumeRequest_ConsumeOffset_DEFAULT Dictionary

func (p *DataConsumeRequest) GetConsumeOffset() Dictionary {
	return p.ConsumeOffset
}
func (p *DataConsumeRequest) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *DataConsumeRequest) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *DataConsumeRequest) IsSetSubscriberName() bool {
	return p.SubscriberName != nil
}

func (p *DataConsumeRequest) IsSetConsumeNumber() bool {
	return p.ConsumeNumber != nil
}

func (p *DataConsumeRequest) IsSetConsumeOffset() bool {
	return p.ConsumeOffset != nil
}

func (p *DataConsumeRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DataConsumeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *DataConsumeRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PartitionId = &v
	}
	return nil
}

func (p *DataConsumeRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SubscriberName = &v
	}
	return nil
}

func (p *DataConsumeRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ConsumeNumber = &v
	}
	return nil
}

func (p *DataConsumeRequest) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.ConsumeOffset = tMap
	for i := 0; i < size; i++ {
		var _key61 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key61 = v
		}
		_val62 := &Datum{}
		if err := _val62.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val62, err)
		}
		p.ConsumeOffset[_key61] = _val62
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *DataConsumeRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DataConsumeRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DataConsumeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
		}
	}
	return err
}

func (p *DataConsumeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err := oprot.WriteFieldBegin("partitionId", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:partitionId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.PartitionId)); err != nil {
			return fmt.Errorf("%T.partitionId (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:partitionId: %s", p, err)
		}
	}
	return err
}

func (p *DataConsumeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubscriberName() {
		if err := oprot.WriteFieldBegin("subscriberName", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:subscriberName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SubscriberName)); err != nil {
			return fmt.Errorf("%T.subscriberName (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:subscriberName: %s", p, err)
		}
	}
	return err
}

func (p *DataConsumeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumeNumber() {
		if err := oprot.WriteFieldBegin("consumeNumber", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:consumeNumber: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ConsumeNumber)); err != nil {
			return fmt.Errorf("%T.consumeNumber (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:consumeNumber: %s", p, err)
		}
	}
	return err
}

func (p *DataConsumeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumeOffset() {
		if err := oprot.WriteFieldBegin("consumeOffset", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:consumeOffset: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ConsumeOffset)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.ConsumeOffset {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:consumeOffset: %s", p, err)
		}
	}
	return err
}

func (p *DataConsumeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataConsumeRequest(%+v)", *p)
}

type DataConsumeResult_ struct {
	NextConsumeOffset Dictionary          `thrift:"nextConsumeOffset,1" json:"nextConsumeOffset"`
	Records           []map[string]*Datum `thrift:"records,2" json:"records"`
	Keys              []string            `thrift:"keys,3" json:"keys"`
	Throttled         *bool               `thrift:"throttled,4" json:"throttled"`
}

func NewDataConsumeResult_() *DataConsumeResult_ {
	return &DataConsumeResult_{}
}

var DataConsumeResult__NextConsumeOffset_DEFAULT Dictionary

func (p *DataConsumeResult_) GetNextConsumeOffset() Dictionary {
	return p.NextConsumeOffset
}

var DataConsumeResult__Records_DEFAULT []map[string]*Datum

func (p *DataConsumeResult_) GetRecords() []map[string]*Datum {
	return p.Records
}

var DataConsumeResult__Keys_DEFAULT []string

func (p *DataConsumeResult_) GetKeys() []string {
	return p.Keys
}

var DataConsumeResult__Throttled_DEFAULT bool

func (p *DataConsumeResult_) GetThrottled() bool {
	if !p.IsSetThrottled() {
		return DataConsumeResult__Throttled_DEFAULT
	}
	return *p.Throttled
}
func (p *DataConsumeResult_) IsSetNextConsumeOffset() bool {
	return p.NextConsumeOffset != nil
}

func (p *DataConsumeResult_) IsSetRecords() bool {
	return p.Records != nil
}

func (p *DataConsumeResult_) IsSetKeys() bool {
	return p.Keys != nil
}

func (p *DataConsumeResult_) IsSetThrottled() bool {
	return p.Throttled != nil
}

func (p *DataConsumeResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DataConsumeResult_) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.NextConsumeOffset = tMap
	for i := 0; i < size; i++ {
		var _key63 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key63 = v
		}
		_val64 := &Datum{}
		if err := _val64.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val64, err)
		}
		p.NextConsumeOffset[_key63] = _val64
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *DataConsumeResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]map[string]*Datum, 0, size)
	p.Records = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(Dictionary, size)
		_elem65 := tMap
		for i := 0; i < size; i++ {
			var _key66 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_key66 = v
			}
			_val67 := &Datum{}
			if err := _val67.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _val67, err)
			}
			_elem65[_key66] = _val67
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.Records = append(p.Records, _elem65)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DataConsumeResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Keys = tSlice
	for i := 0; i < size; i++ {
		var _elem68 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem68 = v
		}
		p.Keys = append(p.Keys, _elem68)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DataConsumeResult_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Throttled = &v
	}
	return nil
}

func (p *DataConsumeResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DataConsumeResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DataConsumeResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextConsumeOffset() {
		if err := oprot.WriteFieldBegin("nextConsumeOffset", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:nextConsumeOffset: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.NextConsumeOffset)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.NextConsumeOffset {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:nextConsumeOffset: %s", p, err)
		}
	}
	return err
}

func (p *DataConsumeResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecords() {
		if err := oprot.WriteFieldBegin("records", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:records: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.Records)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Records {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(v)); err != nil {
				return fmt.Errorf("error writing map begin: %s", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p, err)
				}
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v, err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:records: %s", p, err)
		}
	}
	return err
}

func (p *DataConsumeResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeys() {
		if err := oprot.WriteFieldBegin("keys", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:keys: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Keys {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:keys: %s", p, err)
		}
	}
	return err
}

func (p *DataConsumeResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetThrottled() {
		if err := oprot.WriteFieldBegin("throttled", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:throttled: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Throttled)); err != nil {
			return fmt.Errorf("%T.throttled (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:throttled: %s", p, err)
		}
	}
	return err
}

func (p *DataConsumeResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataConsumeResult_(%+v)", *p)
}

type EditConsumeRequest struct {
	TableName      *string `thrift:"tableName,1" json:"tableName"`
	PartitionId    *int32  `thrift:"partitionId,2" json:"partitionId"`
	SubscriberName *string `thrift:"subscriberName,3" json:"subscriberName"`
	ConsumeNumber  *int32  `thrift:"consumeNumber,4" json:"consumeNumber"`
	ConsumeOffset  int64   `thrift:"consumeOffset,5" json:"consumeOffset"`
}

func NewEditConsumeRequest() *EditConsumeRequest {
	return &EditConsumeRequest{
		ConsumeOffset: -1,
	}
}

var EditConsumeRequest_TableName_DEFAULT string

func (p *EditConsumeRequest) GetTableName() string {
	if !p.IsSetTableName() {
		return EditConsumeRequest_TableName_DEFAULT
	}
	return *p.TableName
}

var EditConsumeRequest_PartitionId_DEFAULT int32

func (p *EditConsumeRequest) GetPartitionId() int32 {
	if !p.IsSetPartitionId() {
		return EditConsumeRequest_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var EditConsumeRequest_SubscriberName_DEFAULT string

func (p *EditConsumeRequest) GetSubscriberName() string {
	if !p.IsSetSubscriberName() {
		return EditConsumeRequest_SubscriberName_DEFAULT
	}
	return *p.SubscriberName
}

var EditConsumeRequest_ConsumeNumber_DEFAULT int32

func (p *EditConsumeRequest) GetConsumeNumber() int32 {
	if !p.IsSetConsumeNumber() {
		return EditConsumeRequest_ConsumeNumber_DEFAULT
	}
	return *p.ConsumeNumber
}

var EditConsumeRequest_ConsumeOffset_DEFAULT int64 = -1

func (p *EditConsumeRequest) GetConsumeOffset() int64 {
	return p.ConsumeOffset
}
func (p *EditConsumeRequest) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *EditConsumeRequest) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *EditConsumeRequest) IsSetSubscriberName() bool {
	return p.SubscriberName != nil
}

func (p *EditConsumeRequest) IsSetConsumeNumber() bool {
	return p.ConsumeNumber != nil
}

func (p *EditConsumeRequest) IsSetConsumeOffset() bool {
	return p.ConsumeOffset != EditConsumeRequest_ConsumeOffset_DEFAULT
}

func (p *EditConsumeRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EditConsumeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *EditConsumeRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PartitionId = &v
	}
	return nil
}

func (p *EditConsumeRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SubscriberName = &v
	}
	return nil
}

func (p *EditConsumeRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ConsumeNumber = &v
	}
	return nil
}

func (p *EditConsumeRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ConsumeOffset = v
	}
	return nil
}

func (p *EditConsumeRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EditConsumeRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EditConsumeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
		}
	}
	return err
}

func (p *EditConsumeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err := oprot.WriteFieldBegin("partitionId", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:partitionId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.PartitionId)); err != nil {
			return fmt.Errorf("%T.partitionId (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:partitionId: %s", p, err)
		}
	}
	return err
}

func (p *EditConsumeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubscriberName() {
		if err := oprot.WriteFieldBegin("subscriberName", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:subscriberName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SubscriberName)); err != nil {
			return fmt.Errorf("%T.subscriberName (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:subscriberName: %s", p, err)
		}
	}
	return err
}

func (p *EditConsumeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumeNumber() {
		if err := oprot.WriteFieldBegin("consumeNumber", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:consumeNumber: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ConsumeNumber)); err != nil {
			return fmt.Errorf("%T.consumeNumber (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:consumeNumber: %s", p, err)
		}
	}
	return err
}

func (p *EditConsumeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumeOffset() {
		if err := oprot.WriteFieldBegin("consumeOffset", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:consumeOffset: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.ConsumeOffset)); err != nil {
			return fmt.Errorf("%T.consumeOffset (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:consumeOffset: %s", p, err)
		}
	}
	return err
}

func (p *EditConsumeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EditConsumeRequest(%+v)", *p)
}

type EditConsumeResult_ struct {
	NextConsumeOffset *int64     `thrift:"nextConsumeOffset,1" json:"nextConsumeOffset"`
	RowEdits          []*RowEdit `thrift:"rowEdits,2" json:"rowEdits"`
	Throttled         *bool      `thrift:"throttled,3" json:"throttled"`
}

func NewEditConsumeResult_() *EditConsumeResult_ {
	return &EditConsumeResult_{}
}

var EditConsumeResult__NextConsumeOffset_DEFAULT int64

func (p *EditConsumeResult_) GetNextConsumeOffset() int64 {
	if !p.IsSetNextConsumeOffset() {
		return EditConsumeResult__NextConsumeOffset_DEFAULT
	}
	return *p.NextConsumeOffset
}

var EditConsumeResult__RowEdits_DEFAULT []*RowEdit

func (p *EditConsumeResult_) GetRowEdits() []*RowEdit {
	return p.RowEdits
}

var EditConsumeResult__Throttled_DEFAULT bool

func (p *EditConsumeResult_) GetThrottled() bool {
	if !p.IsSetThrottled() {
		return EditConsumeResult__Throttled_DEFAULT
	}
	return *p.Throttled
}
func (p *EditConsumeResult_) IsSetNextConsumeOffset() bool {
	return p.NextConsumeOffset != nil
}

func (p *EditConsumeResult_) IsSetRowEdits() bool {
	return p.RowEdits != nil
}

func (p *EditConsumeResult_) IsSetThrottled() bool {
	return p.Throttled != nil
}

func (p *EditConsumeResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EditConsumeResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.NextConsumeOffset = &v
	}
	return nil
}

func (p *EditConsumeResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*RowEdit, 0, size)
	p.RowEdits = tSlice
	for i := 0; i < size; i++ {
		_elem69 := &RowEdit{}
		if err := _elem69.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem69, err)
		}
		p.RowEdits = append(p.RowEdits, _elem69)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *EditConsumeResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Throttled = &v
	}
	return nil
}

func (p *EditConsumeResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EditConsumeResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EditConsumeResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextConsumeOffset() {
		if err := oprot.WriteFieldBegin("nextConsumeOffset", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:nextConsumeOffset: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.NextConsumeOffset)); err != nil {
			return fmt.Errorf("%T.nextConsumeOffset (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:nextConsumeOffset: %s", p, err)
		}
	}
	return err
}

func (p *EditConsumeResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowEdits() {
		if err := oprot.WriteFieldBegin("rowEdits", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:rowEdits: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowEdits)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.RowEdits {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:rowEdits: %s", p, err)
		}
	}
	return err
}

func (p *EditConsumeResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetThrottled() {
		if err := oprot.WriteFieldBegin("throttled", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:throttled: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Throttled)); err != nil {
			return fmt.Errorf("%T.throttled (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:throttled: %s", p, err)
		}
	}
	return err
}

func (p *EditConsumeResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EditConsumeResult_(%+v)", *p)
}

type DataCommitRequest struct {
	TableName          *string    `thrift:"tableName,1" json:"tableName"`
	PartitionId        *int32     `thrift:"partitionId,2" json:"partitionId"`
	SubscriberName     *string    `thrift:"subscriberName,3" json:"subscriberName"`
	LastConsumedOffset Dictionary `thrift:"lastConsumedOffset,4" json:"lastConsumedOffset"`
	CommitNumber       *int32     `thrift:"commitNumber,5" json:"commitNumber"`
}

func NewDataCommitRequest() *DataCommitRequest {
	return &DataCommitRequest{}
}

var DataCommitRequest_TableName_DEFAULT string

func (p *DataCommitRequest) GetTableName() string {
	if !p.IsSetTableName() {
		return DataCommitRequest_TableName_DEFAULT
	}
	return *p.TableName
}

var DataCommitRequest_PartitionId_DEFAULT int32

func (p *DataCommitRequest) GetPartitionId() int32 {
	if !p.IsSetPartitionId() {
		return DataCommitRequest_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var DataCommitRequest_SubscriberName_DEFAULT string

func (p *DataCommitRequest) GetSubscriberName() string {
	if !p.IsSetSubscriberName() {
		return DataCommitRequest_SubscriberName_DEFAULT
	}
	return *p.SubscriberName
}

var DataCommitRequest_LastConsumedOffset_DEFAULT Dictionary

func (p *DataCommitRequest) GetLastConsumedOffset() Dictionary {
	return p.LastConsumedOffset
}

var DataCommitRequest_CommitNumber_DEFAULT int32

func (p *DataCommitRequest) GetCommitNumber() int32 {
	if !p.IsSetCommitNumber() {
		return DataCommitRequest_CommitNumber_DEFAULT
	}
	return *p.CommitNumber
}
func (p *DataCommitRequest) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *DataCommitRequest) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *DataCommitRequest) IsSetSubscriberName() bool {
	return p.SubscriberName != nil
}

func (p *DataCommitRequest) IsSetLastConsumedOffset() bool {
	return p.LastConsumedOffset != nil
}

func (p *DataCommitRequest) IsSetCommitNumber() bool {
	return p.CommitNumber != nil
}

func (p *DataCommitRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DataCommitRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *DataCommitRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PartitionId = &v
	}
	return nil
}

func (p *DataCommitRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SubscriberName = &v
	}
	return nil
}

func (p *DataCommitRequest) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.LastConsumedOffset = tMap
	for i := 0; i < size; i++ {
		var _key70 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key70 = v
		}
		_val71 := &Datum{}
		if err := _val71.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val71, err)
		}
		p.LastConsumedOffset[_key70] = _val71
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *DataCommitRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CommitNumber = &v
	}
	return nil
}

func (p *DataCommitRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DataCommitRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DataCommitRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
		}
	}
	return err
}

func (p *DataCommitRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err := oprot.WriteFieldBegin("partitionId", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:partitionId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.PartitionId)); err != nil {
			return fmt.Errorf("%T.partitionId (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:partitionId: %s", p, err)
		}
	}
	return err
}

func (p *DataCommitRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubscriberName() {
		if err := oprot.WriteFieldBegin("subscriberName", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:subscriberName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SubscriberName)); err != nil {
			return fmt.Errorf("%T.subscriberName (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:subscriberName: %s", p, err)
		}
	}
	return err
}

func (p *DataCommitRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastConsumedOffset() {
		if err := oprot.WriteFieldBegin("lastConsumedOffset", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:lastConsumedOffset: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.LastConsumedOffset)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.LastConsumedOffset {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:lastConsumedOffset: %s", p, err)
		}
	}
	return err
}

func (p *DataCommitRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitNumber() {
		if err := oprot.WriteFieldBegin("commitNumber", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:commitNumber: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.CommitNumber)); err != nil {
			return fmt.Errorf("%T.commitNumber (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:commitNumber: %s", p, err)
		}
	}
	return err
}

func (p *DataCommitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataCommitRequest(%+v)", *p)
}

type DataCommitResult_ struct {
	Success *bool `thrift:"success,1" json:"success"`
}

func NewDataCommitResult_() *DataCommitResult_ {
	return &DataCommitResult_{}
}

var DataCommitResult__Success_DEFAULT bool

func (p *DataCommitResult_) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DataCommitResult__Success_DEFAULT
	}
	return *p.Success
}
func (p *DataCommitResult_) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DataCommitResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DataCommitResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DataCommitResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DataCommitResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DataCommitResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:success: %s", p, err)
		}
	}
	return err
}

func (p *DataCommitResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataCommitResult_(%+v)", *p)
}

type EditCommitRequest struct {
	TableName          *string `thrift:"tableName,1" json:"tableName"`
	PartitionId        *int32  `thrift:"partitionId,2" json:"partitionId"`
	SubscriberName     *string `thrift:"subscriberName,3" json:"subscriberName"`
	LastConsumedOffset *int64  `thrift:"lastConsumedOffset,4" json:"lastConsumedOffset"`
	CommitNumber       *int32  `thrift:"commitNumber,5" json:"commitNumber"`
}

func NewEditCommitRequest() *EditCommitRequest {
	return &EditCommitRequest{}
}

var EditCommitRequest_TableName_DEFAULT string

func (p *EditCommitRequest) GetTableName() string {
	if !p.IsSetTableName() {
		return EditCommitRequest_TableName_DEFAULT
	}
	return *p.TableName
}

var EditCommitRequest_PartitionId_DEFAULT int32

func (p *EditCommitRequest) GetPartitionId() int32 {
	if !p.IsSetPartitionId() {
		return EditCommitRequest_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var EditCommitRequest_SubscriberName_DEFAULT string

func (p *EditCommitRequest) GetSubscriberName() string {
	if !p.IsSetSubscriberName() {
		return EditCommitRequest_SubscriberName_DEFAULT
	}
	return *p.SubscriberName
}

var EditCommitRequest_LastConsumedOffset_DEFAULT int64

func (p *EditCommitRequest) GetLastConsumedOffset() int64 {
	if !p.IsSetLastConsumedOffset() {
		return EditCommitRequest_LastConsumedOffset_DEFAULT
	}
	return *p.LastConsumedOffset
}

var EditCommitRequest_CommitNumber_DEFAULT int32

func (p *EditCommitRequest) GetCommitNumber() int32 {
	if !p.IsSetCommitNumber() {
		return EditCommitRequest_CommitNumber_DEFAULT
	}
	return *p.CommitNumber
}
func (p *EditCommitRequest) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *EditCommitRequest) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *EditCommitRequest) IsSetSubscriberName() bool {
	return p.SubscriberName != nil
}

func (p *EditCommitRequest) IsSetLastConsumedOffset() bool {
	return p.LastConsumedOffset != nil
}

func (p *EditCommitRequest) IsSetCommitNumber() bool {
	return p.CommitNumber != nil
}

func (p *EditCommitRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EditCommitRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *EditCommitRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PartitionId = &v
	}
	return nil
}

func (p *EditCommitRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SubscriberName = &v
	}
	return nil
}

func (p *EditCommitRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.LastConsumedOffset = &v
	}
	return nil
}

func (p *EditCommitRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CommitNumber = &v
	}
	return nil
}

func (p *EditCommitRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EditCommitRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EditCommitRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
		}
	}
	return err
}

func (p *EditCommitRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err := oprot.WriteFieldBegin("partitionId", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:partitionId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.PartitionId)); err != nil {
			return fmt.Errorf("%T.partitionId (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:partitionId: %s", p, err)
		}
	}
	return err
}

func (p *EditCommitRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubscriberName() {
		if err := oprot.WriteFieldBegin("subscriberName", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:subscriberName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SubscriberName)); err != nil {
			return fmt.Errorf("%T.subscriberName (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:subscriberName: %s", p, err)
		}
	}
	return err
}

func (p *EditCommitRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastConsumedOffset() {
		if err := oprot.WriteFieldBegin("lastConsumedOffset", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:lastConsumedOffset: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.LastConsumedOffset)); err != nil {
			return fmt.Errorf("%T.lastConsumedOffset (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:lastConsumedOffset: %s", p, err)
		}
	}
	return err
}

func (p *EditCommitRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitNumber() {
		if err := oprot.WriteFieldBegin("commitNumber", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:commitNumber: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.CommitNumber)); err != nil {
			return fmt.Errorf("%T.commitNumber (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:commitNumber: %s", p, err)
		}
	}
	return err
}

func (p *EditCommitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EditCommitRequest(%+v)", *p)
}

type EditCommitResult_ struct {
	Success *bool `thrift:"success,1" json:"success"`
}

func NewEditCommitResult_() *EditCommitResult_ {
	return &EditCommitResult_{}
}

var EditCommitResult__Success_DEFAULT bool

func (p *EditCommitResult_) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return EditCommitResult__Success_DEFAULT
	}
	return *p.Success
}
func (p *EditCommitResult_) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EditCommitResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EditCommitResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *EditCommitResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EditCommitResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EditCommitResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:success: %s", p, err)
		}
	}
	return err
}

func (p *EditCommitResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EditCommitResult_(%+v)", *p)
}

type ConsumedOffset struct {
	ConsumedDataOffset  Dictionary `thrift:"consumedDataOffset,1" json:"consumedDataOffset"`
	DataConsumeFinished *bool      `thrift:"dataConsumeFinished,2" json:"dataConsumeFinished"`
	ConsumedEditOffset  *int64     `thrift:"consumedEditOffset,3" json:"consumedEditOffset"`
}

func NewConsumedOffset() *ConsumedOffset {
	return &ConsumedOffset{}
}

var ConsumedOffset_ConsumedDataOffset_DEFAULT Dictionary

func (p *ConsumedOffset) GetConsumedDataOffset() Dictionary {
	return p.ConsumedDataOffset
}

var ConsumedOffset_DataConsumeFinished_DEFAULT bool

func (p *ConsumedOffset) GetDataConsumeFinished() bool {
	if !p.IsSetDataConsumeFinished() {
		return ConsumedOffset_DataConsumeFinished_DEFAULT
	}
	return *p.DataConsumeFinished
}

var ConsumedOffset_ConsumedEditOffset_DEFAULT int64

func (p *ConsumedOffset) GetConsumedEditOffset() int64 {
	if !p.IsSetConsumedEditOffset() {
		return ConsumedOffset_ConsumedEditOffset_DEFAULT
	}
	return *p.ConsumedEditOffset
}
func (p *ConsumedOffset) IsSetConsumedDataOffset() bool {
	return p.ConsumedDataOffset != nil
}

func (p *ConsumedOffset) IsSetDataConsumeFinished() bool {
	return p.DataConsumeFinished != nil
}

func (p *ConsumedOffset) IsSetConsumedEditOffset() bool {
	return p.ConsumedEditOffset != nil
}

func (p *ConsumedOffset) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConsumedOffset) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.ConsumedDataOffset = tMap
	for i := 0; i < size; i++ {
		var _key72 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key72 = v
		}
		_val73 := &Datum{}
		if err := _val73.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val73, err)
		}
		p.ConsumedDataOffset[_key72] = _val73
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ConsumedOffset) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DataConsumeFinished = &v
	}
	return nil
}

func (p *ConsumedOffset) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ConsumedEditOffset = &v
	}
	return nil
}

func (p *ConsumedOffset) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumedOffset"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConsumedOffset) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumedDataOffset() {
		if err := oprot.WriteFieldBegin("consumedDataOffset", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:consumedDataOffset: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ConsumedDataOffset)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.ConsumedDataOffset {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:consumedDataOffset: %s", p, err)
		}
	}
	return err
}

func (p *ConsumedOffset) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataConsumeFinished() {
		if err := oprot.WriteFieldBegin("dataConsumeFinished", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:dataConsumeFinished: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.DataConsumeFinished)); err != nil {
			return fmt.Errorf("%T.dataConsumeFinished (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:dataConsumeFinished: %s", p, err)
		}
	}
	return err
}

func (p *ConsumedOffset) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsumedEditOffset() {
		if err := oprot.WriteFieldBegin("consumedEditOffset", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:consumedEditOffset: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ConsumedEditOffset)); err != nil {
			return fmt.Errorf("%T.consumedEditOffset (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:consumedEditOffset: %s", p, err)
		}
	}
	return err
}

func (p *ConsumedOffset) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumedOffset(%+v)", *p)
}

type CommittedOffset struct {
	CommittedDataOffset Dictionary `thrift:"committedDataOffset,1" json:"committedDataOffset"`
	DataCommitFinished  *bool      `thrift:"dataCommitFinished,2" json:"dataCommitFinished"`
	CommittedEditOffset *int64     `thrift:"committedEditOffset,3" json:"committedEditOffset"`
}

func NewCommittedOffset() *CommittedOffset {
	return &CommittedOffset{}
}

var CommittedOffset_CommittedDataOffset_DEFAULT Dictionary

func (p *CommittedOffset) GetCommittedDataOffset() Dictionary {
	return p.CommittedDataOffset
}

var CommittedOffset_DataCommitFinished_DEFAULT bool

func (p *CommittedOffset) GetDataCommitFinished() bool {
	if !p.IsSetDataCommitFinished() {
		return CommittedOffset_DataCommitFinished_DEFAULT
	}
	return *p.DataCommitFinished
}

var CommittedOffset_CommittedEditOffset_DEFAULT int64

func (p *CommittedOffset) GetCommittedEditOffset() int64 {
	if !p.IsSetCommittedEditOffset() {
		return CommittedOffset_CommittedEditOffset_DEFAULT
	}
	return *p.CommittedEditOffset
}
func (p *CommittedOffset) IsSetCommittedDataOffset() bool {
	return p.CommittedDataOffset != nil
}

func (p *CommittedOffset) IsSetDataCommitFinished() bool {
	return p.DataCommitFinished != nil
}

func (p *CommittedOffset) IsSetCommittedEditOffset() bool {
	return p.CommittedEditOffset != nil
}

func (p *CommittedOffset) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommittedOffset) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(Dictionary, size)
	p.CommittedDataOffset = tMap
	for i := 0; i < size; i++ {
		var _key74 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key74 = v
		}
		_val75 := &Datum{}
		if err := _val75.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val75, err)
		}
		p.CommittedDataOffset[_key74] = _val75
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *CommittedOffset) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DataCommitFinished = &v
	}
	return nil
}

func (p *CommittedOffset) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.CommittedEditOffset = &v
	}
	return nil
}

func (p *CommittedOffset) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CommittedOffset"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommittedOffset) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommittedDataOffset() {
		if err := oprot.WriteFieldBegin("committedDataOffset", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:committedDataOffset: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.CommittedDataOffset)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.CommittedDataOffset {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:committedDataOffset: %s", p, err)
		}
	}
	return err
}

func (p *CommittedOffset) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataCommitFinished() {
		if err := oprot.WriteFieldBegin("dataCommitFinished", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:dataCommitFinished: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.DataCommitFinished)); err != nil {
			return fmt.Errorf("%T.dataCommitFinished (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:dataCommitFinished: %s", p, err)
		}
	}
	return err
}

func (p *CommittedOffset) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommittedEditOffset() {
		if err := oprot.WriteFieldBegin("committedEditOffset", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:committedEditOffset: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CommittedEditOffset)); err != nil {
			return fmt.Errorf("%T.committedEditOffset (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:committedEditOffset: %s", p, err)
		}
	}
	return err
}

func (p *CommittedOffset) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommittedOffset(%+v)", *p)
}
